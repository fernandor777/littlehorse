syntax = "proto3";
package littlehorse;

option java_multiple_files = true;
option java_package = "io.littlehorse.common.proto";

import "google/protobuf/timestamp.proto";
import "storage.proto";
import "service.proto";
import "common_enums.proto";

message GetObjectRequest {
    GetableClassEnum object_type = 1;
    string object_id = 2;
    int32 partition = 3;
}

message GetObjectResponse {
    bytes response = 1;
}

message WaitForCommandRequest {
    string command_id = 1;
}

message WaitForCommandResponse {
    string command_id = 1;
    google.protobuf.Timestamp result_time = 2;
    bytes result = 3;
}

message ScanFilter {
    oneof criteria {
        LHStatus wf_run_status = 1;
        VariableMatch variable_match = 2;
    }
}

message TagScan {
    optional google.protobuf.Timestamp earliest_create_time = 1;
    optional google.protobuf.Timestamp latest_create_time = 2;
    repeated AttributePb attributes = 3;
    GetableClassEnum scan_object_type = 4;
}

message BoundedObjectIdScan {
    string start_object_id = 1;
    optional string end_object_id = 2;
    GetableClassEnum scan_object_type = 3;
}

message InternalScanRequest {
    ScanResultTypePb result_type = 1;
    int32 limit = 2;
    optional BookmarkPb bookmark = 3;
    GetableClassEnum result_object_type = 4;
    string store_name = 5;

    // The partition key of the request. If nul, then all partitions of the
    // store are scanned. Otherwise, only the parttion given by the 
    optional string partition_key = 6;

    oneof scan_boundary {
        BoundedObjectIdScan bounded_object_id_scan = 7;
        TagScan tag_scan = 8;
    }
    repeated ScanFilter filters = 9;
}

message InternalGetAdvertisedHostsResponse {
    map<string, LHHostInfo> hosts = 1;
}

enum ScanResultTypePb {
    // Returns only the Object Id for the scanned objects. Always valid.
    OBJECT_ID = 0;

    // Returns the actual scanned object. Not valid for REMOTE tag scan.
    OBJECT = 1;
}

message InternalScanResponse {
    repeated bytes results = 1;
    BookmarkPb updated_bookmark = 2;
}

message PartitionBookmarkPb { // used for paginated responses
    int32 parttion = 1;
    optional string last_key = 2;
}

message BookmarkPb { // Used for paginated responses
    map<int32, PartitionBookmarkPb> in_progress_partitions = 1;
    repeated int32 completed_partitions = 2;
}
