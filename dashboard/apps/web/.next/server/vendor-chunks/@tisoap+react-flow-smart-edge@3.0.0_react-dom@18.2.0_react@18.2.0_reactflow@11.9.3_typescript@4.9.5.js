"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5";
exports.ids = ["vendor-chunks/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5/node_modules/@tisoap/react-flow-smart-edge/dist/index.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5/node_modules/@tisoap/react-flow-smart-edge/dist/index.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./react-flow-smart-edge.cjs.development.js */ \"(ssr)/../../node_modules/.pnpm/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5/node_modules/@tisoap/react-flow-smart-edge/dist/react-flow-smart-edge.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0aXNvYXArcmVhY3QtZmxvdy1zbWFydC1lZGdlQDMuMC4wX3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX3JlYWN0Zmxvd0AxMS45LjNfdHlwZXNjcmlwdEA0LjkuNS9ub2RlX21vZHVsZXMvQHRpc29hcC9yZWFjdC1mbG93LXNtYXJ0LWVkZ2UvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQ1k7O0FBRVosSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLHFUQUFzRTtBQUN4RSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHRpc29hcCtyZWFjdC1mbG93LXNtYXJ0LWVkZ2VAMy4wLjBfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjBfcmVhY3RmbG93QDExLjkuM190eXBlc2NyaXB0QDQuOS41L25vZGVfbW9kdWxlcy9AdGlzb2FwL3JlYWN0LWZsb3ctc21hcnQtZWRnZS9kaXN0L2luZGV4LmpzPzZhODEiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWN0LWZsb3ctc21hcnQtZWRnZS5janMucHJvZHVjdGlvbi5taW4uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWN0LWZsb3ctc21hcnQtZWRnZS5janMuZGV2ZWxvcG1lbnQuanMnKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5/node_modules/@tisoap/react-flow-smart-edge/dist/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5/node_modules/@tisoap/react-flow-smart-edge/dist/react-flow-smart-edge.cjs.development.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5/node_modules/@tisoap/react-flow-smart-edge/dist/react-flow-smart-edge.cjs.development.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar React = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar reactflow = __webpack_require__(/*! reactflow */ \"(ssr)/../../node_modules/.pnpm/reactflow@11.9.3_@types+react@18.2.5_react-dom@18.2.0_react@18.2.0/node_modules/reactflow/dist/umd/index.js\");\nvar pathfinding = __webpack_require__(/*! pathfinding */ \"(ssr)/../../node_modules/.pnpm/pathfinding@0.4.18/node_modules/pathfinding/index.js\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nvar getNextPointFromPosition = function getNextPointFromPosition(point, position) {\n  switch (position) {\n    case 'top':\n      return {\n        x: point.x,\n        y: point.y - 1\n      };\n    case 'bottom':\n      return {\n        x: point.x,\n        y: point.y + 1\n      };\n    case 'left':\n      return {\n        x: point.x - 1,\n        y: point.y\n      };\n    case 'right':\n      return {\n        x: point.x + 1,\n        y: point.y\n      };\n  }\n};\n/**\r\n * Guarantee that the path is walkable, even if the point is inside a non\r\n * walkable area, by adding a walkable path in the direction of the point's\r\n * Position.\r\n */\nvar guaranteeWalkablePath = function guaranteeWalkablePath(grid, point, position) {\n  var node = grid.getNodeAt(point.x, point.y);\n  while (!node.walkable) {\n    grid.setWalkableAt(node.x, node.y, true);\n    var next = getNextPointFromPosition(node, position);\n    node = grid.getNodeAt(next.x, next.y);\n  }\n};\n\n/**\r\n * Each bounding box is a collection of X/Y points in a graph, and we\r\n * need to convert them to \"occupied\" cells in a 2D grid representation.\r\n *\r\n * The top most position of the grid (grid[0][0]) needs to be equivalent\r\n * to the top most point in the graph (the graph.topLeft point).\r\n *\r\n * Since the top most point can have X/Y values different than zero,\r\n * and each cell in a grid represents a 10x10 pixel area in the grid (or a\r\n * gridRatio area), there's need to be a conversion between a point in a graph\r\n * to a point in the grid.\r\n *\r\n * We do this conversion by dividing a graph point X/Y values by the grid ratio,\r\n * and \"shifting\" their values up or down, depending on the values of the top\r\n * most point in the graph. The top most point in the graph will have the\r\n * smallest values for X and Y.\r\n *\r\n * We avoid setting nodes in the border of the grid (x=0 or y=0), so there's\r\n * always a \"walkable\" area around the grid.\r\n */\nvar graphToGridPoint = function graphToGridPoint(graphPoint, smallestX, smallestY, gridRatio) {\n  var x = graphPoint.x / gridRatio;\n  var y = graphPoint.y / gridRatio;\n  var referenceX = smallestX / gridRatio;\n  var referenceY = smallestY / gridRatio;\n  if (referenceX < 1) {\n    while (referenceX !== 1) {\n      referenceX++;\n      x++;\n    }\n  } else if (referenceX > 1) {\n    while (referenceX !== 1) {\n      referenceX--;\n      x--;\n    }\n  } else ;\n  if (referenceY < 1) {\n    while (referenceY !== 1) {\n      referenceY++;\n      y++;\n    }\n  } else if (referenceY > 1) {\n    while (referenceY !== 1) {\n      referenceY--;\n      y--;\n    }\n  } else ;\n  return {\n    x: x,\n    y: y\n  };\n};\n/**\r\n * Converts a grid point back to a graph point, using the reverse logic of\r\n * graphToGridPoint.\r\n */\nvar gridToGraphPoint = function gridToGraphPoint(gridPoint, smallestX, smallestY, gridRatio) {\n  var x = gridPoint.x * gridRatio;\n  var y = gridPoint.y * gridRatio;\n  var referenceX = smallestX;\n  var referenceY = smallestY;\n  if (referenceX < gridRatio) {\n    while (referenceX !== gridRatio) {\n      referenceX = referenceX + gridRatio;\n      x = x - gridRatio;\n    }\n  } else if (referenceX > gridRatio) {\n    while (referenceX !== gridRatio) {\n      referenceX = referenceX - gridRatio;\n      x = x + gridRatio;\n    }\n  } else ;\n  if (referenceY < gridRatio) {\n    while (referenceY !== gridRatio) {\n      referenceY = referenceY + gridRatio;\n      y = y - gridRatio;\n    }\n  } else if (referenceY > gridRatio) {\n    while (referenceY !== gridRatio) {\n      referenceY = referenceY - gridRatio;\n      y = y + gridRatio;\n    }\n  } else ;\n  return {\n    x: x,\n    y: y\n  };\n};\n\nvar round = function round(x, multiple) {\n  if (multiple === void 0) {\n    multiple = 10;\n  }\n  return Math.round(x / multiple) * multiple;\n};\nvar roundDown = function roundDown(x, multiple) {\n  if (multiple === void 0) {\n    multiple = 10;\n  }\n  return Math.floor(x / multiple) * multiple;\n};\nvar roundUp = function roundUp(x, multiple) {\n  if (multiple === void 0) {\n    multiple = 10;\n  }\n  return Math.ceil(x / multiple) * multiple;\n};\nvar toInteger = function toInteger(value, min) {\n  if (min === void 0) {\n    min = 0;\n  }\n  var result = Math.max(Math.round(value), min);\n  result = Number.isInteger(result) ? result : min;\n  result = result >= min ? result : min;\n  return result;\n};\n\nvar createGrid = function createGrid(graph, nodes, source, target, gridRatio) {\n  if (gridRatio === void 0) {\n    gridRatio = 2;\n  }\n  var xMin = graph.xMin,\n    yMin = graph.yMin,\n    width = graph.width,\n    height = graph.height;\n  // Create a grid representation of the graph box, where each cell is\n  // equivalent to 10x10 pixels (or the grid ratio) on the graph. We'll use\n  // this simplified grid to do pathfinding.\n  var mapColumns = roundUp(width, gridRatio) / gridRatio + 1;\n  var mapRows = roundUp(height, gridRatio) / gridRatio + 1;\n  var grid = new pathfinding.Grid(mapColumns, mapRows);\n  // Update the grid representation with the space the nodes take up\n  nodes.forEach(function (node) {\n    var nodeStart = graphToGridPoint(node.topLeft, xMin, yMin, gridRatio);\n    var nodeEnd = graphToGridPoint(node.bottomRight, xMin, yMin, gridRatio);\n    for (var x = nodeStart.x; x < nodeEnd.x; x++) {\n      for (var y = nodeStart.y; y < nodeEnd.y; y++) {\n        grid.setWalkableAt(x, y, false);\n      }\n    }\n  });\n  // Convert the starting and ending graph points to grid points\n  var startGrid = graphToGridPoint({\n    x: round(source.x, gridRatio),\n    y: round(source.y, gridRatio)\n  }, xMin, yMin, gridRatio);\n  var endGrid = graphToGridPoint({\n    x: round(target.x, gridRatio),\n    y: round(target.y, gridRatio)\n  }, xMin, yMin, gridRatio);\n  // Guarantee a walkable path between the start and end points, even if the\n  // source or target where covered by another node or by padding\n  var startingNode = grid.getNodeAt(startGrid.x, startGrid.y);\n  guaranteeWalkablePath(grid, startingNode, source.position);\n  var endingNode = grid.getNodeAt(endGrid.x, endGrid.y);\n  guaranteeWalkablePath(grid, endingNode, target.position);\n  // Use the next closest points as the start and end points, so\n  // pathfinding does not start too close to the nodes\n  var start = getNextPointFromPosition(startingNode, source.position);\n  var end = getNextPointFromPosition(endingNode, target.position);\n  return {\n    grid: grid,\n    start: start,\n    end: end\n  };\n};\n\n/**\r\n * Draws a SVG path from a list of points, using straight lines.\r\n */\nvar svgDrawStraightLinePath = function svgDrawStraightLinePath(source, target, path) {\n  var svgPathString = \"M \" + source.x + \", \" + source.y + \" \";\n  path.forEach(function (point) {\n    var x = point[0],\n      y = point[1];\n    svgPathString += \"L \" + x + \", \" + y + \" \";\n  });\n  svgPathString += \"L \" + target.x + \", \" + target.y + \" \";\n  return svgPathString;\n};\n/**\r\n * Draws a SVG path from a list of points, using rounded lines.\r\n */\nvar svgDrawSmoothLinePath = function svgDrawSmoothLinePath(source, target, path) {\n  var points = [[source.x, source.y]].concat(path, [[target.x, target.y]]);\n  return quadraticBezierCurve(points);\n};\nvar quadraticBezierCurve = function quadraticBezierCurve(points) {\n  var X = 0;\n  var Y = 1;\n  var point = points[0];\n  var first = points[0];\n  var svgPath = \"M\" + first[X] + \",\" + first[Y] + \"M\";\n  for (var i = 0; i < points.length; i++) {\n    var next = points[i];\n    var midPoint = getMidPoint(point[X], point[Y], next[X], next[Y]);\n    svgPath += \" \" + midPoint[X] + \",\" + midPoint[Y];\n    svgPath += \"Q\" + next[X] + \",\" + next[Y];\n    point = next;\n  }\n  var last = points[points.length - 1];\n  svgPath += \" \" + last[0] + \",\" + last[1];\n  return svgPath;\n};\nvar getMidPoint = function getMidPoint(Ax, Ay, Bx, By) {\n  var Zx = (Ax - Bx) / 2 + Bx;\n  var Zy = (Ay - By) / 2 + By;\n  return [Zx, Zy];\n};\n\n// FIXME: The \"pathfinding\" module doe not have proper typings.\nvar pathfindingAStarDiagonal = function pathfindingAStarDiagonal(grid, start, end) {\n  try {\n    var finder = new pathfinding.AStarFinder({\n      diagonalMovement: pathfinding.DiagonalMovement.Always\n    });\n    var fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid);\n    var smoothedPath = pathfinding.Util.smoothenPath(grid, fullPath);\n    if (fullPath.length === 0 || smoothedPath.length === 0) return null;\n    return {\n      fullPath: fullPath,\n      smoothedPath: smoothedPath\n    };\n  } catch (_unused) {\n    return null;\n  }\n};\nvar pathfindingAStarNoDiagonal = function pathfindingAStarNoDiagonal(grid, start, end) {\n  try {\n    var finder = new pathfinding.AStarFinder({\n      diagonalMovement: pathfinding.DiagonalMovement.Never\n    });\n    var fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid);\n    var smoothedPath = pathfinding.Util.smoothenPath(grid, fullPath);\n    if (fullPath.length === 0 || smoothedPath.length === 0) return null;\n    return {\n      fullPath: fullPath,\n      smoothedPath: smoothedPath\n    };\n  } catch (_unused2) {\n    return null;\n  }\n};\nvar pathfindingJumpPointNoDiagonal = function pathfindingJumpPointNoDiagonal(grid, start, end) {\n  try {\n    // FIXME: The \"pathfinding\" module doe not have proper typings.\n    // @ts-ignore\n    var finder = new pathfinding.JumpPointFinder({\n      diagonalMovement: pathfinding.DiagonalMovement.Never\n    });\n    var fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid);\n    var smoothedPath = fullPath;\n    if (fullPath.length === 0 || smoothedPath.length === 0) return null;\n    return {\n      fullPath: fullPath,\n      smoothedPath: smoothedPath\n    };\n  } catch (_unused3) {\n    return null;\n  }\n};\n\n/**\r\n * Get the bounding box of all nodes and the graph itself, as X/Y coordinates\r\n * of all corner points.\r\n *\r\n * @param nodes The node list\r\n * @param nodePadding Optional padding to add to the node's and graph bounding boxes\r\n * @param roundTo Everything will be rounded to this nearest integer\r\n * @returns Graph and nodes bounding boxes.\r\n */\nvar getBoundingBoxes = function getBoundingBoxes(nodes, nodePadding, roundTo) {\n  if (nodePadding === void 0) {\n    nodePadding = 2;\n  }\n  if (roundTo === void 0) {\n    roundTo = 2;\n  }\n  var xMax = Number.MIN_SAFE_INTEGER;\n  var yMax = Number.MIN_SAFE_INTEGER;\n  var xMin = Number.MAX_SAFE_INTEGER;\n  var yMin = Number.MAX_SAFE_INTEGER;\n  var nodeBoxes = nodes.map(function (node) {\n    var _node$positionAbsolut, _node$positionAbsolut2;\n    var width = Math.max(node.width || 0, 1);\n    var height = Math.max(node.height || 0, 1);\n    var position = {\n      x: ((_node$positionAbsolut = node.positionAbsolute) == null ? void 0 : _node$positionAbsolut.x) || 0,\n      y: ((_node$positionAbsolut2 = node.positionAbsolute) == null ? void 0 : _node$positionAbsolut2.y) || 0\n    };\n    var topLeft = {\n      x: position.x - nodePadding,\n      y: position.y - nodePadding\n    };\n    var bottomLeft = {\n      x: position.x - nodePadding,\n      y: position.y + height + nodePadding\n    };\n    var topRight = {\n      x: position.x + width + nodePadding,\n      y: position.y - nodePadding\n    };\n    var bottomRight = {\n      x: position.x + width + nodePadding,\n      y: position.y + height + nodePadding\n    };\n    if (roundTo > 0) {\n      topLeft.x = roundDown(topLeft.x, roundTo);\n      topLeft.y = roundDown(topLeft.y, roundTo);\n      bottomLeft.x = roundDown(bottomLeft.x, roundTo);\n      bottomLeft.y = roundUp(bottomLeft.y, roundTo);\n      topRight.x = roundUp(topRight.x, roundTo);\n      topRight.y = roundDown(topRight.y, roundTo);\n      bottomRight.x = roundUp(bottomRight.x, roundTo);\n      bottomRight.y = roundUp(bottomRight.y, roundTo);\n    }\n    if (topLeft.y < yMin) yMin = topLeft.y;\n    if (topLeft.x < xMin) xMin = topLeft.x;\n    if (bottomRight.y > yMax) yMax = bottomRight.y;\n    if (bottomRight.x > xMax) xMax = bottomRight.x;\n    return {\n      id: node.id,\n      width: width,\n      height: height,\n      topLeft: topLeft,\n      bottomLeft: bottomLeft,\n      topRight: topRight,\n      bottomRight: bottomRight\n    };\n  });\n  var graphPadding = nodePadding * 2;\n  xMax = roundUp(xMax + graphPadding, roundTo);\n  yMax = roundUp(yMax + graphPadding, roundTo);\n  xMin = roundDown(xMin - graphPadding, roundTo);\n  yMin = roundDown(yMin - graphPadding, roundTo);\n  var topLeft = {\n    x: xMin,\n    y: yMin\n  };\n  var bottomLeft = {\n    x: xMin,\n    y: yMax\n  };\n  var topRight = {\n    x: xMax,\n    y: yMin\n  };\n  var bottomRight = {\n    x: xMax,\n    y: yMax\n  };\n  var width = Math.abs(topLeft.x - topRight.x);\n  var height = Math.abs(topLeft.y - bottomLeft.y);\n  var graphBox = {\n    topLeft: topLeft,\n    bottomLeft: bottomLeft,\n    topRight: topRight,\n    bottomRight: bottomRight,\n    width: width,\n    height: height,\n    xMax: xMax,\n    yMax: yMax,\n    xMin: xMin,\n    yMin: yMin\n  };\n  return {\n    nodeBoxes: nodeBoxes,\n    graphBox: graphBox\n  };\n};\n\nvar getSmartEdge = function getSmartEdge(_ref) {\n  var _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options,\n    _ref$nodes = _ref.nodes,\n    nodes = _ref$nodes === void 0 ? [] : _ref$nodes,\n    sourceX = _ref.sourceX,\n    sourceY = _ref.sourceY,\n    targetX = _ref.targetX,\n    targetY = _ref.targetY,\n    sourcePosition = _ref.sourcePosition,\n    targetPosition = _ref.targetPosition;\n  try {\n    var _options$drawEdge = options.drawEdge,\n      drawEdge = _options$drawEdge === void 0 ? svgDrawSmoothLinePath : _options$drawEdge,\n      _options$generatePath = options.generatePath,\n      generatePath = _options$generatePath === void 0 ? pathfindingAStarDiagonal : _options$generatePath;\n    var _options$gridRatio = options.gridRatio,\n      gridRatio = _options$gridRatio === void 0 ? 10 : _options$gridRatio,\n      _options$nodePadding = options.nodePadding,\n      nodePadding = _options$nodePadding === void 0 ? 10 : _options$nodePadding;\n    gridRatio = toInteger(gridRatio);\n    nodePadding = toInteger(nodePadding);\n    // We use the node's information to generate bounding boxes for them\n    // and the graph\n    var _getBoundingBoxes = getBoundingBoxes(nodes, nodePadding, gridRatio),\n      graphBox = _getBoundingBoxes.graphBox,\n      nodeBoxes = _getBoundingBoxes.nodeBoxes;\n    var source = {\n      x: sourceX,\n      y: sourceY,\n      position: sourcePosition\n    };\n    var target = {\n      x: targetX,\n      y: targetY,\n      position: targetPosition\n    };\n    // With this information, we can create a 2D grid representation of\n    // our graph, that tells us where in the graph there is a \"free\" space or not\n    var _createGrid = createGrid(graphBox, nodeBoxes, source, target, gridRatio),\n      grid = _createGrid.grid,\n      start = _createGrid.start,\n      end = _createGrid.end;\n    // We then can use the grid representation to do pathfinding\n    var generatePathResult = generatePath(grid, start, end);\n    if (generatePathResult === null) {\n      return null;\n    }\n    var fullPath = generatePathResult.fullPath,\n      smoothedPath = generatePathResult.smoothedPath;\n    // Here we convert the grid path to a sequence of graph coordinates.\n    var graphPath = smoothedPath.map(function (gridPoint) {\n      var x = gridPoint[0],\n        y = gridPoint[1];\n      var graphPoint = gridToGraphPoint({\n        x: x,\n        y: y\n      }, graphBox.xMin, graphBox.yMin, gridRatio);\n      return [graphPoint.x, graphPoint.y];\n    });\n    // Finally, we can use the graph path to draw the edge\n    var svgPathString = drawEdge(source, target, graphPath);\n    // Compute the edge's middle point using the full path, so users can use\n    // it to position their custom labels\n    var index = Math.floor(fullPath.length / 2);\n    var middlePoint = fullPath[index];\n    var middleX = middlePoint[0],\n      middleY = middlePoint[1];\n    var _gridToGraphPoint = gridToGraphPoint({\n        x: middleX,\n        y: middleY\n      }, graphBox.xMin, graphBox.yMin, gridRatio),\n      edgeCenterX = _gridToGraphPoint.x,\n      edgeCenterY = _gridToGraphPoint.y;\n    return {\n      svgPathString: svgPathString,\n      edgeCenterX: edgeCenterX,\n      edgeCenterY: edgeCenterY\n    };\n  } catch (_unused) {\n    return null;\n  }\n};\n\nvar _excluded = [\"nodes\", \"options\"];\nfunction SmartEdge(_ref) {\n  var nodes = _ref.nodes,\n    options = _ref.options,\n    edgeProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var sourceX = edgeProps.sourceX,\n    sourceY = edgeProps.sourceY,\n    sourcePosition = edgeProps.sourcePosition,\n    targetX = edgeProps.targetX,\n    targetY = edgeProps.targetY,\n    targetPosition = edgeProps.targetPosition,\n    style = edgeProps.style,\n    label = edgeProps.label,\n    labelStyle = edgeProps.labelStyle,\n    labelShowBg = edgeProps.labelShowBg,\n    labelBgStyle = edgeProps.labelBgStyle,\n    labelBgPadding = edgeProps.labelBgPadding,\n    labelBgBorderRadius = edgeProps.labelBgBorderRadius,\n    markerEnd = edgeProps.markerEnd,\n    markerStart = edgeProps.markerStart,\n    interactionWidth = edgeProps.interactionWidth;\n  var smartResponse = getSmartEdge({\n    sourcePosition: sourcePosition,\n    targetPosition: targetPosition,\n    sourceX: sourceX,\n    sourceY: sourceY,\n    targetX: targetX,\n    targetY: targetY,\n    options: options,\n    nodes: nodes\n  });\n  var FallbackEdge = options.fallback || reactflow.BezierEdge;\n  if (smartResponse === null) {\n    return React__default[\"default\"].createElement(FallbackEdge, _extends({}, edgeProps));\n  }\n  var edgeCenterX = smartResponse.edgeCenterX,\n    edgeCenterY = smartResponse.edgeCenterY,\n    svgPathString = smartResponse.svgPathString;\n  return React__default[\"default\"].createElement(reactflow.BaseEdge, {\n    path: svgPathString,\n    labelX: edgeCenterX,\n    labelY: edgeCenterY,\n    label: label,\n    labelStyle: labelStyle,\n    labelShowBg: labelShowBg,\n    labelBgStyle: labelBgStyle,\n    labelBgPadding: labelBgPadding,\n    labelBgBorderRadius: labelBgBorderRadius,\n    style: style,\n    markerStart: markerStart,\n    markerEnd: markerEnd,\n    interactionWidth: interactionWidth\n  });\n}\n\nvar BezierConfiguration = {\n  drawEdge: svgDrawSmoothLinePath,\n  generatePath: pathfindingAStarDiagonal,\n  fallback: reactflow.BezierEdge\n};\nfunction SmartBezierEdge(props) {\n  var nodes = reactflow.useNodes();\n  return React__default[\"default\"].createElement(SmartEdge, _extends({}, props, {\n    options: BezierConfiguration,\n    nodes: nodes\n  }));\n}\n\nvar StepConfiguration = {\n  drawEdge: svgDrawStraightLinePath,\n  generatePath: pathfindingJumpPointNoDiagonal,\n  fallback: reactflow.StepEdge\n};\nfunction SmartStepEdge(props) {\n  var nodes = reactflow.useNodes();\n  return React__default[\"default\"].createElement(SmartEdge, _extends({}, props, {\n    options: StepConfiguration,\n    nodes: nodes\n  }));\n}\n\nvar StraightConfiguration = {\n  drawEdge: svgDrawStraightLinePath,\n  generatePath: pathfindingAStarNoDiagonal,\n  fallback: reactflow.StraightEdge\n};\nfunction SmartStraightEdge(props) {\n  var nodes = reactflow.useNodes();\n  return React__default[\"default\"].createElement(SmartEdge, _extends({}, props, {\n    options: StraightConfiguration,\n    nodes: nodes\n  }));\n}\n\nexports.SmartBezierEdge = SmartBezierEdge;\nexports.SmartEdge = SmartEdge;\nexports.SmartStepEdge = SmartStepEdge;\nexports.SmartStraightEdge = SmartStraightEdge;\nexports[\"default\"] = SmartBezierEdge;\nexports.getSmartEdge = getSmartEdge;\nexports.pathfindingAStarDiagonal = pathfindingAStarDiagonal;\nexports.pathfindingAStarNoDiagonal = pathfindingAStarNoDiagonal;\nexports.pathfindingJumpPointNoDiagonal = pathfindingJumpPointNoDiagonal;\nexports.svgDrawSmoothLinePath = svgDrawSmoothLinePath;\nexports.svgDrawStraightLinePath = svgDrawStraightLinePath;\n//# sourceMappingURL=react-flow-smart-edge.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@tisoap+react-flow-smart-edge@3.0.0_react-dom@18.2.0_react@18.2.0_reactflow@11.9.3_typescript@4.9.5/node_modules/@tisoap/react-flow-smart-edge/dist/react-flow-smart-edge.cjs.development.js\n");

/***/ })

};
;