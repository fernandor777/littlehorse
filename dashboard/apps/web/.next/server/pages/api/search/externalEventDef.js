"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/search/externalEventDef";
exports.ids = ["pages/api/search/externalEventDef"];
exports.modules = {

/***/ "long":
/*!***********************!*\
  !*** external "long" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("long");

/***/ }),

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/keycloak":
/*!***********************************************!*\
  !*** external "next-auth/providers/keycloak" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/keycloak");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "nice-grpc":
/*!****************************!*\
  !*** external "nice-grpc" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("nice-grpc");

/***/ }),

/***/ "nice-grpc-common":
/*!***********************************!*\
  !*** external "nice-grpc-common" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("nice-grpc-common");

/***/ }),

/***/ "protobufjs/minimal":
/*!*************************************!*\
  !*** external "protobufjs/minimal" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("protobufjs/minimal");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

module.exports = require("http2");

/***/ }),

/***/ "(api)/../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsearch%2FexternalEventDef&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsearch%2FexternalEventDef.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsearch%2FexternalEventDef&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsearch%2FexternalEventDef.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_search_externalEventDef_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/search/externalEventDef.ts */ \"(api)/./pages/api/search/externalEventDef.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_search_externalEventDef_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_search_externalEventDef_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/search/externalEventDef\",\n        pathname: \"/api/search/externalEventDef\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_search_externalEventDef_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTMuNS41X0BiYWJlbCtjb3JlQDcuMjMuMl9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMF9zYXNzQDEuNjMuNi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnNlYXJjaCUyRmV4dGVybmFsRXZlbnREZWYmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnNlYXJjaCUyRmV4dGVybmFsRXZlbnREZWYudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUU7QUFDbkU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGtFQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxrRUFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvP2FjNTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9zZWFyY2gvZXh0ZXJuYWxFdmVudERlZi50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3NlYXJjaC9leHRlcm5hbEV2ZW50RGVmXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc2VhcmNoL2V4dGVybmFsRXZlbnREZWZcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsearch%2FexternalEventDef&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsearch%2FexternalEventDef.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/acls.ts":
/*!****************************************!*\
  !*** ./littlehorse-public-api/acls.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACLAction: () => (/* binding */ ACLAction),\n/* harmony export */   ACLResource: () => (/* binding */ ACLResource),\n/* harmony export */   DeletePrincipalRequest: () => (/* binding */ DeletePrincipalRequest),\n/* harmony export */   Principal: () => (/* binding */ Principal),\n/* harmony export */   Principal_PerTenantAclsEntry: () => (/* binding */ Principal_PerTenantAclsEntry),\n/* harmony export */   PutPrincipalRequest: () => (/* binding */ PutPrincipalRequest),\n/* harmony export */   PutPrincipalRequest_PerTenantAclsEntry: () => (/* binding */ PutPrincipalRequest_PerTenantAclsEntry),\n/* harmony export */   PutTenantRequest: () => (/* binding */ PutTenantRequest),\n/* harmony export */   ServerACL: () => (/* binding */ ServerACL),\n/* harmony export */   ServerACLs: () => (/* binding */ ServerACLs),\n/* harmony export */   Tenant: () => (/* binding */ Tenant),\n/* harmony export */   aCLActionFromJSON: () => (/* binding */ aCLActionFromJSON),\n/* harmony export */   aCLActionToJSON: () => (/* binding */ aCLActionToJSON),\n/* harmony export */   aCLActionToNumber: () => (/* binding */ aCLActionToNumber),\n/* harmony export */   aCLResourceFromJSON: () => (/* binding */ aCLResourceFromJSON),\n/* harmony export */   aCLResourceToJSON: () => (/* binding */ aCLResourceToJSON),\n/* harmony export */   aCLResourceToNumber: () => (/* binding */ aCLResourceToNumber),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* eslint-disable */ \n\n\nconst protobufPackage = \"littlehorse\";\nvar ACLResource;\n(function(ACLResource) {\n    ACLResource[\"ACL_WORKFLOW\"] = \"ACL_WORKFLOW\";\n    ACLResource[\"ACL_TASK\"] = \"ACL_TASK\";\n    ACLResource[\"ACL_EXTERNAL_EVENT\"] = \"ACL_EXTERNAL_EVENT\";\n    ACLResource[\"ACL_USER_TASK\"] = \"ACL_USER_TASK\";\n    ACLResource[\"ACL_PRINCIPAL\"] = \"ACL_PRINCIPAL\";\n    ACLResource[\"ACL_TENANT\"] = \"ACL_TENANT\";\n    ACLResource[\"ACL_ALL_RESOURCES\"] = \"ACL_ALL_RESOURCES\";\n    ACLResource[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(ACLResource || (ACLResource = {}));\nfunction aCLResourceFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ACL_WORKFLOW\":\n            return \"ACL_WORKFLOW\";\n        case 1:\n        case \"ACL_TASK\":\n            return \"ACL_TASK\";\n        case 2:\n        case \"ACL_EXTERNAL_EVENT\":\n            return \"ACL_EXTERNAL_EVENT\";\n        case 3:\n        case \"ACL_USER_TASK\":\n            return \"ACL_USER_TASK\";\n        case 4:\n        case \"ACL_PRINCIPAL\":\n            return \"ACL_PRINCIPAL\";\n        case 5:\n        case \"ACL_TENANT\":\n            return \"ACL_TENANT\";\n        case 6:\n        case \"ACL_ALL_RESOURCES\":\n            return \"ACL_ALL_RESOURCES\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction aCLResourceToJSON(object) {\n    switch(object){\n        case \"ACL_WORKFLOW\":\n            return \"ACL_WORKFLOW\";\n        case \"ACL_TASK\":\n            return \"ACL_TASK\";\n        case \"ACL_EXTERNAL_EVENT\":\n            return \"ACL_EXTERNAL_EVENT\";\n        case \"ACL_USER_TASK\":\n            return \"ACL_USER_TASK\";\n        case \"ACL_PRINCIPAL\":\n            return \"ACL_PRINCIPAL\";\n        case \"ACL_TENANT\":\n            return \"ACL_TENANT\";\n        case \"ACL_ALL_RESOURCES\":\n            return \"ACL_ALL_RESOURCES\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction aCLResourceToNumber(object) {\n    switch(object){\n        case \"ACL_WORKFLOW\":\n            return 0;\n        case \"ACL_TASK\":\n            return 1;\n        case \"ACL_EXTERNAL_EVENT\":\n            return 2;\n        case \"ACL_USER_TASK\":\n            return 3;\n        case \"ACL_PRINCIPAL\":\n            return 4;\n        case \"ACL_TENANT\":\n            return 5;\n        case \"ACL_ALL_RESOURCES\":\n            return 6;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar ACLAction;\n(function(ACLAction) {\n    ACLAction[\"READ\"] = \"READ\";\n    ACLAction[\"RUN\"] = \"RUN\";\n    ACLAction[\"WRITE_METADATA\"] = \"WRITE_METADATA\";\n    ACLAction[\"ALL_ACTIONS\"] = \"ALL_ACTIONS\";\n    ACLAction[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(ACLAction || (ACLAction = {}));\nfunction aCLActionFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"READ\":\n            return \"READ\";\n        case 1:\n        case \"RUN\":\n            return \"RUN\";\n        case 2:\n        case \"WRITE_METADATA\":\n            return \"WRITE_METADATA\";\n        case 3:\n        case \"ALL_ACTIONS\":\n            return \"ALL_ACTIONS\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction aCLActionToJSON(object) {\n    switch(object){\n        case \"READ\":\n            return \"READ\";\n        case \"RUN\":\n            return \"RUN\";\n        case \"WRITE_METADATA\":\n            return \"WRITE_METADATA\";\n        case \"ALL_ACTIONS\":\n            return \"ALL_ACTIONS\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction aCLActionToNumber(object) {\n    switch(object){\n        case \"READ\":\n            return 0;\n        case \"RUN\":\n            return 1;\n        case \"WRITE_METADATA\":\n            return 2;\n        case \"ALL_ACTIONS\":\n            return 3;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nfunction createBasePrincipal() {\n    return {\n        id: undefined,\n        createdAt: undefined,\n        perTenantAcls: {},\n        globalAcls: undefined\n    };\n}\nconst Principal = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_2__.PrincipalId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_1__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();\n        }\n        Object.entries(message.perTenantAcls).forEach(([key, value])=>{\n            Principal_PerTenantAclsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(26).fork()).ldelim();\n        });\n        if (message.globalAcls !== undefined) {\n            ServerACLs.encode(message.globalAcls, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrincipal();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_2__.PrincipalId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_1__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    const entry3 = Principal_PerTenantAclsEntry.decode(reader, reader.uint32());\n                    if (entry3.value !== undefined) {\n                        message.perTenantAcls[entry3.key] = entry3.value;\n                    }\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.globalAcls = ServerACLs.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_2__.PrincipalId.fromJSON(object.id) : undefined,\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,\n            perTenantAcls: isObject(object.perTenantAcls) ? Object.entries(object.perTenantAcls).reduce((acc, [key, value])=>{\n                acc[key] = ServerACLs.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            globalAcls: isSet(object.globalAcls) ? ServerACLs.fromJSON(object.globalAcls) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_2__.PrincipalId.toJSON(message.id);\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        if (message.perTenantAcls) {\n            const entries = Object.entries(message.perTenantAcls);\n            if (entries.length > 0) {\n                obj.perTenantAcls = {};\n                entries.forEach(([k, v])=>{\n                    obj.perTenantAcls[k] = ServerACLs.toJSON(v);\n                });\n            }\n        }\n        if (message.globalAcls !== undefined) {\n            obj.globalAcls = ServerACLs.toJSON(message.globalAcls);\n        }\n        return obj;\n    },\n    create (base) {\n        return Principal.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePrincipal();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_2__.PrincipalId.fromPartial(object.id) : undefined;\n        message.createdAt = object.createdAt ?? undefined;\n        message.perTenantAcls = Object.entries(object.perTenantAcls ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = ServerACLs.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.globalAcls = object.globalAcls !== undefined && object.globalAcls !== null ? ServerACLs.fromPartial(object.globalAcls) : undefined;\n        return message;\n    }\n};\nfunction createBasePrincipal_PerTenantAclsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst Principal_PerTenantAclsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            ServerACLs.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrincipal_PerTenantAclsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = ServerACLs.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? ServerACLs.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = ServerACLs.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return Principal_PerTenantAclsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePrincipal_PerTenantAclsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? ServerACLs.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseTenant() {\n    return {\n        id: undefined,\n        createdAt: undefined\n    };\n}\nconst Tenant = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_2__.TenantId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_1__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTenant();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_2__.TenantId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_1__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_2__.TenantId.fromJSON(object.id) : undefined,\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_2__.TenantId.toJSON(message.id);\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        return obj;\n    },\n    create (base) {\n        return Tenant.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTenant();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_2__.TenantId.fromPartial(object.id) : undefined;\n        message.createdAt = object.createdAt ?? undefined;\n        return message;\n    }\n};\nfunction createBaseServerACLs() {\n    return {\n        acls: []\n    };\n}\nconst ServerACLs = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        for (const v of message.acls){\n            ServerACL.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseServerACLs();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.acls.push(ServerACL.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            acls: globalThis.Array.isArray(object?.acls) ? object.acls.map((e)=>ServerACL.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.acls?.length) {\n            obj.acls = message.acls.map((e)=>ServerACL.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return ServerACLs.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseServerACLs();\n        message.acls = object.acls?.map((e)=>ServerACL.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseServerACL() {\n    return {\n        resources: [],\n        allowedActions: [],\n        name: undefined,\n        prefix: undefined\n    };\n}\nconst ServerACL = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.resources){\n            writer.int32(aCLResourceToNumber(v));\n        }\n        writer.ldelim();\n        writer.uint32(18).fork();\n        for (const v of message.allowedActions){\n            writer.int32(aCLActionToNumber(v));\n        }\n        writer.ldelim();\n        if (message.name !== undefined) {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.prefix !== undefined) {\n            writer.uint32(34).string(message.prefix);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseServerACL();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag === 8) {\n                        message.resources.push(aCLResourceFromJSON(reader.int32()));\n                        continue;\n                    }\n                    if (tag === 10) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.resources.push(aCLResourceFromJSON(reader.int32()));\n                        }\n                        continue;\n                    }\n                    break;\n                case 2:\n                    if (tag === 16) {\n                        message.allowedActions.push(aCLActionFromJSON(reader.int32()));\n                        continue;\n                    }\n                    if (tag === 18) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.allowedActions.push(aCLActionFromJSON(reader.int32()));\n                        }\n                        continue;\n                    }\n                    break;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.prefix = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            resources: globalThis.Array.isArray(object?.resources) ? object.resources.map((e)=>aCLResourceFromJSON(e)) : [],\n            allowedActions: globalThis.Array.isArray(object?.allowedActions) ? object.allowedActions.map((e)=>aCLActionFromJSON(e)) : [],\n            name: isSet(object.name) ? globalThis.String(object.name) : undefined,\n            prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.resources?.length) {\n            obj.resources = message.resources.map((e)=>aCLResourceToJSON(e));\n        }\n        if (message.allowedActions?.length) {\n            obj.allowedActions = message.allowedActions.map((e)=>aCLActionToJSON(e));\n        }\n        if (message.name !== undefined) {\n            obj.name = message.name;\n        }\n        if (message.prefix !== undefined) {\n            obj.prefix = message.prefix;\n        }\n        return obj;\n    },\n    create (base) {\n        return ServerACL.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseServerACL();\n        message.resources = object.resources?.map((e)=>e) || [];\n        message.allowedActions = object.allowedActions?.map((e)=>e) || [];\n        message.name = object.name ?? undefined;\n        message.prefix = object.prefix ?? undefined;\n        return message;\n    }\n};\nfunction createBasePutPrincipalRequest() {\n    return {\n        id: \"\",\n        perTenantAcls: {},\n        globalAcls: undefined,\n        overwrite: false\n    };\n}\nconst PutPrincipalRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        Object.entries(message.perTenantAcls).forEach(([key, value])=>{\n            PutPrincipalRequest_PerTenantAclsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(18).fork()).ldelim();\n        });\n        if (message.globalAcls !== undefined) {\n            ServerACLs.encode(message.globalAcls, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.overwrite === true) {\n            writer.uint32(40).bool(message.overwrite);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutPrincipalRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    const entry2 = PutPrincipalRequest_PerTenantAclsEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.perTenantAcls[entry2.key] = entry2.value;\n                    }\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.globalAcls = ServerACLs.decode(reader, reader.uint32());\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.overwrite = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? globalThis.String(object.id) : \"\",\n            perTenantAcls: isObject(object.perTenantAcls) ? Object.entries(object.perTenantAcls).reduce((acc, [key, value])=>{\n                acc[key] = ServerACLs.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            globalAcls: isSet(object.globalAcls) ? ServerACLs.fromJSON(object.globalAcls) : undefined,\n            overwrite: isSet(object.overwrite) ? globalThis.Boolean(object.overwrite) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== \"\") {\n            obj.id = message.id;\n        }\n        if (message.perTenantAcls) {\n            const entries = Object.entries(message.perTenantAcls);\n            if (entries.length > 0) {\n                obj.perTenantAcls = {};\n                entries.forEach(([k, v])=>{\n                    obj.perTenantAcls[k] = ServerACLs.toJSON(v);\n                });\n            }\n        }\n        if (message.globalAcls !== undefined) {\n            obj.globalAcls = ServerACLs.toJSON(message.globalAcls);\n        }\n        if (message.overwrite === true) {\n            obj.overwrite = message.overwrite;\n        }\n        return obj;\n    },\n    create (base) {\n        return PutPrincipalRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutPrincipalRequest();\n        message.id = object.id ?? \"\";\n        message.perTenantAcls = Object.entries(object.perTenantAcls ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = ServerACLs.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.globalAcls = object.globalAcls !== undefined && object.globalAcls !== null ? ServerACLs.fromPartial(object.globalAcls) : undefined;\n        message.overwrite = object.overwrite ?? false;\n        return message;\n    }\n};\nfunction createBasePutPrincipalRequest_PerTenantAclsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst PutPrincipalRequest_PerTenantAclsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            ServerACLs.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutPrincipalRequest_PerTenantAclsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = ServerACLs.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? ServerACLs.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = ServerACLs.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return PutPrincipalRequest_PerTenantAclsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutPrincipalRequest_PerTenantAclsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? ServerACLs.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseDeletePrincipalRequest() {\n    return {\n        id: \"\"\n    };\n}\nconst DeletePrincipalRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeletePrincipalRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? globalThis.String(object.id) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== \"\") {\n            obj.id = message.id;\n        }\n        return obj;\n    },\n    create (base) {\n        return DeletePrincipalRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDeletePrincipalRequest();\n        message.id = object.id ?? \"\";\n        return message;\n    }\n};\nfunction createBasePutTenantRequest() {\n    return {\n        id: \"\"\n    };\n}\nconst PutTenantRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutTenantRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? globalThis.String(object.id) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== \"\") {\n            obj.id = message.id;\n        }\n        return obj;\n    },\n    create (base) {\n        return PutTenantRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutTenantRequest();\n        message.id = object.id ?? \"\";\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/acls.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/common_enums.ts":
/*!************************************************!*\
  !*** ./littlehorse-public-api/common_enums.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LHErrorType: () => (/* binding */ LHErrorType),\n/* harmony export */   LHStatus: () => (/* binding */ LHStatus),\n/* harmony export */   MetadataStatus: () => (/* binding */ MetadataStatus),\n/* harmony export */   MetricsWindowLength: () => (/* binding */ MetricsWindowLength),\n/* harmony export */   TaskStatus: () => (/* binding */ TaskStatus),\n/* harmony export */   VariableType: () => (/* binding */ VariableType),\n/* harmony export */   lHErrorTypeFromJSON: () => (/* binding */ lHErrorTypeFromJSON),\n/* harmony export */   lHErrorTypeToJSON: () => (/* binding */ lHErrorTypeToJSON),\n/* harmony export */   lHErrorTypeToNumber: () => (/* binding */ lHErrorTypeToNumber),\n/* harmony export */   lHStatusFromJSON: () => (/* binding */ lHStatusFromJSON),\n/* harmony export */   lHStatusToJSON: () => (/* binding */ lHStatusToJSON),\n/* harmony export */   lHStatusToNumber: () => (/* binding */ lHStatusToNumber),\n/* harmony export */   metadataStatusFromJSON: () => (/* binding */ metadataStatusFromJSON),\n/* harmony export */   metadataStatusToJSON: () => (/* binding */ metadataStatusToJSON),\n/* harmony export */   metadataStatusToNumber: () => (/* binding */ metadataStatusToNumber),\n/* harmony export */   metricsWindowLengthFromJSON: () => (/* binding */ metricsWindowLengthFromJSON),\n/* harmony export */   metricsWindowLengthToJSON: () => (/* binding */ metricsWindowLengthToJSON),\n/* harmony export */   metricsWindowLengthToNumber: () => (/* binding */ metricsWindowLengthToNumber),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   taskStatusFromJSON: () => (/* binding */ taskStatusFromJSON),\n/* harmony export */   taskStatusToJSON: () => (/* binding */ taskStatusToJSON),\n/* harmony export */   taskStatusToNumber: () => (/* binding */ taskStatusToNumber),\n/* harmony export */   variableTypeFromJSON: () => (/* binding */ variableTypeFromJSON),\n/* harmony export */   variableTypeToJSON: () => (/* binding */ variableTypeToJSON),\n/* harmony export */   variableTypeToNumber: () => (/* binding */ variableTypeToNumber)\n/* harmony export */ });\n/* eslint-disable */ const protobufPackage = \"littlehorse\";\nvar LHStatus;\n(function(LHStatus) {\n    LHStatus[\"STARTING\"] = \"STARTING\";\n    LHStatus[\"RUNNING\"] = \"RUNNING\";\n    LHStatus[\"COMPLETED\"] = \"COMPLETED\";\n    LHStatus[\"HALTING\"] = \"HALTING\";\n    LHStatus[\"HALTED\"] = \"HALTED\";\n    LHStatus[\"ERROR\"] = \"ERROR\";\n    LHStatus[\"EXCEPTION\"] = \"EXCEPTION\";\n    LHStatus[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(LHStatus || (LHStatus = {}));\nfunction lHStatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"STARTING\":\n            return \"STARTING\";\n        case 1:\n        case \"RUNNING\":\n            return \"RUNNING\";\n        case 2:\n        case \"COMPLETED\":\n            return \"COMPLETED\";\n        case 3:\n        case \"HALTING\":\n            return \"HALTING\";\n        case 4:\n        case \"HALTED\":\n            return \"HALTED\";\n        case 5:\n        case \"ERROR\":\n            return \"ERROR\";\n        case 6:\n        case \"EXCEPTION\":\n            return \"EXCEPTION\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction lHStatusToJSON(object) {\n    switch(object){\n        case \"STARTING\":\n            return \"STARTING\";\n        case \"RUNNING\":\n            return \"RUNNING\";\n        case \"COMPLETED\":\n            return \"COMPLETED\";\n        case \"HALTING\":\n            return \"HALTING\";\n        case \"HALTED\":\n            return \"HALTED\";\n        case \"ERROR\":\n            return \"ERROR\";\n        case \"EXCEPTION\":\n            return \"EXCEPTION\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction lHStatusToNumber(object) {\n    switch(object){\n        case \"STARTING\":\n            return 0;\n        case \"RUNNING\":\n            return 1;\n        case \"COMPLETED\":\n            return 2;\n        case \"HALTING\":\n            return 3;\n        case \"HALTED\":\n            return 4;\n        case \"ERROR\":\n            return 5;\n        case \"EXCEPTION\":\n            return 6;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar MetadataStatus;\n(function(MetadataStatus) {\n    /** ACTIVE - ACTIVE means the object can be used. */ MetadataStatus[\"ACTIVE\"] = \"ACTIVE\";\n    /**\n   * ARCHIVED - An ARCHIVED WfSpec can no longer be used to create new WfRun's, but\n   * existing WfRun's will be allowed to run to completion.\n   */ MetadataStatus[\"ARCHIVED\"] = \"ARCHIVED\";\n    /**\n   * TERMINATING - A TERMINATING WfSpec is actively deleting all running WfRun's, and will\n   * self-destruct once all of its child WfRun's are terminated.\n   */ MetadataStatus[\"TERMINATING\"] = \"TERMINATING\";\n    MetadataStatus[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(MetadataStatus || (MetadataStatus = {}));\nfunction metadataStatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ACTIVE\":\n            return \"ACTIVE\";\n        case 1:\n        case \"ARCHIVED\":\n            return \"ARCHIVED\";\n        case 2:\n        case \"TERMINATING\":\n            return \"TERMINATING\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction metadataStatusToJSON(object) {\n    switch(object){\n        case \"ACTIVE\":\n            return \"ACTIVE\";\n        case \"ARCHIVED\":\n            return \"ARCHIVED\";\n        case \"TERMINATING\":\n            return \"TERMINATING\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction metadataStatusToNumber(object) {\n    switch(object){\n        case \"ACTIVE\":\n            return 0;\n        case \"ARCHIVED\":\n            return 1;\n        case \"TERMINATING\":\n            return 2;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar TaskStatus;\n(function(TaskStatus) {\n    /** TASK_SCHEDULED - Scheduled in the Task Queue but not yet picked up by a Task Worker. */ TaskStatus[\"TASK_SCHEDULED\"] = \"TASK_SCHEDULED\";\n    /** TASK_RUNNING - Picked up by a Task Worker, but not yet reported or timed out. */ TaskStatus[\"TASK_RUNNING\"] = \"TASK_RUNNING\";\n    /** TASK_SUCCESS - Successfully completed. */ TaskStatus[\"TASK_SUCCESS\"] = \"TASK_SUCCESS\";\n    /** TASK_FAILED - Task Worker reported a technical failure while attempting to execute the TaskRun */ TaskStatus[\"TASK_FAILED\"] = \"TASK_FAILED\";\n    /** TASK_TIMEOUT - Task Worker did not report a result in time. */ TaskStatus[\"TASK_TIMEOUT\"] = \"TASK_TIMEOUT\";\n    /** TASK_OUTPUT_SERIALIZING_ERROR - Task Worker reported that it was unable to serialize the output of the TaskRun. */ TaskStatus[\"TASK_OUTPUT_SERIALIZING_ERROR\"] = \"TASK_OUTPUT_SERIALIZING_ERROR\";\n    /**\n   * TASK_INPUT_VAR_SUB_ERROR - Task Worker was unable to deserialize the input variables into appropriate language-specific\n   * objects to pass into the Task Function\n   */ TaskStatus[\"TASK_INPUT_VAR_SUB_ERROR\"] = \"TASK_INPUT_VAR_SUB_ERROR\";\n    /** TASK_EXCEPTION - Task Function business logic determined that there was a business exception. */ TaskStatus[\"TASK_EXCEPTION\"] = \"TASK_EXCEPTION\";\n    TaskStatus[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(TaskStatus || (TaskStatus = {}));\nfunction taskStatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"TASK_SCHEDULED\":\n            return \"TASK_SCHEDULED\";\n        case 1:\n        case \"TASK_RUNNING\":\n            return \"TASK_RUNNING\";\n        case 2:\n        case \"TASK_SUCCESS\":\n            return \"TASK_SUCCESS\";\n        case 3:\n        case \"TASK_FAILED\":\n            return \"TASK_FAILED\";\n        case 4:\n        case \"TASK_TIMEOUT\":\n            return \"TASK_TIMEOUT\";\n        case 5:\n        case \"TASK_OUTPUT_SERIALIZING_ERROR\":\n            return \"TASK_OUTPUT_SERIALIZING_ERROR\";\n        case 6:\n        case \"TASK_INPUT_VAR_SUB_ERROR\":\n            return \"TASK_INPUT_VAR_SUB_ERROR\";\n        case 8:\n        case \"TASK_EXCEPTION\":\n            return \"TASK_EXCEPTION\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction taskStatusToJSON(object) {\n    switch(object){\n        case \"TASK_SCHEDULED\":\n            return \"TASK_SCHEDULED\";\n        case \"TASK_RUNNING\":\n            return \"TASK_RUNNING\";\n        case \"TASK_SUCCESS\":\n            return \"TASK_SUCCESS\";\n        case \"TASK_FAILED\":\n            return \"TASK_FAILED\";\n        case \"TASK_TIMEOUT\":\n            return \"TASK_TIMEOUT\";\n        case \"TASK_OUTPUT_SERIALIZING_ERROR\":\n            return \"TASK_OUTPUT_SERIALIZING_ERROR\";\n        case \"TASK_INPUT_VAR_SUB_ERROR\":\n            return \"TASK_INPUT_VAR_SUB_ERROR\";\n        case \"TASK_EXCEPTION\":\n            return \"TASK_EXCEPTION\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction taskStatusToNumber(object) {\n    switch(object){\n        case \"TASK_SCHEDULED\":\n            return 0;\n        case \"TASK_RUNNING\":\n            return 1;\n        case \"TASK_SUCCESS\":\n            return 2;\n        case \"TASK_FAILED\":\n            return 3;\n        case \"TASK_TIMEOUT\":\n            return 4;\n        case \"TASK_OUTPUT_SERIALIZING_ERROR\":\n            return 5;\n        case \"TASK_INPUT_VAR_SUB_ERROR\":\n            return 6;\n        case \"TASK_EXCEPTION\":\n            return 8;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar MetricsWindowLength;\n(function(MetricsWindowLength) {\n    MetricsWindowLength[\"MINUTES_5\"] = \"MINUTES_5\";\n    MetricsWindowLength[\"HOURS_2\"] = \"HOURS_2\";\n    MetricsWindowLength[\"DAYS_1\"] = \"DAYS_1\";\n    MetricsWindowLength[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(MetricsWindowLength || (MetricsWindowLength = {}));\nfunction metricsWindowLengthFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"MINUTES_5\":\n            return \"MINUTES_5\";\n        case 1:\n        case \"HOURS_2\":\n            return \"HOURS_2\";\n        case 2:\n        case \"DAYS_1\":\n            return \"DAYS_1\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction metricsWindowLengthToJSON(object) {\n    switch(object){\n        case \"MINUTES_5\":\n            return \"MINUTES_5\";\n        case \"HOURS_2\":\n            return \"HOURS_2\";\n        case \"DAYS_1\":\n            return \"DAYS_1\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction metricsWindowLengthToNumber(object) {\n    switch(object){\n        case \"MINUTES_5\":\n            return 0;\n        case \"HOURS_2\":\n            return 1;\n        case \"DAYS_1\":\n            return 2;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar VariableType;\n(function(VariableType) {\n    /** JSON_OBJ - An object represented as a json string. */ VariableType[\"JSON_OBJ\"] = \"JSON_OBJ\";\n    /** JSON_ARR - A list represented as a json array string. */ VariableType[\"JSON_ARR\"] = \"JSON_ARR\";\n    /** DOUBLE - A 64-bit floating point number. */ VariableType[\"DOUBLE\"] = \"DOUBLE\";\n    /** BOOL - A boolean */ VariableType[\"BOOL\"] = \"BOOL\";\n    /** STR - A string */ VariableType[\"STR\"] = \"STR\";\n    /** INT - A 64-bit integer */ VariableType[\"INT\"] = \"INT\";\n    /** BYTES - A byte array */ VariableType[\"BYTES\"] = \"BYTES\";\n    VariableType[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(VariableType || (VariableType = {}));\nfunction variableTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"JSON_OBJ\":\n            return \"JSON_OBJ\";\n        case 1:\n        case \"JSON_ARR\":\n            return \"JSON_ARR\";\n        case 2:\n        case \"DOUBLE\":\n            return \"DOUBLE\";\n        case 3:\n        case \"BOOL\":\n            return \"BOOL\";\n        case 4:\n        case \"STR\":\n            return \"STR\";\n        case 5:\n        case \"INT\":\n            return \"INT\";\n        case 6:\n        case \"BYTES\":\n            return \"BYTES\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction variableTypeToJSON(object) {\n    switch(object){\n        case \"JSON_OBJ\":\n            return \"JSON_OBJ\";\n        case \"JSON_ARR\":\n            return \"JSON_ARR\";\n        case \"DOUBLE\":\n            return \"DOUBLE\";\n        case \"BOOL\":\n            return \"BOOL\";\n        case \"STR\":\n            return \"STR\";\n        case \"INT\":\n            return \"INT\";\n        case \"BYTES\":\n            return \"BYTES\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction variableTypeToNumber(object) {\n    switch(object){\n        case \"JSON_OBJ\":\n            return 0;\n        case \"JSON_ARR\":\n            return 1;\n        case \"DOUBLE\":\n            return 2;\n        case \"BOOL\":\n            return 3;\n        case \"STR\":\n            return 4;\n        case \"INT\":\n            return 5;\n        case \"BYTES\":\n            return 6;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar LHErrorType;\n(function(LHErrorType) {\n    /** CHILD_FAILURE - A child ThreadRun failed with a technical ERROR. */ LHErrorType[\"CHILD_FAILURE\"] = \"CHILD_FAILURE\";\n    /** VAR_SUB_ERROR - Failed substituting input variables into a NodeRun. */ LHErrorType[\"VAR_SUB_ERROR\"] = \"VAR_SUB_ERROR\";\n    /** VAR_MUTATION_ERROR - Failed mutating variables after a NodeRun successfully completed. */ LHErrorType[\"VAR_MUTATION_ERROR\"] = \"VAR_MUTATION_ERROR\";\n    /** USER_TASK_CANCELLED - A UserTaskRun was cancelled (EVOLVING: this will become a Business EXCEPTION) */ LHErrorType[\"USER_TASK_CANCELLED\"] = \"USER_TASK_CANCELLED\";\n    /** TIMEOUT - A NodeRun failed due to a timeout. */ LHErrorType[\"TIMEOUT\"] = \"TIMEOUT\";\n    /** TASK_FAILURE - A TaskRun failed due to an unexpected error. */ LHErrorType[\"TASK_FAILURE\"] = \"TASK_FAILURE\";\n    /** VAR_ERROR - Wrapper for VAR_SUB_ERROR and VAR_MUTATION_ERROR */ LHErrorType[\"VAR_ERROR\"] = \"VAR_ERROR\";\n    /** TASK_ERROR - Wrapper for TASK_FALIURE and TIMEOUT */ LHErrorType[\"TASK_ERROR\"] = \"TASK_ERROR\";\n    /** INTERNAL_ERROR - An unexpected LittleHorse Internal error occurred. This is not expected to happen. */ LHErrorType[\"INTERNAL_ERROR\"] = \"INTERNAL_ERROR\";\n    LHErrorType[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(LHErrorType || (LHErrorType = {}));\nfunction lHErrorTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"CHILD_FAILURE\":\n            return \"CHILD_FAILURE\";\n        case 1:\n        case \"VAR_SUB_ERROR\":\n            return \"VAR_SUB_ERROR\";\n        case 2:\n        case \"VAR_MUTATION_ERROR\":\n            return \"VAR_MUTATION_ERROR\";\n        case 3:\n        case \"USER_TASK_CANCELLED\":\n            return \"USER_TASK_CANCELLED\";\n        case 4:\n        case \"TIMEOUT\":\n            return \"TIMEOUT\";\n        case 5:\n        case \"TASK_FAILURE\":\n            return \"TASK_FAILURE\";\n        case 6:\n        case \"VAR_ERROR\":\n            return \"VAR_ERROR\";\n        case 7:\n        case \"TASK_ERROR\":\n            return \"TASK_ERROR\";\n        case 8:\n        case \"INTERNAL_ERROR\":\n            return \"INTERNAL_ERROR\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction lHErrorTypeToJSON(object) {\n    switch(object){\n        case \"CHILD_FAILURE\":\n            return \"CHILD_FAILURE\";\n        case \"VAR_SUB_ERROR\":\n            return \"VAR_SUB_ERROR\";\n        case \"VAR_MUTATION_ERROR\":\n            return \"VAR_MUTATION_ERROR\";\n        case \"USER_TASK_CANCELLED\":\n            return \"USER_TASK_CANCELLED\";\n        case \"TIMEOUT\":\n            return \"TIMEOUT\";\n        case \"TASK_FAILURE\":\n            return \"TASK_FAILURE\";\n        case \"VAR_ERROR\":\n            return \"VAR_ERROR\";\n        case \"TASK_ERROR\":\n            return \"TASK_ERROR\";\n        case \"INTERNAL_ERROR\":\n            return \"INTERNAL_ERROR\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction lHErrorTypeToNumber(object) {\n    switch(object){\n        case \"CHILD_FAILURE\":\n            return 0;\n        case \"VAR_SUB_ERROR\":\n            return 1;\n        case \"VAR_MUTATION_ERROR\":\n            return 2;\n        case \"USER_TASK_CANCELLED\":\n            return 3;\n        case \"TIMEOUT\":\n            return 4;\n        case \"TASK_FAILURE\":\n            return 5;\n        case \"VAR_ERROR\":\n            return 6;\n        case \"TASK_ERROR\":\n            return 7;\n        case \"INTERNAL_ERROR\":\n            return 8;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/common_enums.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/common_wfspec.ts":
/*!*************************************************!*\
  !*** ./littlehorse-public-api/common_wfspec.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Comparator: () => (/* binding */ Comparator),\n/* harmony export */   TaskNode: () => (/* binding */ TaskNode),\n/* harmony export */   UTActionTrigger: () => (/* binding */ UTActionTrigger),\n/* harmony export */   UTActionTrigger_UTACancel: () => (/* binding */ UTActionTrigger_UTACancel),\n/* harmony export */   UTActionTrigger_UTAReassign: () => (/* binding */ UTActionTrigger_UTAReassign),\n/* harmony export */   UTActionTrigger_UTATask: () => (/* binding */ UTActionTrigger_UTATask),\n/* harmony export */   UTActionTrigger_UTHook: () => (/* binding */ UTActionTrigger_UTHook),\n/* harmony export */   VariableAssignment: () => (/* binding */ VariableAssignment),\n/* harmony export */   VariableAssignment_FormatString: () => (/* binding */ VariableAssignment_FormatString),\n/* harmony export */   VariableDef: () => (/* binding */ VariableDef),\n/* harmony export */   VariableMutation: () => (/* binding */ VariableMutation),\n/* harmony export */   VariableMutationType: () => (/* binding */ VariableMutationType),\n/* harmony export */   VariableMutation_NodeOutputSource: () => (/* binding */ VariableMutation_NodeOutputSource),\n/* harmony export */   comparatorFromJSON: () => (/* binding */ comparatorFromJSON),\n/* harmony export */   comparatorToJSON: () => (/* binding */ comparatorToJSON),\n/* harmony export */   comparatorToNumber: () => (/* binding */ comparatorToNumber),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   uTActionTrigger_UTHookFromJSON: () => (/* binding */ uTActionTrigger_UTHookFromJSON),\n/* harmony export */   uTActionTrigger_UTHookToJSON: () => (/* binding */ uTActionTrigger_UTHookToJSON),\n/* harmony export */   uTActionTrigger_UTHookToNumber: () => (/* binding */ uTActionTrigger_UTHookToNumber),\n/* harmony export */   variableMutationTypeFromJSON: () => (/* binding */ variableMutationTypeFromJSON),\n/* harmony export */   variableMutationTypeToJSON: () => (/* binding */ variableMutationTypeToJSON),\n/* harmony export */   variableMutationTypeToNumber: () => (/* binding */ variableMutationTypeToNumber)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./variable */ \"(api)/./littlehorse-public-api/variable.ts\");\n/* eslint-disable */ \n\n\n\nconst protobufPackage = \"littlehorse\";\nvar VariableMutationType;\n(function(VariableMutationType) {\n    /** ASSIGN - Set the variable specified by the LHS to the value of the RHS. */ VariableMutationType[\"ASSIGN\"] = \"ASSIGN\";\n    /** ADD - Add the RHS to the LHS. */ VariableMutationType[\"ADD\"] = \"ADD\";\n    /** EXTEND - Append the RHS to the LHS (valid if the LHS is a STR or JSON_ARR) */ VariableMutationType[\"EXTEND\"] = \"EXTEND\";\n    /** SUBTRACT - Subtract the RHS from the LHS (both must be INT or DOUBLE) */ VariableMutationType[\"SUBTRACT\"] = \"SUBTRACT\";\n    /** MULTIPLY - Multiply the LHS by the RHS (both must be INT or DOUBLE) */ VariableMutationType[\"MULTIPLY\"] = \"MULTIPLY\";\n    /** DIVIDE - Divide the LHS by the RHS (both must be INT or DOUBLE) */ VariableMutationType[\"DIVIDE\"] = \"DIVIDE\";\n    /** REMOVE_IF_PRESENT - Remove any occurrences of RHS from LHS (LHS must be JSON_ARR) */ VariableMutationType[\"REMOVE_IF_PRESENT\"] = \"REMOVE_IF_PRESENT\";\n    /** REMOVE_INDEX - Remove item at index RHS from LHS (LHS must be JSON_ARR) */ VariableMutationType[\"REMOVE_INDEX\"] = \"REMOVE_INDEX\";\n    /** REMOVE_KEY - Remove the key specified by RHS from the LHS (LHS must be JSON_OBJ) */ VariableMutationType[\"REMOVE_KEY\"] = \"REMOVE_KEY\";\n    VariableMutationType[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(VariableMutationType || (VariableMutationType = {}));\nfunction variableMutationTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ASSIGN\":\n            return \"ASSIGN\";\n        case 1:\n        case \"ADD\":\n            return \"ADD\";\n        case 2:\n        case \"EXTEND\":\n            return \"EXTEND\";\n        case 3:\n        case \"SUBTRACT\":\n            return \"SUBTRACT\";\n        case 4:\n        case \"MULTIPLY\":\n            return \"MULTIPLY\";\n        case 5:\n        case \"DIVIDE\":\n            return \"DIVIDE\";\n        case 6:\n        case \"REMOVE_IF_PRESENT\":\n            return \"REMOVE_IF_PRESENT\";\n        case 7:\n        case \"REMOVE_INDEX\":\n            return \"REMOVE_INDEX\";\n        case 8:\n        case \"REMOVE_KEY\":\n            return \"REMOVE_KEY\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction variableMutationTypeToJSON(object) {\n    switch(object){\n        case \"ASSIGN\":\n            return \"ASSIGN\";\n        case \"ADD\":\n            return \"ADD\";\n        case \"EXTEND\":\n            return \"EXTEND\";\n        case \"SUBTRACT\":\n            return \"SUBTRACT\";\n        case \"MULTIPLY\":\n            return \"MULTIPLY\";\n        case \"DIVIDE\":\n            return \"DIVIDE\";\n        case \"REMOVE_IF_PRESENT\":\n            return \"REMOVE_IF_PRESENT\";\n        case \"REMOVE_INDEX\":\n            return \"REMOVE_INDEX\";\n        case \"REMOVE_KEY\":\n            return \"REMOVE_KEY\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction variableMutationTypeToNumber(object) {\n    switch(object){\n        case \"ASSIGN\":\n            return 0;\n        case \"ADD\":\n            return 1;\n        case \"EXTEND\":\n            return 2;\n        case \"SUBTRACT\":\n            return 3;\n        case \"MULTIPLY\":\n            return 4;\n        case \"DIVIDE\":\n            return 5;\n        case \"REMOVE_IF_PRESENT\":\n            return 6;\n        case \"REMOVE_INDEX\":\n            return 7;\n        case \"REMOVE_KEY\":\n            return 8;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar Comparator;\n(function(Comparator) {\n    /** LESS_THAN - Equivalent to `<`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */ Comparator[\"LESS_THAN\"] = \"LESS_THAN\";\n    /** GREATER_THAN - Equivalent to `>`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */ Comparator[\"GREATER_THAN\"] = \"GREATER_THAN\";\n    /** LESS_THAN_EQ - Equivalent to `<=`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */ Comparator[\"LESS_THAN_EQ\"] = \"LESS_THAN_EQ\";\n    /** GREATER_THAN_EQ - Equivalent to `>=`. Only valid for primitive types (no JSON_OBJ or JSON_ARR). */ Comparator[\"GREATER_THAN_EQ\"] = \"GREATER_THAN_EQ\";\n    /**\n   * EQUALS - This is valid for any variable type, and is similar to .equals() in Java.\n   *\n   * One note: if the RHS is a different type from the LHS, then LittleHorse will\n   * try to cast the RHS to the same type as the LHS. If the cast fails, then the\n   * ThreadRun fails with a VAR_SUB_ERROR.\n   */ Comparator[\"EQUALS\"] = \"EQUALS\";\n    /** NOT_EQUALS - This is the inverse of `EQUALS` */ Comparator[\"NOT_EQUALS\"] = \"NOT_EQUALS\";\n    /**\n   * IN - Only valid if the RHS is a JSON_OBJ or JSON_ARR. Valid for any type on the LHS.\n   *\n   * For the JSON_OBJ type, this returns true if the LHS is equal to a *KEY* in the\n   * RHS. For the JSON_ARR type, it returns true if one of the elements of the RHS\n   * is equal to the LHS.\n   */ Comparator[\"IN\"] = \"IN\";\n    /** NOT_IN - The inverse of IN. */ Comparator[\"NOT_IN\"] = \"NOT_IN\";\n    Comparator[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(Comparator || (Comparator = {}));\nfunction comparatorFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"LESS_THAN\":\n            return \"LESS_THAN\";\n        case 1:\n        case \"GREATER_THAN\":\n            return \"GREATER_THAN\";\n        case 2:\n        case \"LESS_THAN_EQ\":\n            return \"LESS_THAN_EQ\";\n        case 3:\n        case \"GREATER_THAN_EQ\":\n            return \"GREATER_THAN_EQ\";\n        case 4:\n        case \"EQUALS\":\n            return \"EQUALS\";\n        case 5:\n        case \"NOT_EQUALS\":\n            return \"NOT_EQUALS\";\n        case 6:\n        case \"IN\":\n            return \"IN\";\n        case 7:\n        case \"NOT_IN\":\n            return \"NOT_IN\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction comparatorToJSON(object) {\n    switch(object){\n        case \"LESS_THAN\":\n            return \"LESS_THAN\";\n        case \"GREATER_THAN\":\n            return \"GREATER_THAN\";\n        case \"LESS_THAN_EQ\":\n            return \"LESS_THAN_EQ\";\n        case \"GREATER_THAN_EQ\":\n            return \"GREATER_THAN_EQ\";\n        case \"EQUALS\":\n            return \"EQUALS\";\n        case \"NOT_EQUALS\":\n            return \"NOT_EQUALS\";\n        case \"IN\":\n            return \"IN\";\n        case \"NOT_IN\":\n            return \"NOT_IN\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction comparatorToNumber(object) {\n    switch(object){\n        case \"LESS_THAN\":\n            return 0;\n        case \"GREATER_THAN\":\n            return 1;\n        case \"LESS_THAN_EQ\":\n            return 2;\n        case \"GREATER_THAN_EQ\":\n            return 3;\n        case \"EQUALS\":\n            return 4;\n        case \"NOT_EQUALS\":\n            return 5;\n        case \"IN\":\n            return 6;\n        case \"NOT_IN\":\n            return 7;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar UTActionTrigger_UTHook;\n(function(UTActionTrigger_UTHook) {\n    /**\n   * ON_ARRIVAL - The hook should be scheduled `delay_seconds` after the UserTaskRun is created. This\n   * hook only causes the action to be scheduled once.\n   */ UTActionTrigger_UTHook[\"ON_ARRIVAL\"] = \"ON_ARRIVAL\";\n    /**\n   * ON_TASK_ASSIGNED - The hook should be scheduled `delay_seconds` after the ownership of the UserTaskRun\n   * changes. This hook causes the Action to be scheduled one or more times. The first\n   * time is scheduled when the UserTaskRun is created, since we treat the change from\n   * \"UserTaskRun is nonexistent\" to \"UserTaskRun is owned by a userId or userGroup\" as\n   * a change in ownership.\n   */ UTActionTrigger_UTHook[\"ON_TASK_ASSIGNED\"] = \"ON_TASK_ASSIGNED\";\n    UTActionTrigger_UTHook[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(UTActionTrigger_UTHook || (UTActionTrigger_UTHook = {}));\nfunction uTActionTrigger_UTHookFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ON_ARRIVAL\":\n            return \"ON_ARRIVAL\";\n        case 1:\n        case \"ON_TASK_ASSIGNED\":\n            return \"ON_TASK_ASSIGNED\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction uTActionTrigger_UTHookToJSON(object) {\n    switch(object){\n        case \"ON_ARRIVAL\":\n            return \"ON_ARRIVAL\";\n        case \"ON_TASK_ASSIGNED\":\n            return \"ON_TASK_ASSIGNED\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction uTActionTrigger_UTHookToNumber(object) {\n    switch(object){\n        case \"ON_ARRIVAL\":\n            return 0;\n        case \"ON_TASK_ASSIGNED\":\n            return 1;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nfunction createBaseVariableAssignment() {\n    return {\n        jsonPath: undefined,\n        variableName: undefined,\n        literalValue: undefined,\n        formatString: undefined\n    };\n}\nconst VariableAssignment = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.jsonPath !== undefined) {\n            writer.uint32(10).string(message.jsonPath);\n        }\n        if (message.variableName !== undefined) {\n            writer.uint32(18).string(message.variableName);\n        }\n        if (message.literalValue !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.encode(message.literalValue, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.formatString !== undefined) {\n            VariableAssignment_FormatString.encode(message.formatString, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableAssignment();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.jsonPath = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.variableName = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.literalValue = _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.formatString = VariableAssignment_FormatString.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            jsonPath: isSet(object.jsonPath) ? globalThis.String(object.jsonPath) : undefined,\n            variableName: isSet(object.variableName) ? globalThis.String(object.variableName) : undefined,\n            literalValue: isSet(object.literalValue) ? _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.fromJSON(object.literalValue) : undefined,\n            formatString: isSet(object.formatString) ? VariableAssignment_FormatString.fromJSON(object.formatString) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.jsonPath !== undefined) {\n            obj.jsonPath = message.jsonPath;\n        }\n        if (message.variableName !== undefined) {\n            obj.variableName = message.variableName;\n        }\n        if (message.literalValue !== undefined) {\n            obj.literalValue = _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.toJSON(message.literalValue);\n        }\n        if (message.formatString !== undefined) {\n            obj.formatString = VariableAssignment_FormatString.toJSON(message.formatString);\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableAssignment.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableAssignment();\n        message.jsonPath = object.jsonPath ?? undefined;\n        message.variableName = object.variableName ?? undefined;\n        message.literalValue = object.literalValue !== undefined && object.literalValue !== null ? _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.fromPartial(object.literalValue) : undefined;\n        message.formatString = object.formatString !== undefined && object.formatString !== null ? VariableAssignment_FormatString.fromPartial(object.formatString) : undefined;\n        return message;\n    }\n};\nfunction createBaseVariableAssignment_FormatString() {\n    return {\n        format: undefined,\n        args: []\n    };\n}\nconst VariableAssignment_FormatString = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.format !== undefined) {\n            VariableAssignment.encode(message.format, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.args){\n            VariableAssignment.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableAssignment_FormatString();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.format = VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.args.push(VariableAssignment.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            format: isSet(object.format) ? VariableAssignment.fromJSON(object.format) : undefined,\n            args: globalThis.Array.isArray(object?.args) ? object.args.map((e)=>VariableAssignment.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.format !== undefined) {\n            obj.format = VariableAssignment.toJSON(message.format);\n        }\n        if (message.args?.length) {\n            obj.args = message.args.map((e)=>VariableAssignment.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableAssignment_FormatString.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableAssignment_FormatString();\n        message.format = object.format !== undefined && object.format !== null ? VariableAssignment.fromPartial(object.format) : undefined;\n        message.args = object.args?.map((e)=>VariableAssignment.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseVariableMutation() {\n    return {\n        lhsName: \"\",\n        lhsJsonPath: undefined,\n        operation: \"ASSIGN\",\n        sourceVariable: undefined,\n        literalValue: undefined,\n        nodeOutput: undefined\n    };\n}\nconst VariableMutation = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.lhsName !== \"\") {\n            writer.uint32(10).string(message.lhsName);\n        }\n        if (message.lhsJsonPath !== undefined) {\n            writer.uint32(18).string(message.lhsJsonPath);\n        }\n        if (message.operation !== \"ASSIGN\") {\n            writer.uint32(24).int32(variableMutationTypeToNumber(message.operation));\n        }\n        if (message.sourceVariable !== undefined) {\n            VariableAssignment.encode(message.sourceVariable, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.literalValue !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.encode(message.literalValue, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.nodeOutput !== undefined) {\n            VariableMutation_NodeOutputSource.encode(message.nodeOutput, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableMutation();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.lhsName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.lhsJsonPath = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.operation = variableMutationTypeFromJSON(reader.int32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.sourceVariable = VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.literalValue = _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.nodeOutput = VariableMutation_NodeOutputSource.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            lhsName: isSet(object.lhsName) ? globalThis.String(object.lhsName) : \"\",\n            lhsJsonPath: isSet(object.lhsJsonPath) ? globalThis.String(object.lhsJsonPath) : undefined,\n            operation: isSet(object.operation) ? variableMutationTypeFromJSON(object.operation) : \"ASSIGN\",\n            sourceVariable: isSet(object.sourceVariable) ? VariableAssignment.fromJSON(object.sourceVariable) : undefined,\n            literalValue: isSet(object.literalValue) ? _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.fromJSON(object.literalValue) : undefined,\n            nodeOutput: isSet(object.nodeOutput) ? VariableMutation_NodeOutputSource.fromJSON(object.nodeOutput) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.lhsName !== \"\") {\n            obj.lhsName = message.lhsName;\n        }\n        if (message.lhsJsonPath !== undefined) {\n            obj.lhsJsonPath = message.lhsJsonPath;\n        }\n        if (message.operation !== \"ASSIGN\") {\n            obj.operation = variableMutationTypeToJSON(message.operation);\n        }\n        if (message.sourceVariable !== undefined) {\n            obj.sourceVariable = VariableAssignment.toJSON(message.sourceVariable);\n        }\n        if (message.literalValue !== undefined) {\n            obj.literalValue = _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.toJSON(message.literalValue);\n        }\n        if (message.nodeOutput !== undefined) {\n            obj.nodeOutput = VariableMutation_NodeOutputSource.toJSON(message.nodeOutput);\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableMutation.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableMutation();\n        message.lhsName = object.lhsName ?? \"\";\n        message.lhsJsonPath = object.lhsJsonPath ?? undefined;\n        message.operation = object.operation ?? \"ASSIGN\";\n        message.sourceVariable = object.sourceVariable !== undefined && object.sourceVariable !== null ? VariableAssignment.fromPartial(object.sourceVariable) : undefined;\n        message.literalValue = object.literalValue !== undefined && object.literalValue !== null ? _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.fromPartial(object.literalValue) : undefined;\n        message.nodeOutput = object.nodeOutput !== undefined && object.nodeOutput !== null ? VariableMutation_NodeOutputSource.fromPartial(object.nodeOutput) : undefined;\n        return message;\n    }\n};\nfunction createBaseVariableMutation_NodeOutputSource() {\n    return {\n        jsonpath: undefined\n    };\n}\nconst VariableMutation_NodeOutputSource = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.jsonpath !== undefined) {\n            writer.uint32(82).string(message.jsonpath);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableMutation_NodeOutputSource();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 10:\n                    if (tag !== 82) {\n                        break;\n                    }\n                    message.jsonpath = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            jsonpath: isSet(object.jsonpath) ? globalThis.String(object.jsonpath) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.jsonpath !== undefined) {\n            obj.jsonpath = message.jsonpath;\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableMutation_NodeOutputSource.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableMutation_NodeOutputSource();\n        message.jsonpath = object.jsonpath ?? undefined;\n        return message;\n    }\n};\nfunction createBaseVariableDef() {\n    return {\n        type: _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ,\n        name: \"\",\n        defaultValue: undefined\n    };\n}\nconst VariableDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ) {\n            writer.uint32(8).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeToNumber)(message.type));\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.defaultValue !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.encode(message.defaultValue, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeFromJSON)(reader.int32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.defaultValue = _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            type: isSet(object.type) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeFromJSON)(object.type) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ,\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            defaultValue: isSet(object.defaultValue) ? _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.fromJSON(object.defaultValue) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ) {\n            obj.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeToJSON)(message.type);\n        }\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.defaultValue !== undefined) {\n            obj.defaultValue = _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.toJSON(message.defaultValue);\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableDef();\n        message.type = object.type ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ;\n        message.name = object.name ?? \"\";\n        message.defaultValue = object.defaultValue !== undefined && object.defaultValue !== null ? _variable__WEBPACK_IMPORTED_MODULE_3__.VariableValue.fromPartial(object.defaultValue) : undefined;\n        return message;\n    }\n};\nfunction createBaseUTActionTrigger() {\n    return {\n        task: undefined,\n        cancel: undefined,\n        reassign: undefined,\n        delaySeconds: undefined,\n        hook: \"ON_ARRIVAL\"\n    };\n}\nconst UTActionTrigger = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.task !== undefined) {\n            UTActionTrigger_UTATask.encode(message.task, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.cancel !== undefined) {\n            UTActionTrigger_UTACancel.encode(message.cancel, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.reassign !== undefined) {\n            UTActionTrigger_UTAReassign.encode(message.reassign, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.delaySeconds !== undefined) {\n            VariableAssignment.encode(message.delaySeconds, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.hook !== \"ON_ARRIVAL\") {\n            writer.uint32(48).int32(uTActionTrigger_UTHookToNumber(message.hook));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUTActionTrigger();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.task = UTActionTrigger_UTATask.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.cancel = UTActionTrigger_UTACancel.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.reassign = UTActionTrigger_UTAReassign.decode(reader, reader.uint32());\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.delaySeconds = VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.hook = uTActionTrigger_UTHookFromJSON(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            task: isSet(object.task) ? UTActionTrigger_UTATask.fromJSON(object.task) : undefined,\n            cancel: isSet(object.cancel) ? UTActionTrigger_UTACancel.fromJSON(object.cancel) : undefined,\n            reassign: isSet(object.reassign) ? UTActionTrigger_UTAReassign.fromJSON(object.reassign) : undefined,\n            delaySeconds: isSet(object.delaySeconds) ? VariableAssignment.fromJSON(object.delaySeconds) : undefined,\n            hook: isSet(object.hook) ? uTActionTrigger_UTHookFromJSON(object.hook) : \"ON_ARRIVAL\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.task !== undefined) {\n            obj.task = UTActionTrigger_UTATask.toJSON(message.task);\n        }\n        if (message.cancel !== undefined) {\n            obj.cancel = UTActionTrigger_UTACancel.toJSON(message.cancel);\n        }\n        if (message.reassign !== undefined) {\n            obj.reassign = UTActionTrigger_UTAReassign.toJSON(message.reassign);\n        }\n        if (message.delaySeconds !== undefined) {\n            obj.delaySeconds = VariableAssignment.toJSON(message.delaySeconds);\n        }\n        if (message.hook !== \"ON_ARRIVAL\") {\n            obj.hook = uTActionTrigger_UTHookToJSON(message.hook);\n        }\n        return obj;\n    },\n    create (base) {\n        return UTActionTrigger.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUTActionTrigger();\n        message.task = object.task !== undefined && object.task !== null ? UTActionTrigger_UTATask.fromPartial(object.task) : undefined;\n        message.cancel = object.cancel !== undefined && object.cancel !== null ? UTActionTrigger_UTACancel.fromPartial(object.cancel) : undefined;\n        message.reassign = object.reassign !== undefined && object.reassign !== null ? UTActionTrigger_UTAReassign.fromPartial(object.reassign) : undefined;\n        message.delaySeconds = object.delaySeconds !== undefined && object.delaySeconds !== null ? VariableAssignment.fromPartial(object.delaySeconds) : undefined;\n        message.hook = object.hook ?? \"ON_ARRIVAL\";\n        return message;\n    }\n};\nfunction createBaseUTActionTrigger_UTACancel() {\n    return {};\n}\nconst UTActionTrigger_UTACancel = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUTActionTrigger_UTACancel();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    create (base) {\n        return UTActionTrigger_UTACancel.fromPartial(base ?? {});\n    },\n    fromPartial (_) {\n        const message = createBaseUTActionTrigger_UTACancel();\n        return message;\n    }\n};\nfunction createBaseUTActionTrigger_UTATask() {\n    return {\n        task: undefined,\n        mutations: []\n    };\n}\nconst UTActionTrigger_UTATask = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.task !== undefined) {\n            TaskNode.encode(message.task, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.mutations){\n            VariableMutation.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUTActionTrigger_UTATask();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.task = TaskNode.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.mutations.push(VariableMutation.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            task: isSet(object.task) ? TaskNode.fromJSON(object.task) : undefined,\n            mutations: globalThis.Array.isArray(object?.mutations) ? object.mutations.map((e)=>VariableMutation.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.task !== undefined) {\n            obj.task = TaskNode.toJSON(message.task);\n        }\n        if (message.mutations?.length) {\n            obj.mutations = message.mutations.map((e)=>VariableMutation.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return UTActionTrigger_UTATask.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUTActionTrigger_UTATask();\n        message.task = object.task !== undefined && object.task !== null ? TaskNode.fromPartial(object.task) : undefined;\n        message.mutations = object.mutations?.map((e)=>VariableMutation.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseUTActionTrigger_UTAReassign() {\n    return {\n        userId: undefined,\n        userGroup: undefined\n    };\n}\nconst UTActionTrigger_UTAReassign = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.userId !== undefined) {\n            VariableAssignment.encode(message.userId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.userGroup !== undefined) {\n            VariableAssignment.encode(message.userGroup, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUTActionTrigger_UTAReassign();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.userId = VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.userGroup = VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            userId: isSet(object.userId) ? VariableAssignment.fromJSON(object.userId) : undefined,\n            userGroup: isSet(object.userGroup) ? VariableAssignment.fromJSON(object.userGroup) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.userId !== undefined) {\n            obj.userId = VariableAssignment.toJSON(message.userId);\n        }\n        if (message.userGroup !== undefined) {\n            obj.userGroup = VariableAssignment.toJSON(message.userGroup);\n        }\n        return obj;\n    },\n    create (base) {\n        return UTActionTrigger_UTAReassign.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUTActionTrigger_UTAReassign();\n        message.userId = object.userId !== undefined && object.userId !== null ? VariableAssignment.fromPartial(object.userId) : undefined;\n        message.userGroup = object.userGroup !== undefined && object.userGroup !== null ? VariableAssignment.fromPartial(object.userGroup) : undefined;\n        return message;\n    }\n};\nfunction createBaseTaskNode() {\n    return {\n        taskDefId: undefined,\n        timeoutSeconds: 0,\n        retries: 0,\n        variables: []\n    };\n}\nconst TaskNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_2__.TaskDefId.encode(message.taskDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.timeoutSeconds !== 0) {\n            writer.uint32(16).int32(message.timeoutSeconds);\n        }\n        if (message.retries !== 0) {\n            writer.uint32(24).int32(message.retries);\n        }\n        for (const v of message.variables){\n            VariableAssignment.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_2__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.timeoutSeconds = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.retries = reader.int32();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.variables.push(VariableAssignment.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_2__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            timeoutSeconds: isSet(object.timeoutSeconds) ? globalThis.Number(object.timeoutSeconds) : 0,\n            retries: isSet(object.retries) ? globalThis.Number(object.retries) : 0,\n            variables: globalThis.Array.isArray(object?.variables) ? object.variables.map((e)=>VariableAssignment.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_2__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.timeoutSeconds !== 0) {\n            obj.timeoutSeconds = Math.round(message.timeoutSeconds);\n        }\n        if (message.retries !== 0) {\n            obj.retries = Math.round(message.retries);\n        }\n        if (message.variables?.length) {\n            obj.variables = message.variables.map((e)=>VariableAssignment.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskNode();\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_2__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.timeoutSeconds = object.timeoutSeconds ?? 0;\n        message.retries = object.retries ?? 0;\n        message.variables = object.variables?.map((e)=>VariableAssignment.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/common_wfspec.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/external_event.ts":
/*!**************************************************!*\
  !*** ./littlehorse-public-api/external_event.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExternalEvent: () => (/* binding */ ExternalEvent),\n/* harmony export */   ExternalEventDef: () => (/* binding */ ExternalEventDef),\n/* harmony export */   ExternalEventRetentionPolicy: () => (/* binding */ ExternalEventRetentionPolicy),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"long\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./variable */ \"(api)/./littlehorse-public-api/variable.ts\");\n/* eslint-disable */ \n\n\n\n\nconst protobufPackage = \"littlehorse\";\nfunction createBaseExternalEvent() {\n    return {\n        id: undefined,\n        createdAt: undefined,\n        content: undefined,\n        threadRunNumber: undefined,\n        nodeRunPosition: undefined,\n        claimed: false\n    };\n}\nconst ExternalEvent = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.content !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.encode(message.content, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.threadRunNumber !== undefined) {\n            writer.uint32(32).int32(message.threadRunNumber);\n        }\n        if (message.nodeRunPosition !== undefined) {\n            writer.uint32(40).int32(message.nodeRunPosition);\n        }\n        if (message.claimed === true) {\n            writer.uint32(48).bool(message.claimed);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEvent();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.content = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.nodeRunPosition = reader.int32();\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.claimed = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromJSON(object.id) : undefined,\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,\n            content: isSet(object.content) ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromJSON(object.content) : undefined,\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : undefined,\n            nodeRunPosition: isSet(object.nodeRunPosition) ? globalThis.Number(object.nodeRunPosition) : undefined,\n            claimed: isSet(object.claimed) ? globalThis.Boolean(object.claimed) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.toJSON(message.id);\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        if (message.content !== undefined) {\n            obj.content = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.toJSON(message.content);\n        }\n        if (message.threadRunNumber !== undefined) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        if (message.nodeRunPosition !== undefined) {\n            obj.nodeRunPosition = Math.round(message.nodeRunPosition);\n        }\n        if (message.claimed === true) {\n            obj.claimed = message.claimed;\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEvent.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEvent();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromPartial(object.id) : undefined;\n        message.createdAt = object.createdAt ?? undefined;\n        message.content = object.content !== undefined && object.content !== null ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromPartial(object.content) : undefined;\n        message.threadRunNumber = object.threadRunNumber ?? undefined;\n        message.nodeRunPosition = object.nodeRunPosition ?? undefined;\n        message.claimed = object.claimed ?? false;\n        return message;\n    }\n};\nfunction createBaseExternalEventDef() {\n    return {\n        name: \"\",\n        createdAt: undefined,\n        retentionPolicy: undefined\n    };\n}\nconst ExternalEventDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.retentionPolicy !== undefined) {\n            ExternalEventRetentionPolicy.encode(message.retentionPolicy, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.retentionPolicy = ExternalEventRetentionPolicy.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,\n            retentionPolicy: isSet(object.retentionPolicy) ? ExternalEventRetentionPolicy.fromJSON(object.retentionPolicy) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        if (message.retentionPolicy !== undefined) {\n            obj.retentionPolicy = ExternalEventRetentionPolicy.toJSON(message.retentionPolicy);\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventDef();\n        message.name = object.name ?? \"\";\n        message.createdAt = object.createdAt ?? undefined;\n        message.retentionPolicy = object.retentionPolicy !== undefined && object.retentionPolicy !== null ? ExternalEventRetentionPolicy.fromPartial(object.retentionPolicy) : undefined;\n        return message;\n    }\n};\nfunction createBaseExternalEventRetentionPolicy() {\n    return {\n        secondsAfterPut: undefined\n    };\n}\nconst ExternalEventRetentionPolicy = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.secondsAfterPut !== undefined) {\n            writer.uint32(8).int64(message.secondsAfterPut);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventRetentionPolicy();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.secondsAfterPut = longToNumber(reader.int64());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            secondsAfterPut: isSet(object.secondsAfterPut) ? globalThis.Number(object.secondsAfterPut) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.secondsAfterPut !== undefined) {\n            obj.secondsAfterPut = Math.round(message.secondsAfterPut);\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventRetentionPolicy.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventRetentionPolicy();\n        message.secondsAfterPut = object.secondsAfterPut ?? undefined;\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction longToNumber(long) {\n    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long !== (long__WEBPACK_IMPORTED_MODULE_0___default())) {\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long = (long__WEBPACK_IMPORTED_MODULE_0___default());\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/external_event.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/google/protobuf/empty.ts":
/*!*********************************************************!*\
  !*** ./littlehorse-public-api/google/protobuf/empty.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Empty: () => (/* binding */ Empty),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable */ \nconst protobufPackage = \"google.protobuf\";\nfunction createBaseEmpty() {\n    return {};\n}\nconst Empty = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEmpty();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    create (base) {\n        return Empty.fromPartial(base ?? {});\n    },\n    fromPartial (_) {\n        const message = createBaseEmpty();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saXR0bGVob3JzZS1wdWJsaWMtYXBpL2dvb2dsZS9wcm90b2J1Zi9lbXB0eS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsa0JBQWtCLEdBQ3dCO0FBRW5DLE1BQU1DLGtCQUFrQixrQkFBa0I7QUFjakQsU0FBU0M7SUFDUCxPQUFPLENBQUM7QUFDVjtBQUVPLE1BQU1DLFFBQVE7SUFDbkJDLFFBQU9DLENBQVEsRUFBRUMsU0FBcUJOLHNEQUFVLENBQUNRLE1BQU0sRUFBRTtRQUN2RCxPQUFPRjtJQUNUO0lBRUFHLFFBQU9DLEtBQThCLEVBQUVDLE1BQWU7UUFDcEQsTUFBTUMsU0FBU0YsaUJBQWlCVixzREFBVSxHQUFHVSxRQUFRVixzREFBVSxDQUFDUSxNQUFNLENBQUNFO1FBQ3ZFLElBQUlJLE1BQU1ILFdBQVdJLFlBQVlILE9BQU9JLEdBQUcsR0FBR0osT0FBT0ssR0FBRyxHQUFHTjtRQUMzRCxNQUFNTyxVQUFVaEI7UUFDaEIsTUFBT1UsT0FBT0ssR0FBRyxHQUFHSCxJQUFLO1lBQ3ZCLE1BQU1LLE1BQU1QLE9BQU9RLE1BQU07WUFDekIsT0FBUUQsUUFBUTtZQUNoQjtZQUNBLElBQUksQ0FBQ0EsTUFBTSxPQUFPLEtBQUtBLFFBQVEsR0FBRztnQkFDaEM7WUFDRjtZQUNBUCxPQUFPUyxRQUFRLENBQUNGLE1BQU07UUFDeEI7UUFDQSxPQUFPRDtJQUNUO0lBRUFJLFVBQVNqQixDQUFNO1FBQ2IsT0FBTyxDQUFDO0lBQ1Y7SUFFQWtCLFFBQU9sQixDQUFRO1FBQ2IsTUFBTW1CLE1BQVcsQ0FBQztRQUNsQixPQUFPQTtJQUNUO0lBRUFoQixRQUErQ2lCLElBQVE7UUFDckQsT0FBT3RCLE1BQU11QixXQUFXLENBQUNELFFBQVMsQ0FBQztJQUNyQztJQUNBQyxhQUFvRHJCLENBQUk7UUFDdEQsTUFBTWEsVUFBVWhCO1FBQ2hCLE9BQU9nQjtJQUNUO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL2xpdHRsZWhvcnNlLXB1YmxpYy1hcGkvZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnRzPzhhZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCAqIGFzIF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImdvb2dsZS5wcm90b2J1ZlwiO1xuXG4vKipcbiAqIEEgZ2VuZXJpYyBlbXB0eSBtZXNzYWdlIHRoYXQgeW91IGNhbiByZS11c2UgdG8gYXZvaWQgZGVmaW5pbmcgZHVwbGljYXRlZFxuICogZW1wdHkgbWVzc2FnZXMgaW4geW91ciBBUElzLiBBIHR5cGljYWwgZXhhbXBsZSBpcyB0byB1c2UgaXQgYXMgdGhlIHJlcXVlc3RcbiAqIG9yIHRoZSByZXNwb25zZSB0eXBlIG9mIGFuIEFQSSBtZXRob2QuIEZvciBpbnN0YW5jZTpcbiAqXG4gKiAgICAgc2VydmljZSBGb28ge1xuICogICAgICAgcnBjIEJhcihnb29nbGUucHJvdG9idWYuRW1wdHkpIHJldHVybnMgKGdvb2dsZS5wcm90b2J1Zi5FbXB0eSk7XG4gKiAgICAgfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVtcHR5IHtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZUVtcHR5KCk6IEVtcHR5IHtcbiAgcmV0dXJuIHt9O1xufVxuXG5leHBvcnQgY29uc3QgRW1wdHkgPSB7XG4gIGVuY29kZShfOiBFbXB0eSwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogRW1wdHkge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRW1wdHkoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgIH1cbiAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcblxuICBmcm9tSlNPTihfOiBhbnkpOiBFbXB0eSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuXG4gIHRvSlNPTihfOiBFbXB0eSk6IHVua25vd24ge1xuICAgIGNvbnN0IG9iajogYW55ID0ge307XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICBjcmVhdGU8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPEVtcHR5PiwgST4+KGJhc2U/OiBJKTogRW1wdHkge1xuICAgIHJldHVybiBFbXB0eS5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPEVtcHR5PiwgST4+KF86IEkpOiBFbXB0eSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFbXB0eSgpO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxufTtcblxudHlwZSBCdWlsdGluID0gRGF0ZSB8IEZ1bmN0aW9uIHwgVWludDhBcnJheSB8IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCB0eXBlIERlZXBQYXJ0aWFsPFQ+ID0gVCBleHRlbmRzIEJ1aWx0aW4gPyBUXG4gIDogVCBleHRlbmRzIGdsb2JhbFRoaXMuQXJyYXk8aW5mZXIgVT4gPyBnbG9iYWxUaGlzLkFycmF5PERlZXBQYXJ0aWFsPFU+PlxuICA6IFQgZXh0ZW5kcyBSZWFkb25seUFycmF5PGluZmVyIFU+ID8gUmVhZG9ubHlBcnJheTxEZWVwUGFydGlhbDxVPj5cbiAgOiBUIGV4dGVuZHMge30gPyB7IFtLIGluIGtleW9mIFRdPzogRGVlcFBhcnRpYWw8VFtLXT4gfVxuICA6IFBhcnRpYWw8VD47XG5cbnR5cGUgS2V5c09mVW5pb248VD4gPSBUIGV4dGVuZHMgVCA/IGtleW9mIFQgOiBuZXZlcjtcbmV4cG9ydCB0eXBlIEV4YWN0PFAsIEkgZXh0ZW5kcyBQPiA9IFAgZXh0ZW5kcyBCdWlsdGluID8gUFxuICA6IFAgJiB7IFtLIGluIGtleW9mIFBdOiBFeGFjdDxQW0tdLCBJW0tdPiB9ICYgeyBbSyBpbiBFeGNsdWRlPGtleW9mIEksIEtleXNPZlVuaW9uPFA+Pl06IG5ldmVyIH07XG4iXSwibmFtZXMiOlsiX20wIiwicHJvdG9idWZQYWNrYWdlIiwiY3JlYXRlQmFzZUVtcHR5IiwiRW1wdHkiLCJlbmNvZGUiLCJfIiwid3JpdGVyIiwiV3JpdGVyIiwiY3JlYXRlIiwiZGVjb2RlIiwiaW5wdXQiLCJsZW5ndGgiLCJyZWFkZXIiLCJSZWFkZXIiLCJlbmQiLCJ1bmRlZmluZWQiLCJsZW4iLCJwb3MiLCJtZXNzYWdlIiwidGFnIiwidWludDMyIiwic2tpcFR5cGUiLCJmcm9tSlNPTiIsInRvSlNPTiIsIm9iaiIsImJhc2UiLCJmcm9tUGFydGlhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/google/protobuf/empty.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/google/protobuf/timestamp.ts":
/*!*************************************************************!*\
  !*** ./littlehorse-public-api/google/protobuf/timestamp.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Timestamp: () => (/* binding */ Timestamp),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"long\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable */ \n\nconst protobufPackage = \"google.protobuf\";\nfunction createBaseTimestamp() {\n    return {\n        seconds: 0,\n        nanos: 0\n    };\n}\nconst Timestamp = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.seconds !== 0) {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimestamp();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.seconds = longToNumber(reader.int64());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.nanos = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            seconds: isSet(object.seconds) ? globalThis.Number(object.seconds) : 0,\n            nanos: isSet(object.nanos) ? globalThis.Number(object.nanos) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.seconds !== 0) {\n            obj.seconds = Math.round(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            obj.nanos = Math.round(message.nanos);\n        }\n        return obj;\n    },\n    create (base) {\n        return Timestamp.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTimestamp();\n        message.seconds = object.seconds ?? 0;\n        message.nanos = object.nanos ?? 0;\n        return message;\n    }\n};\nfunction longToNumber(long) {\n    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long !== (long__WEBPACK_IMPORTED_MODULE_0___default())) {\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long = (long__WEBPACK_IMPORTED_MODULE_0___default());\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/node_run.ts":
/*!********************************************!*\
  !*** ./littlehorse-public-api/node_run.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntrypointRun: () => (/* binding */ EntrypointRun),\n/* harmony export */   ExitRun: () => (/* binding */ ExitRun),\n/* harmony export */   ExternalEventRun: () => (/* binding */ ExternalEventRun),\n/* harmony export */   Failure: () => (/* binding */ Failure),\n/* harmony export */   NodeRun: () => (/* binding */ NodeRun),\n/* harmony export */   SleepNodeRun: () => (/* binding */ SleepNodeRun),\n/* harmony export */   StartMultipleThreadsRun: () => (/* binding */ StartMultipleThreadsRun),\n/* harmony export */   StartThreadRun: () => (/* binding */ StartThreadRun),\n/* harmony export */   TaskNodeRun: () => (/* binding */ TaskNodeRun),\n/* harmony export */   ThrowEventNodeRun: () => (/* binding */ ThrowEventNodeRun),\n/* harmony export */   UserTaskNodeRun: () => (/* binding */ UserTaskNodeRun),\n/* harmony export */   WaitForThreadsRun: () => (/* binding */ WaitForThreadsRun),\n/* harmony export */   WaitForThreadsRun_WaitForThread: () => (/* binding */ WaitForThreadsRun_WaitForThread),\n/* harmony export */   WaitForThreadsRun_WaitingThreadStatus: () => (/* binding */ WaitForThreadsRun_WaitingThreadStatus),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   waitForThreadsRun_WaitingThreadStatusFromJSON: () => (/* binding */ waitForThreadsRun_WaitingThreadStatusFromJSON),\n/* harmony export */   waitForThreadsRun_WaitingThreadStatusToJSON: () => (/* binding */ waitForThreadsRun_WaitingThreadStatusToJSON),\n/* harmony export */   waitForThreadsRun_WaitingThreadStatusToNumber: () => (/* binding */ waitForThreadsRun_WaitingThreadStatusToNumber)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./variable */ \"(api)/./littlehorse-public-api/variable.ts\");\n/* eslint-disable */ \n\n\n\n\nconst protobufPackage = \"littlehorse\";\nvar WaitForThreadsRun_WaitingThreadStatus;\n(function(WaitForThreadsRun_WaitingThreadStatus) {\n    /** THREAD_IN_PROGRESS - The ThreadRun is in progress (i.e. not COMPLETED nor EXCEPTION nor ERROR) */ WaitForThreadsRun_WaitingThreadStatus[\"THREAD_IN_PROGRESS\"] = \"THREAD_IN_PROGRESS\";\n    /**\n   * THREAD_HANDLING_FAILURE - The ThreadRun failed with some failure, and the FailureHandler is running\n   * for that Failure.\n   */ WaitForThreadsRun_WaitingThreadStatus[\"THREAD_HANDLING_FAILURE\"] = \"THREAD_HANDLING_FAILURE\";\n    /**\n   * THREAD_COMPLETED_OR_FAILURE_HANDLED - We can mark this ThreadRun as \"already waited for\", meaning that either:\n   * 1. It completed successfully, OR\n   * 2. It failed, and the Failure Handler successfully completed\n   */ WaitForThreadsRun_WaitingThreadStatus[\"THREAD_COMPLETED_OR_FAILURE_HANDLED\"] = \"THREAD_COMPLETED_OR_FAILURE_HANDLED\";\n    /**\n   * THREAD_UNSUCCESSFUL - The ThreadRun did not complete successfully, and there wasn't a successful\n   * run of a Failure Handler for the Failure that was thrown.\n   */ WaitForThreadsRun_WaitingThreadStatus[\"THREAD_UNSUCCESSFUL\"] = \"THREAD_UNSUCCESSFUL\";\n    WaitForThreadsRun_WaitingThreadStatus[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(WaitForThreadsRun_WaitingThreadStatus || (WaitForThreadsRun_WaitingThreadStatus = {}));\nfunction waitForThreadsRun_WaitingThreadStatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"THREAD_IN_PROGRESS\":\n            return \"THREAD_IN_PROGRESS\";\n        case 1:\n        case \"THREAD_HANDLING_FAILURE\":\n            return \"THREAD_HANDLING_FAILURE\";\n        case 2:\n        case \"THREAD_COMPLETED_OR_FAILURE_HANDLED\":\n            return \"THREAD_COMPLETED_OR_FAILURE_HANDLED\";\n        case 3:\n        case \"THREAD_UNSUCCESSFUL\":\n            return \"THREAD_UNSUCCESSFUL\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction waitForThreadsRun_WaitingThreadStatusToJSON(object) {\n    switch(object){\n        case \"THREAD_IN_PROGRESS\":\n            return \"THREAD_IN_PROGRESS\";\n        case \"THREAD_HANDLING_FAILURE\":\n            return \"THREAD_HANDLING_FAILURE\";\n        case \"THREAD_COMPLETED_OR_FAILURE_HANDLED\":\n            return \"THREAD_COMPLETED_OR_FAILURE_HANDLED\";\n        case \"THREAD_UNSUCCESSFUL\":\n            return \"THREAD_UNSUCCESSFUL\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction waitForThreadsRun_WaitingThreadStatusToNumber(object) {\n    switch(object){\n        case \"THREAD_IN_PROGRESS\":\n            return 0;\n        case \"THREAD_HANDLING_FAILURE\":\n            return 1;\n        case \"THREAD_COMPLETED_OR_FAILURE_HANDLED\":\n            return 2;\n        case \"THREAD_UNSUCCESSFUL\":\n            return 3;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nfunction createBaseNodeRun() {\n    return {\n        id: undefined,\n        wfSpecId: undefined,\n        failureHandlerIds: [],\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n        arrivalTime: undefined,\n        endTime: undefined,\n        threadSpecName: \"\",\n        nodeName: \"\",\n        errorMessage: undefined,\n        failures: [],\n        task: undefined,\n        externalEvent: undefined,\n        entrypoint: undefined,\n        exit: undefined,\n        startThread: undefined,\n        waitThreads: undefined,\n        sleep: undefined,\n        userTask: undefined,\n        startMultipleThreads: undefined,\n        throwEvent: undefined\n    };\n}\nconst NodeRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.encode(message.wfSpecId, writer.uint32(34).fork()).ldelim();\n        }\n        writer.uint32(42).fork();\n        for (const v of message.failureHandlerIds){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            writer.uint32(48).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToNumber)(message.status));\n        }\n        if (message.arrivalTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.arrivalTime), writer.uint32(58).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(66).fork()).ldelim();\n        }\n        if (message.threadSpecName !== \"\") {\n            writer.uint32(74).string(message.threadSpecName);\n        }\n        if (message.nodeName !== \"\") {\n            writer.uint32(82).string(message.nodeName);\n        }\n        if (message.errorMessage !== undefined) {\n            writer.uint32(90).string(message.errorMessage);\n        }\n        for (const v of message.failures){\n            Failure.encode(v, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.task !== undefined) {\n            TaskNodeRun.encode(message.task, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.externalEvent !== undefined) {\n            ExternalEventRun.encode(message.externalEvent, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.entrypoint !== undefined) {\n            EntrypointRun.encode(message.entrypoint, writer.uint32(122).fork()).ldelim();\n        }\n        if (message.exit !== undefined) {\n            ExitRun.encode(message.exit, writer.uint32(130).fork()).ldelim();\n        }\n        if (message.startThread !== undefined) {\n            StartThreadRun.encode(message.startThread, writer.uint32(138).fork()).ldelim();\n        }\n        if (message.waitThreads !== undefined) {\n            WaitForThreadsRun.encode(message.waitThreads, writer.uint32(146).fork()).ldelim();\n        }\n        if (message.sleep !== undefined) {\n            SleepNodeRun.encode(message.sleep, writer.uint32(154).fork()).ldelim();\n        }\n        if (message.userTask !== undefined) {\n            UserTaskNodeRun.encode(message.userTask, writer.uint32(162).fork()).ldelim();\n        }\n        if (message.startMultipleThreads !== undefined) {\n            StartMultipleThreadsRun.encode(message.startMultipleThreads, writer.uint32(170).fork()).ldelim();\n        }\n        if (message.throwEvent !== undefined) {\n            ThrowEventNodeRun.encode(message.throwEvent, writer.uint32(178).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNodeRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 5:\n                    if (tag === 40) {\n                        message.failureHandlerIds.push(reader.int32());\n                        continue;\n                    }\n                    if (tag === 42) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.failureHandlerIds.push(reader.int32());\n                        }\n                        continue;\n                    }\n                    break;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(reader.int32());\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.arrivalTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.endTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 9:\n                    if (tag !== 74) {\n                        break;\n                    }\n                    message.threadSpecName = reader.string();\n                    continue;\n                case 10:\n                    if (tag !== 82) {\n                        break;\n                    }\n                    message.nodeName = reader.string();\n                    continue;\n                case 11:\n                    if (tag !== 90) {\n                        break;\n                    }\n                    message.errorMessage = reader.string();\n                    continue;\n                case 12:\n                    if (tag !== 98) {\n                        break;\n                    }\n                    message.failures.push(Failure.decode(reader, reader.uint32()));\n                    continue;\n                case 13:\n                    if (tag !== 106) {\n                        break;\n                    }\n                    message.task = TaskNodeRun.decode(reader, reader.uint32());\n                    continue;\n                case 14:\n                    if (tag !== 114) {\n                        break;\n                    }\n                    message.externalEvent = ExternalEventRun.decode(reader, reader.uint32());\n                    continue;\n                case 15:\n                    if (tag !== 122) {\n                        break;\n                    }\n                    message.entrypoint = EntrypointRun.decode(reader, reader.uint32());\n                    continue;\n                case 16:\n                    if (tag !== 130) {\n                        break;\n                    }\n                    message.exit = ExitRun.decode(reader, reader.uint32());\n                    continue;\n                case 17:\n                    if (tag !== 138) {\n                        break;\n                    }\n                    message.startThread = StartThreadRun.decode(reader, reader.uint32());\n                    continue;\n                case 18:\n                    if (tag !== 146) {\n                        break;\n                    }\n                    message.waitThreads = WaitForThreadsRun.decode(reader, reader.uint32());\n                    continue;\n                case 19:\n                    if (tag !== 154) {\n                        break;\n                    }\n                    message.sleep = SleepNodeRun.decode(reader, reader.uint32());\n                    continue;\n                case 20:\n                    if (tag !== 162) {\n                        break;\n                    }\n                    message.userTask = UserTaskNodeRun.decode(reader, reader.uint32());\n                    continue;\n                case 21:\n                    if (tag !== 170) {\n                        break;\n                    }\n                    message.startMultipleThreads = StartMultipleThreadsRun.decode(reader, reader.uint32());\n                    continue;\n                case 22:\n                    if (tag !== 178) {\n                        break;\n                    }\n                    message.throwEvent = ThrowEventNodeRun.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromJSON(object.id) : undefined,\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromJSON(object.wfSpecId) : undefined,\n            failureHandlerIds: globalThis.Array.isArray(object?.failureHandlerIds) ? object.failureHandlerIds.map((e)=>globalThis.Number(e)) : [],\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n            arrivalTime: isSet(object.arrivalTime) ? globalThis.String(object.arrivalTime) : undefined,\n            endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : undefined,\n            threadSpecName: isSet(object.threadSpecName) ? globalThis.String(object.threadSpecName) : \"\",\n            nodeName: isSet(object.nodeName) ? globalThis.String(object.nodeName) : \"\",\n            errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined,\n            failures: globalThis.Array.isArray(object?.failures) ? object.failures.map((e)=>Failure.fromJSON(e)) : [],\n            task: isSet(object.task) ? TaskNodeRun.fromJSON(object.task) : undefined,\n            externalEvent: isSet(object.externalEvent) ? ExternalEventRun.fromJSON(object.externalEvent) : undefined,\n            entrypoint: isSet(object.entrypoint) ? EntrypointRun.fromJSON(object.entrypoint) : undefined,\n            exit: isSet(object.exit) ? ExitRun.fromJSON(object.exit) : undefined,\n            startThread: isSet(object.startThread) ? StartThreadRun.fromJSON(object.startThread) : undefined,\n            waitThreads: isSet(object.waitThreads) ? WaitForThreadsRun.fromJSON(object.waitThreads) : undefined,\n            sleep: isSet(object.sleep) ? SleepNodeRun.fromJSON(object.sleep) : undefined,\n            userTask: isSet(object.userTask) ? UserTaskNodeRun.fromJSON(object.userTask) : undefined,\n            startMultipleThreads: isSet(object.startMultipleThreads) ? StartMultipleThreadsRun.fromJSON(object.startMultipleThreads) : undefined,\n            throwEvent: isSet(object.throwEvent) ? ThrowEventNodeRun.fromJSON(object.throwEvent) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.toJSON(message.id);\n        }\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        if (message.failureHandlerIds?.length) {\n            obj.failureHandlerIds = message.failureHandlerIds.map((e)=>Math.round(e));\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToJSON)(message.status);\n        }\n        if (message.arrivalTime !== undefined) {\n            obj.arrivalTime = message.arrivalTime;\n        }\n        if (message.endTime !== undefined) {\n            obj.endTime = message.endTime;\n        }\n        if (message.threadSpecName !== \"\") {\n            obj.threadSpecName = message.threadSpecName;\n        }\n        if (message.nodeName !== \"\") {\n            obj.nodeName = message.nodeName;\n        }\n        if (message.errorMessage !== undefined) {\n            obj.errorMessage = message.errorMessage;\n        }\n        if (message.failures?.length) {\n            obj.failures = message.failures.map((e)=>Failure.toJSON(e));\n        }\n        if (message.task !== undefined) {\n            obj.task = TaskNodeRun.toJSON(message.task);\n        }\n        if (message.externalEvent !== undefined) {\n            obj.externalEvent = ExternalEventRun.toJSON(message.externalEvent);\n        }\n        if (message.entrypoint !== undefined) {\n            obj.entrypoint = EntrypointRun.toJSON(message.entrypoint);\n        }\n        if (message.exit !== undefined) {\n            obj.exit = ExitRun.toJSON(message.exit);\n        }\n        if (message.startThread !== undefined) {\n            obj.startThread = StartThreadRun.toJSON(message.startThread);\n        }\n        if (message.waitThreads !== undefined) {\n            obj.waitThreads = WaitForThreadsRun.toJSON(message.waitThreads);\n        }\n        if (message.sleep !== undefined) {\n            obj.sleep = SleepNodeRun.toJSON(message.sleep);\n        }\n        if (message.userTask !== undefined) {\n            obj.userTask = UserTaskNodeRun.toJSON(message.userTask);\n        }\n        if (message.startMultipleThreads !== undefined) {\n            obj.startMultipleThreads = StartMultipleThreadsRun.toJSON(message.startMultipleThreads);\n        }\n        if (message.throwEvent !== undefined) {\n            obj.throwEvent = ThrowEventNodeRun.toJSON(message.throwEvent);\n        }\n        return obj;\n    },\n    create (base) {\n        return NodeRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseNodeRun();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromPartial(object.id) : undefined;\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        message.failureHandlerIds = object.failureHandlerIds?.map((e)=>e) || [];\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING;\n        message.arrivalTime = object.arrivalTime ?? undefined;\n        message.endTime = object.endTime ?? undefined;\n        message.threadSpecName = object.threadSpecName ?? \"\";\n        message.nodeName = object.nodeName ?? \"\";\n        message.errorMessage = object.errorMessage ?? undefined;\n        message.failures = object.failures?.map((e)=>Failure.fromPartial(e)) || [];\n        message.task = object.task !== undefined && object.task !== null ? TaskNodeRun.fromPartial(object.task) : undefined;\n        message.externalEvent = object.externalEvent !== undefined && object.externalEvent !== null ? ExternalEventRun.fromPartial(object.externalEvent) : undefined;\n        message.entrypoint = object.entrypoint !== undefined && object.entrypoint !== null ? EntrypointRun.fromPartial(object.entrypoint) : undefined;\n        message.exit = object.exit !== undefined && object.exit !== null ? ExitRun.fromPartial(object.exit) : undefined;\n        message.startThread = object.startThread !== undefined && object.startThread !== null ? StartThreadRun.fromPartial(object.startThread) : undefined;\n        message.waitThreads = object.waitThreads !== undefined && object.waitThreads !== null ? WaitForThreadsRun.fromPartial(object.waitThreads) : undefined;\n        message.sleep = object.sleep !== undefined && object.sleep !== null ? SleepNodeRun.fromPartial(object.sleep) : undefined;\n        message.userTask = object.userTask !== undefined && object.userTask !== null ? UserTaskNodeRun.fromPartial(object.userTask) : undefined;\n        message.startMultipleThreads = object.startMultipleThreads !== undefined && object.startMultipleThreads !== null ? StartMultipleThreadsRun.fromPartial(object.startMultipleThreads) : undefined;\n        message.throwEvent = object.throwEvent !== undefined && object.throwEvent !== null ? ThrowEventNodeRun.fromPartial(object.throwEvent) : undefined;\n        return message;\n    }\n};\nfunction createBaseTaskNodeRun() {\n    return {\n        taskRunId: undefined\n    };\n}\nconst TaskNodeRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.taskRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.encode(message.taskRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskNodeRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskRunId: isSet(object.taskRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.fromJSON(object.taskRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskRunId !== undefined) {\n            obj.taskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.toJSON(message.taskRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskNodeRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskNodeRun();\n        message.taskRunId = object.taskRunId !== undefined && object.taskRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.fromPartial(object.taskRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseThrowEventNodeRun() {\n    return {\n        workflowEventId: undefined\n    };\n}\nconst ThrowEventNodeRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.workflowEventId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.encode(message.workflowEventId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThrowEventNodeRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.workflowEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            workflowEventId: isSet(object.workflowEventId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.fromJSON(object.workflowEventId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.workflowEventId !== undefined) {\n            obj.workflowEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.toJSON(message.workflowEventId);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThrowEventNodeRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThrowEventNodeRun();\n        message.workflowEventId = object.workflowEventId !== undefined && object.workflowEventId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.fromPartial(object.workflowEventId) : undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskNodeRun() {\n    return {\n        userTaskRunId: undefined\n    };\n}\nconst UserTaskNodeRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.userTaskRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.encode(message.userTaskRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskNodeRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            userTaskRunId: isSet(object.userTaskRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromJSON(object.userTaskRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.userTaskRunId !== undefined) {\n            obj.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.toJSON(message.userTaskRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskNodeRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskNodeRun();\n        message.userTaskRunId = object.userTaskRunId !== undefined && object.userTaskRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromPartial(object.userTaskRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseEntrypointRun() {\n    return {};\n}\nconst EntrypointRun = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEntrypointRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    create (base) {\n        return EntrypointRun.fromPartial(base ?? {});\n    },\n    fromPartial (_) {\n        const message = createBaseEntrypointRun();\n        return message;\n    }\n};\nfunction createBaseExitRun() {\n    return {};\n}\nconst ExitRun = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExitRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    create (base) {\n        return ExitRun.fromPartial(base ?? {});\n    },\n    fromPartial (_) {\n        const message = createBaseExitRun();\n        return message;\n    }\n};\nfunction createBaseStartThreadRun() {\n    return {\n        childThreadId: undefined,\n        threadSpecName: \"\"\n    };\n}\nconst StartThreadRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.childThreadId !== undefined) {\n            writer.uint32(8).int32(message.childThreadId);\n        }\n        if (message.threadSpecName !== \"\") {\n            writer.uint32(18).string(message.threadSpecName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStartThreadRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.childThreadId = reader.int32();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.threadSpecName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            childThreadId: isSet(object.childThreadId) ? globalThis.Number(object.childThreadId) : undefined,\n            threadSpecName: isSet(object.threadSpecName) ? globalThis.String(object.threadSpecName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.childThreadId !== undefined) {\n            obj.childThreadId = Math.round(message.childThreadId);\n        }\n        if (message.threadSpecName !== \"\") {\n            obj.threadSpecName = message.threadSpecName;\n        }\n        return obj;\n    },\n    create (base) {\n        return StartThreadRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseStartThreadRun();\n        message.childThreadId = object.childThreadId ?? undefined;\n        message.threadSpecName = object.threadSpecName ?? \"\";\n        return message;\n    }\n};\nfunction createBaseStartMultipleThreadsRun() {\n    return {\n        threadSpecName: \"\",\n        childThreadIds: []\n    };\n}\nconst StartMultipleThreadsRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.threadSpecName !== \"\") {\n            writer.uint32(10).string(message.threadSpecName);\n        }\n        writer.uint32(18).fork();\n        for (const v of message.childThreadIds){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStartMultipleThreadsRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threadSpecName = reader.string();\n                    continue;\n                case 2:\n                    if (tag === 16) {\n                        message.childThreadIds.push(reader.int32());\n                        continue;\n                    }\n                    if (tag === 18) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.childThreadIds.push(reader.int32());\n                        }\n                        continue;\n                    }\n                    break;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threadSpecName: isSet(object.threadSpecName) ? globalThis.String(object.threadSpecName) : \"\",\n            childThreadIds: globalThis.Array.isArray(object?.childThreadIds) ? object.childThreadIds.map((e)=>globalThis.Number(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threadSpecName !== \"\") {\n            obj.threadSpecName = message.threadSpecName;\n        }\n        if (message.childThreadIds?.length) {\n            obj.childThreadIds = message.childThreadIds.map((e)=>Math.round(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return StartMultipleThreadsRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseStartMultipleThreadsRun();\n        message.threadSpecName = object.threadSpecName ?? \"\";\n        message.childThreadIds = object.childThreadIds?.map((e)=>e) || [];\n        return message;\n    }\n};\nfunction createBaseWaitForThreadsRun() {\n    return {\n        threads: []\n    };\n}\nconst WaitForThreadsRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        for (const v of message.threads){\n            WaitForThreadsRun_WaitForThread.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWaitForThreadsRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threads.push(WaitForThreadsRun_WaitForThread.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threads: globalThis.Array.isArray(object?.threads) ? object.threads.map((e)=>WaitForThreadsRun_WaitForThread.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threads?.length) {\n            obj.threads = message.threads.map((e)=>WaitForThreadsRun_WaitForThread.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return WaitForThreadsRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWaitForThreadsRun();\n        message.threads = object.threads?.map((e)=>WaitForThreadsRun_WaitForThread.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseWaitForThreadsRun_WaitForThread() {\n    return {\n        threadEndTime: undefined,\n        threadStatus: _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n        threadRunNumber: 0,\n        waitingStatus: \"THREAD_IN_PROGRESS\",\n        failureHandlerThreadRunId: undefined\n    };\n}\nconst WaitForThreadsRun_WaitForThread = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.threadEndTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.threadEndTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.threadStatus !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            writer.uint32(16).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToNumber)(message.threadStatus));\n        }\n        if (message.threadRunNumber !== 0) {\n            writer.uint32(24).int32(message.threadRunNumber);\n        }\n        if (message.waitingStatus !== \"THREAD_IN_PROGRESS\") {\n            writer.uint32(32).int32(waitForThreadsRun_WaitingThreadStatusToNumber(message.waitingStatus));\n        }\n        if (message.failureHandlerThreadRunId !== undefined) {\n            writer.uint32(40).int32(message.failureHandlerThreadRunId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWaitForThreadsRun_WaitForThread();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threadEndTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.threadStatus = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(reader.int32());\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.waitingStatus = waitForThreadsRun_WaitingThreadStatusFromJSON(reader.int32());\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.failureHandlerThreadRunId = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threadEndTime: isSet(object.threadEndTime) ? globalThis.String(object.threadEndTime) : undefined,\n            threadStatus: isSet(object.threadStatus) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(object.threadStatus) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : 0,\n            waitingStatus: isSet(object.waitingStatus) ? waitForThreadsRun_WaitingThreadStatusFromJSON(object.waitingStatus) : \"THREAD_IN_PROGRESS\",\n            failureHandlerThreadRunId: isSet(object.failureHandlerThreadRunId) ? globalThis.Number(object.failureHandlerThreadRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threadEndTime !== undefined) {\n            obj.threadEndTime = message.threadEndTime;\n        }\n        if (message.threadStatus !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            obj.threadStatus = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToJSON)(message.threadStatus);\n        }\n        if (message.threadRunNumber !== 0) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        if (message.waitingStatus !== \"THREAD_IN_PROGRESS\") {\n            obj.waitingStatus = waitForThreadsRun_WaitingThreadStatusToJSON(message.waitingStatus);\n        }\n        if (message.failureHandlerThreadRunId !== undefined) {\n            obj.failureHandlerThreadRunId = Math.round(message.failureHandlerThreadRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return WaitForThreadsRun_WaitForThread.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWaitForThreadsRun_WaitForThread();\n        message.threadEndTime = object.threadEndTime ?? undefined;\n        message.threadStatus = object.threadStatus ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING;\n        message.threadRunNumber = object.threadRunNumber ?? 0;\n        message.waitingStatus = object.waitingStatus ?? \"THREAD_IN_PROGRESS\";\n        message.failureHandlerThreadRunId = object.failureHandlerThreadRunId ?? undefined;\n        return message;\n    }\n};\nfunction createBaseExternalEventRun() {\n    return {\n        externalEventDefId: undefined,\n        eventTime: undefined,\n        externalEventId: undefined,\n        timedOut: false\n    };\n}\nconst ExternalEventRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.externalEventDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventDefId.encode(message.externalEventDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.eventTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.externalEventId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.encode(message.externalEventId, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.timedOut === true) {\n            writer.uint32(32).bool(message.timedOut);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.eventTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.externalEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.timedOut = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            externalEventDefId: isSet(object.externalEventDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventDefId.fromJSON(object.externalEventDefId) : undefined,\n            eventTime: isSet(object.eventTime) ? globalThis.String(object.eventTime) : undefined,\n            externalEventId: isSet(object.externalEventId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromJSON(object.externalEventId) : undefined,\n            timedOut: isSet(object.timedOut) ? globalThis.Boolean(object.timedOut) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.externalEventDefId !== undefined) {\n            obj.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventDefId.toJSON(message.externalEventDefId);\n        }\n        if (message.eventTime !== undefined) {\n            obj.eventTime = message.eventTime;\n        }\n        if (message.externalEventId !== undefined) {\n            obj.externalEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.toJSON(message.externalEventId);\n        }\n        if (message.timedOut === true) {\n            obj.timedOut = message.timedOut;\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventRun();\n        message.externalEventDefId = object.externalEventDefId !== undefined && object.externalEventDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventDefId.fromPartial(object.externalEventDefId) : undefined;\n        message.eventTime = object.eventTime ?? undefined;\n        message.externalEventId = object.externalEventId !== undefined && object.externalEventId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromPartial(object.externalEventId) : undefined;\n        message.timedOut = object.timedOut ?? false;\n        return message;\n    }\n};\nfunction createBaseSleepNodeRun() {\n    return {\n        maturationTime: undefined,\n        matured: false\n    };\n}\nconst SleepNodeRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.maturationTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.maturationTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.matured === true) {\n            writer.uint32(16).bool(message.matured);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSleepNodeRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.maturationTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.matured = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            maturationTime: isSet(object.maturationTime) ? globalThis.String(object.maturationTime) : undefined,\n            matured: isSet(object.matured) ? globalThis.Boolean(object.matured) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.maturationTime !== undefined) {\n            obj.maturationTime = message.maturationTime;\n        }\n        if (message.matured === true) {\n            obj.matured = message.matured;\n        }\n        return obj;\n    },\n    create (base) {\n        return SleepNodeRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSleepNodeRun();\n        message.maturationTime = object.maturationTime ?? undefined;\n        message.matured = object.matured ?? false;\n        return message;\n    }\n};\nfunction createBaseFailure() {\n    return {\n        failureName: \"\",\n        message: \"\",\n        content: undefined,\n        wasProperlyHandled: false,\n        failureHandlerThreadrunId: undefined\n    };\n}\nconst Failure = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.failureName !== \"\") {\n            writer.uint32(10).string(message.failureName);\n        }\n        if (message.message !== \"\") {\n            writer.uint32(18).string(message.message);\n        }\n        if (message.content !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.encode(message.content, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.wasProperlyHandled === true) {\n            writer.uint32(32).bool(message.wasProperlyHandled);\n        }\n        if (message.failureHandlerThreadrunId !== undefined) {\n            writer.uint32(40).int32(message.failureHandlerThreadrunId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFailure();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.failureName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.message = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.content = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.wasProperlyHandled = reader.bool();\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.failureHandlerThreadrunId = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            failureName: isSet(object.failureName) ? globalThis.String(object.failureName) : \"\",\n            message: isSet(object.message) ? globalThis.String(object.message) : \"\",\n            content: isSet(object.content) ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromJSON(object.content) : undefined,\n            wasProperlyHandled: isSet(object.wasProperlyHandled) ? globalThis.Boolean(object.wasProperlyHandled) : false,\n            failureHandlerThreadrunId: isSet(object.failureHandlerThreadrunId) ? globalThis.Number(object.failureHandlerThreadrunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.failureName !== \"\") {\n            obj.failureName = message.failureName;\n        }\n        if (message.message !== \"\") {\n            obj.message = message.message;\n        }\n        if (message.content !== undefined) {\n            obj.content = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.toJSON(message.content);\n        }\n        if (message.wasProperlyHandled === true) {\n            obj.wasProperlyHandled = message.wasProperlyHandled;\n        }\n        if (message.failureHandlerThreadrunId !== undefined) {\n            obj.failureHandlerThreadrunId = Math.round(message.failureHandlerThreadrunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return Failure.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseFailure();\n        message.failureName = object.failureName ?? \"\";\n        message.message = object.message ?? \"\";\n        message.content = object.content !== undefined && object.content !== null ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromPartial(object.content) : undefined;\n        message.wasProperlyHandled = object.wasProperlyHandled ?? false;\n        message.failureHandlerThreadrunId = object.failureHandlerThreadrunId ?? undefined;\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/node_run.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/object_id.ts":
/*!*********************************************!*\
  !*** ./littlehorse-public-api/object_id.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExternalEventDefId: () => (/* binding */ ExternalEventDefId),\n/* harmony export */   ExternalEventId: () => (/* binding */ ExternalEventId),\n/* harmony export */   NodeRunId: () => (/* binding */ NodeRunId),\n/* harmony export */   PrincipalId: () => (/* binding */ PrincipalId),\n/* harmony export */   TaskDefId: () => (/* binding */ TaskDefId),\n/* harmony export */   TaskDefMetricsId: () => (/* binding */ TaskDefMetricsId),\n/* harmony export */   TaskRunId: () => (/* binding */ TaskRunId),\n/* harmony export */   TaskWorkerGroupId: () => (/* binding */ TaskWorkerGroupId),\n/* harmony export */   TenantId: () => (/* binding */ TenantId),\n/* harmony export */   UserTaskDefId: () => (/* binding */ UserTaskDefId),\n/* harmony export */   UserTaskRunId: () => (/* binding */ UserTaskRunId),\n/* harmony export */   VariableId: () => (/* binding */ VariableId),\n/* harmony export */   WfRunId: () => (/* binding */ WfRunId),\n/* harmony export */   WfSpecId: () => (/* binding */ WfSpecId),\n/* harmony export */   WfSpecMetricsId: () => (/* binding */ WfSpecMetricsId),\n/* harmony export */   WorkflowEventDefId: () => (/* binding */ WorkflowEventDefId),\n/* harmony export */   WorkflowEventId: () => (/* binding */ WorkflowEventId),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* eslint-disable */ \n\n\nconst protobufPackage = \"littlehorse\";\nfunction createBaseWfSpecId() {\n    return {\n        name: \"\",\n        majorVersion: 0,\n        revision: 0\n    };\n}\nconst WfSpecId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.majorVersion !== 0) {\n            writer.uint32(16).int32(message.majorVersion);\n        }\n        if (message.revision !== 0) {\n            writer.uint32(24).int32(message.revision);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpecId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.majorVersion = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.revision = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            majorVersion: isSet(object.majorVersion) ? globalThis.Number(object.majorVersion) : 0,\n            revision: isSet(object.revision) ? globalThis.Number(object.revision) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.majorVersion !== 0) {\n            obj.majorVersion = Math.round(message.majorVersion);\n        }\n        if (message.revision !== 0) {\n            obj.revision = Math.round(message.revision);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpecId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpecId();\n        message.name = object.name ?? \"\";\n        message.majorVersion = object.majorVersion ?? 0;\n        message.revision = object.revision ?? 0;\n        return message;\n    }\n};\nfunction createBaseTaskDefId() {\n    return {\n        name: \"\"\n    };\n}\nconst TaskDefId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskDefId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskDefId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskDefId();\n        message.name = object.name ?? \"\";\n        return message;\n    }\n};\nfunction createBaseExternalEventDefId() {\n    return {\n        name: \"\"\n    };\n}\nconst ExternalEventDefId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventDefId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventDefId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventDefId();\n        message.name = object.name ?? \"\";\n        return message;\n    }\n};\nfunction createBaseUserTaskDefId() {\n    return {\n        name: \"\",\n        version: 0\n    };\n}\nconst UserTaskDefId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.version !== 0) {\n            writer.uint32(16).int32(message.version);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskDefId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.version = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            version: isSet(object.version) ? globalThis.Number(object.version) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.version !== 0) {\n            obj.version = Math.round(message.version);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskDefId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskDefId();\n        message.name = object.name ?? \"\";\n        message.version = object.version ?? 0;\n        return message;\n    }\n};\nfunction createBaseWorkflowEventDefId() {\n    return {\n        name: \"\"\n    };\n}\nconst WorkflowEventDefId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWorkflowEventDefId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        return obj;\n    },\n    create (base) {\n        return WorkflowEventDefId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWorkflowEventDefId();\n        message.name = object.name ?? \"\";\n        return message;\n    }\n};\nfunction createBaseTaskWorkerGroupId() {\n    return {\n        taskDefId: undefined\n    };\n}\nconst TaskWorkerGroupId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.taskDefId !== undefined) {\n            TaskDefId.encode(message.taskDefId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskWorkerGroupId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskDefId = TaskDefId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskDefId: isSet(object.taskDefId) ? TaskDefId.fromJSON(object.taskDefId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = TaskDefId.toJSON(message.taskDefId);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskWorkerGroupId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskWorkerGroupId();\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? TaskDefId.fromPartial(object.taskDefId) : undefined;\n        return message;\n    }\n};\nfunction createBaseVariableId() {\n    return {\n        wfRunId: undefined,\n        threadRunNumber: 0,\n        name: \"\"\n    };\n}\nconst VariableId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.threadRunNumber !== 0) {\n            writer.uint32(16).int32(message.threadRunNumber);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? WfRunId.fromJSON(object.wfRunId) : undefined,\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : 0,\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.threadRunNumber !== 0) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableId();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.threadRunNumber = object.threadRunNumber ?? 0;\n        message.name = object.name ?? \"\";\n        return message;\n    }\n};\nfunction createBaseExternalEventId() {\n    return {\n        wfRunId: undefined,\n        externalEventDefId: undefined,\n        guid: \"\"\n    };\n}\nconst ExternalEventId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.externalEventDefId !== undefined) {\n            ExternalEventDefId.encode(message.externalEventDefId, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.guid !== \"\") {\n            writer.uint32(26).string(message.guid);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.externalEventDefId = ExternalEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.guid = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? WfRunId.fromJSON(object.wfRunId) : undefined,\n            externalEventDefId: isSet(object.externalEventDefId) ? ExternalEventDefId.fromJSON(object.externalEventDefId) : undefined,\n            guid: isSet(object.guid) ? globalThis.String(object.guid) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.externalEventDefId !== undefined) {\n            obj.externalEventDefId = ExternalEventDefId.toJSON(message.externalEventDefId);\n        }\n        if (message.guid !== \"\") {\n            obj.guid = message.guid;\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventId();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.externalEventDefId = object.externalEventDefId !== undefined && object.externalEventDefId !== null ? ExternalEventDefId.fromPartial(object.externalEventDefId) : undefined;\n        message.guid = object.guid ?? \"\";\n        return message;\n    }\n};\nfunction createBaseWfRunId() {\n    return {\n        id: \"\",\n        parentWfRunId: undefined\n    };\n}\nconst WfRunId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.parentWfRunId !== undefined) {\n            WfRunId.encode(message.parentWfRunId, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfRunId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.parentWfRunId = WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? globalThis.String(object.id) : \"\",\n            parentWfRunId: isSet(object.parentWfRunId) ? WfRunId.fromJSON(object.parentWfRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== \"\") {\n            obj.id = message.id;\n        }\n        if (message.parentWfRunId !== undefined) {\n            obj.parentWfRunId = WfRunId.toJSON(message.parentWfRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfRunId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfRunId();\n        message.id = object.id ?? \"\";\n        message.parentWfRunId = object.parentWfRunId !== undefined && object.parentWfRunId !== null ? WfRunId.fromPartial(object.parentWfRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseNodeRunId() {\n    return {\n        wfRunId: undefined,\n        threadRunNumber: 0,\n        position: 0\n    };\n}\nconst NodeRunId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.threadRunNumber !== 0) {\n            writer.uint32(16).int32(message.threadRunNumber);\n        }\n        if (message.position !== 0) {\n            writer.uint32(24).int32(message.position);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNodeRunId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.position = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? WfRunId.fromJSON(object.wfRunId) : undefined,\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : 0,\n            position: isSet(object.position) ? globalThis.Number(object.position) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.threadRunNumber !== 0) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        if (message.position !== 0) {\n            obj.position = Math.round(message.position);\n        }\n        return obj;\n    },\n    create (base) {\n        return NodeRunId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseNodeRunId();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.threadRunNumber = object.threadRunNumber ?? 0;\n        message.position = object.position ?? 0;\n        return message;\n    }\n};\nfunction createBaseWorkflowEventId() {\n    return {\n        wfRunId: undefined,\n        workflowEventDefId: undefined,\n        id: 0\n    };\n}\nconst WorkflowEventId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.workflowEventDefId !== undefined) {\n            WorkflowEventDefId.encode(message.workflowEventDefId, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.id !== 0) {\n            writer.uint32(24).int32(message.id);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWorkflowEventId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.workflowEventDefId = WorkflowEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.id = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? WfRunId.fromJSON(object.wfRunId) : undefined,\n            workflowEventDefId: isSet(object.workflowEventDefId) ? WorkflowEventDefId.fromJSON(object.workflowEventDefId) : undefined,\n            id: isSet(object.id) ? globalThis.Number(object.id) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.workflowEventDefId !== undefined) {\n            obj.workflowEventDefId = WorkflowEventDefId.toJSON(message.workflowEventDefId);\n        }\n        if (message.id !== 0) {\n            obj.id = Math.round(message.id);\n        }\n        return obj;\n    },\n    create (base) {\n        return WorkflowEventId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWorkflowEventId();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.workflowEventDefId = object.workflowEventDefId !== undefined && object.workflowEventDefId !== null ? WorkflowEventDefId.fromPartial(object.workflowEventDefId) : undefined;\n        message.id = object.id ?? 0;\n        return message;\n    }\n};\nfunction createBaseTaskRunId() {\n    return {\n        wfRunId: undefined,\n        taskGuid: \"\"\n    };\n}\nconst TaskRunId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.taskGuid !== \"\") {\n            writer.uint32(18).string(message.taskGuid);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskRunId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.taskGuid = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? WfRunId.fromJSON(object.wfRunId) : undefined,\n            taskGuid: isSet(object.taskGuid) ? globalThis.String(object.taskGuid) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.taskGuid !== \"\") {\n            obj.taskGuid = message.taskGuid;\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskRunId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskRunId();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.taskGuid = object.taskGuid ?? \"\";\n        return message;\n    }\n};\nfunction createBaseUserTaskRunId() {\n    return {\n        wfRunId: undefined,\n        userTaskGuid: \"\"\n    };\n}\nconst UserTaskRunId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.userTaskGuid !== \"\") {\n            writer.uint32(18).string(message.userTaskGuid);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskRunId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.userTaskGuid = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? WfRunId.fromJSON(object.wfRunId) : undefined,\n            userTaskGuid: isSet(object.userTaskGuid) ? globalThis.String(object.userTaskGuid) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.userTaskGuid !== \"\") {\n            obj.userTaskGuid = message.userTaskGuid;\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskRunId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskRunId();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.userTaskGuid = object.userTaskGuid ?? \"\";\n        return message;\n    }\n};\nfunction createBaseTaskDefMetricsId() {\n    return {\n        windowStart: undefined,\n        windowType: _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5,\n        taskDefId: undefined\n    };\n}\nconst TaskDefMetricsId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.windowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.windowType !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(16).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthToNumber)(message.windowType));\n        }\n        if (message.taskDefId !== undefined) {\n            TaskDefId.encode(message.taskDefId, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskDefMetricsId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.windowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.windowType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.taskDefId = TaskDefId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            windowStart: isSet(object.windowStart) ? globalThis.String(object.windowStart) : undefined,\n            windowType: isSet(object.windowType) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthFromJSON)(object.windowType) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5,\n            taskDefId: isSet(object.taskDefId) ? TaskDefId.fromJSON(object.taskDefId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.windowStart !== undefined) {\n            obj.windowStart = message.windowStart;\n        }\n        if (message.windowType !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5) {\n            obj.windowType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthToJSON)(message.windowType);\n        }\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = TaskDefId.toJSON(message.taskDefId);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskDefMetricsId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskDefMetricsId();\n        message.windowStart = object.windowStart ?? undefined;\n        message.windowType = object.windowType ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5;\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? TaskDefId.fromPartial(object.taskDefId) : undefined;\n        return message;\n    }\n};\nfunction createBaseWfSpecMetricsId() {\n    return {\n        windowStart: undefined,\n        windowType: _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5,\n        wfSpecId: undefined\n    };\n}\nconst WfSpecMetricsId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.windowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.windowType !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(16).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthToNumber)(message.windowType));\n        }\n        if (message.wfSpecId !== undefined) {\n            WfSpecId.encode(message.wfSpecId, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpecMetricsId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.windowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.windowType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.wfSpecId = WfSpecId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            windowStart: isSet(object.windowStart) ? globalThis.String(object.windowStart) : undefined,\n            windowType: isSet(object.windowType) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthFromJSON)(object.windowType) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5,\n            wfSpecId: isSet(object.wfSpecId) ? WfSpecId.fromJSON(object.wfSpecId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.windowStart !== undefined) {\n            obj.windowStart = message.windowStart;\n        }\n        if (message.windowType !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5) {\n            obj.windowType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.metricsWindowLengthToJSON)(message.windowType);\n        }\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = WfSpecId.toJSON(message.wfSpecId);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpecMetricsId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpecMetricsId();\n        message.windowStart = object.windowStart ?? undefined;\n        message.windowType = object.windowType ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.MetricsWindowLength.MINUTES_5;\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        return message;\n    }\n};\nfunction createBasePrincipalId() {\n    return {\n        id: \"\"\n    };\n}\nconst PrincipalId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePrincipalId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? globalThis.String(object.id) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== \"\") {\n            obj.id = message.id;\n        }\n        return obj;\n    },\n    create (base) {\n        return PrincipalId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePrincipalId();\n        message.id = object.id ?? \"\";\n        return message;\n    }\n};\nfunction createBaseTenantId() {\n    return {\n        id: \"\"\n    };\n}\nconst TenantId = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTenantId();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? globalThis.String(object.id) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== \"\") {\n            obj.id = message.id;\n        }\n        return obj;\n    },\n    create (base) {\n        return TenantId.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTenantId();\n        message.id = object.id ?? \"\";\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/object_id.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/service.ts":
/*!*******************************************!*\
  !*** ./littlehorse-public-api/service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllowedUpdateType: () => (/* binding */ AllowedUpdateType),\n/* harmony export */   AwaitWorkflowEventRequest: () => (/* binding */ AwaitWorkflowEventRequest),\n/* harmony export */   DeleteExternalEventDefRequest: () => (/* binding */ DeleteExternalEventDefRequest),\n/* harmony export */   DeleteExternalEventRequest: () => (/* binding */ DeleteExternalEventRequest),\n/* harmony export */   DeleteTaskDefRequest: () => (/* binding */ DeleteTaskDefRequest),\n/* harmony export */   DeleteUserTaskDefRequest: () => (/* binding */ DeleteUserTaskDefRequest),\n/* harmony export */   DeleteWfRunRequest: () => (/* binding */ DeleteWfRunRequest),\n/* harmony export */   DeleteWfSpecRequest: () => (/* binding */ DeleteWfSpecRequest),\n/* harmony export */   ExternalEventDefIdList: () => (/* binding */ ExternalEventDefIdList),\n/* harmony export */   ExternalEventIdList: () => (/* binding */ ExternalEventIdList),\n/* harmony export */   ExternalEventList: () => (/* binding */ ExternalEventList),\n/* harmony export */   GetLatestUserTaskDefRequest: () => (/* binding */ GetLatestUserTaskDefRequest),\n/* harmony export */   GetLatestWfSpecRequest: () => (/* binding */ GetLatestWfSpecRequest),\n/* harmony export */   LHHostInfo: () => (/* binding */ LHHostInfo),\n/* harmony export */   ListExternalEventsRequest: () => (/* binding */ ListExternalEventsRequest),\n/* harmony export */   ListNodeRunsRequest: () => (/* binding */ ListNodeRunsRequest),\n/* harmony export */   ListTaskMetricsRequest: () => (/* binding */ ListTaskMetricsRequest),\n/* harmony export */   ListTaskMetricsResponse: () => (/* binding */ ListTaskMetricsResponse),\n/* harmony export */   ListTaskRunsRequest: () => (/* binding */ ListTaskRunsRequest),\n/* harmony export */   ListUserTaskRunRequest: () => (/* binding */ ListUserTaskRunRequest),\n/* harmony export */   ListVariablesRequest: () => (/* binding */ ListVariablesRequest),\n/* harmony export */   ListWfMetricsRequest: () => (/* binding */ ListWfMetricsRequest),\n/* harmony export */   ListWfMetricsResponse: () => (/* binding */ ListWfMetricsResponse),\n/* harmony export */   LittleHorseDefinition: () => (/* binding */ LittleHorseDefinition),\n/* harmony export */   MigrateWfSpecRequest: () => (/* binding */ MigrateWfSpecRequest),\n/* harmony export */   NodeRunIdList: () => (/* binding */ NodeRunIdList),\n/* harmony export */   NodeRunList: () => (/* binding */ NodeRunList),\n/* harmony export */   PollTaskRequest: () => (/* binding */ PollTaskRequest),\n/* harmony export */   PollTaskResponse: () => (/* binding */ PollTaskResponse),\n/* harmony export */   PutExternalEventDefRequest: () => (/* binding */ PutExternalEventDefRequest),\n/* harmony export */   PutExternalEventRequest: () => (/* binding */ PutExternalEventRequest),\n/* harmony export */   PutTaskDefRequest: () => (/* binding */ PutTaskDefRequest),\n/* harmony export */   PutUserTaskDefRequest: () => (/* binding */ PutUserTaskDefRequest),\n/* harmony export */   PutWfSpecRequest: () => (/* binding */ PutWfSpecRequest),\n/* harmony export */   PutWfSpecRequest_ThreadSpecsEntry: () => (/* binding */ PutWfSpecRequest_ThreadSpecsEntry),\n/* harmony export */   PutWorkflowEventDefRequest: () => (/* binding */ PutWorkflowEventDefRequest),\n/* harmony export */   RegisterTaskWorkerRequest: () => (/* binding */ RegisterTaskWorkerRequest),\n/* harmony export */   RegisterTaskWorkerResponse: () => (/* binding */ RegisterTaskWorkerResponse),\n/* harmony export */   ReportTaskRun: () => (/* binding */ ReportTaskRun),\n/* harmony export */   ResumeWfRunRequest: () => (/* binding */ ResumeWfRunRequest),\n/* harmony export */   RunWfRequest: () => (/* binding */ RunWfRequest),\n/* harmony export */   RunWfRequest_VariablesEntry: () => (/* binding */ RunWfRequest_VariablesEntry),\n/* harmony export */   ScheduledTask: () => (/* binding */ ScheduledTask),\n/* harmony export */   SearchExternalEventDefRequest: () => (/* binding */ SearchExternalEventDefRequest),\n/* harmony export */   SearchExternalEventRequest: () => (/* binding */ SearchExternalEventRequest),\n/* harmony export */   SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest: () => (/* binding */ SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest),\n/* harmony export */   SearchNodeRunRequest: () => (/* binding */ SearchNodeRunRequest),\n/* harmony export */   SearchNodeRunRequest_NodeType: () => (/* binding */ SearchNodeRunRequest_NodeType),\n/* harmony export */   SearchTaskDefRequest: () => (/* binding */ SearchTaskDefRequest),\n/* harmony export */   SearchTaskRunRequest: () => (/* binding */ SearchTaskRunRequest),\n/* harmony export */   SearchUserTaskDefRequest: () => (/* binding */ SearchUserTaskDefRequest),\n/* harmony export */   SearchUserTaskRunRequest: () => (/* binding */ SearchUserTaskRunRequest),\n/* harmony export */   SearchVariableRequest: () => (/* binding */ SearchVariableRequest),\n/* harmony export */   SearchWfRunRequest: () => (/* binding */ SearchWfRunRequest),\n/* harmony export */   SearchWfSpecRequest: () => (/* binding */ SearchWfSpecRequest),\n/* harmony export */   ServerVersionResponse: () => (/* binding */ ServerVersionResponse),\n/* harmony export */   StopWfRunRequest: () => (/* binding */ StopWfRunRequest),\n/* harmony export */   TaskDefIdList: () => (/* binding */ TaskDefIdList),\n/* harmony export */   TaskDefMetrics: () => (/* binding */ TaskDefMetrics),\n/* harmony export */   TaskDefMetricsQueryRequest: () => (/* binding */ TaskDefMetricsQueryRequest),\n/* harmony export */   TaskRunIdList: () => (/* binding */ TaskRunIdList),\n/* harmony export */   TaskRunList: () => (/* binding */ TaskRunList),\n/* harmony export */   TaskWorkerHeartBeatRequest: () => (/* binding */ TaskWorkerHeartBeatRequest),\n/* harmony export */   UserTaskDefIdList: () => (/* binding */ UserTaskDefIdList),\n/* harmony export */   UserTaskRunIdList: () => (/* binding */ UserTaskRunIdList),\n/* harmony export */   UserTaskRunList: () => (/* binding */ UserTaskRunList),\n/* harmony export */   VariableIdList: () => (/* binding */ VariableIdList),\n/* harmony export */   VariableList: () => (/* binding */ VariableList),\n/* harmony export */   VariableMatch: () => (/* binding */ VariableMatch),\n/* harmony export */   WfRunIdList: () => (/* binding */ WfRunIdList),\n/* harmony export */   WfSpecIdList: () => (/* binding */ WfSpecIdList),\n/* harmony export */   WfSpecMetrics: () => (/* binding */ WfSpecMetrics),\n/* harmony export */   WfSpecMetricsQueryRequest: () => (/* binding */ WfSpecMetricsQueryRequest),\n/* harmony export */   allowedUpdateTypeFromJSON: () => (/* binding */ allowedUpdateTypeFromJSON),\n/* harmony export */   allowedUpdateTypeToJSON: () => (/* binding */ allowedUpdateTypeToJSON),\n/* harmony export */   allowedUpdateTypeToNumber: () => (/* binding */ allowedUpdateTypeToNumber),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   searchNodeRunRequest_NodeTypeFromJSON: () => (/* binding */ searchNodeRunRequest_NodeTypeFromJSON),\n/* harmony export */   searchNodeRunRequest_NodeTypeToJSON: () => (/* binding */ searchNodeRunRequest_NodeTypeToJSON),\n/* harmony export */   searchNodeRunRequest_NodeTypeToNumber: () => (/* binding */ searchNodeRunRequest_NodeTypeToNumber)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"long\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _acls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acls */ \"(api)/./littlehorse-public-api/acls.ts\");\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _common_wfspec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common_wfspec */ \"(api)/./littlehorse-public-api/common_wfspec.ts\");\n/* harmony import */ var _external_event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./external_event */ \"(api)/./littlehorse-public-api/external_event.ts\");\n/* harmony import */ var _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./google/protobuf/empty */ \"(api)/./littlehorse-public-api/google/protobuf/empty.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _node_run__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node_run */ \"(api)/./littlehorse-public-api/node_run.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* harmony import */ var _task_def__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./task_def */ \"(api)/./littlehorse-public-api/task_def.ts\");\n/* harmony import */ var _task_run__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./task_run */ \"(api)/./littlehorse-public-api/task_run.ts\");\n/* harmony import */ var _user_tasks__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./user_tasks */ \"(api)/./littlehorse-public-api/user_tasks.ts\");\n/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./variable */ \"(api)/./littlehorse-public-api/variable.ts\");\n/* harmony import */ var _wf_run__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./wf_run */ \"(api)/./littlehorse-public-api/wf_run.ts\");\n/* harmony import */ var _wf_spec__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./wf_spec */ \"(api)/./littlehorse-public-api/wf_spec.ts\");\n/* harmony import */ var _workflow_event__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./workflow_event */ \"(api)/./littlehorse-public-api/workflow_event.ts\");\n/* eslint-disable */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst protobufPackage = \"littlehorse\";\nvar AllowedUpdateType;\n(function(AllowedUpdateType) {\n    /**\n   * ALL_UPDATES - Allows any update: both minor (revsion) changes and breaking (majorVersion) changes\n   * are accepted\n   */ AllowedUpdateType[\"ALL_UPDATES\"] = \"ALL_UPDATES\";\n    /**\n   * MINOR_REVISION_UPDATES - Allows only backwards-compatible changes that do not change the required input variables\n   * or the searchable variables in the WfSpec.\n   */ AllowedUpdateType[\"MINOR_REVISION_UPDATES\"] = \"MINOR_REVISION_UPDATES\";\n    /** NO_UPDATES - Rejects any changes to the WfSpec. */ AllowedUpdateType[\"NO_UPDATES\"] = \"NO_UPDATES\";\n    AllowedUpdateType[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(AllowedUpdateType || (AllowedUpdateType = {}));\nfunction allowedUpdateTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ALL_UPDATES\":\n            return \"ALL_UPDATES\";\n        case 1:\n        case \"MINOR_REVISION_UPDATES\":\n            return \"MINOR_REVISION_UPDATES\";\n        case 2:\n        case \"NO_UPDATES\":\n            return \"NO_UPDATES\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction allowedUpdateTypeToJSON(object) {\n    switch(object){\n        case \"ALL_UPDATES\":\n            return \"ALL_UPDATES\";\n        case \"MINOR_REVISION_UPDATES\":\n            return \"MINOR_REVISION_UPDATES\";\n        case \"NO_UPDATES\":\n            return \"NO_UPDATES\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction allowedUpdateTypeToNumber(object) {\n    switch(object){\n        case \"ALL_UPDATES\":\n            return 0;\n        case \"MINOR_REVISION_UPDATES\":\n            return 1;\n        case \"NO_UPDATES\":\n            return 2;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar SearchNodeRunRequest_NodeType;\n(function(SearchNodeRunRequest_NodeType) {\n    /** TASK - TASK node schedules a TaskRun */ SearchNodeRunRequest_NodeType[\"TASK\"] = \"TASK\";\n    /** EXTERNAL_EVENT - EXTERNAL_EVENT blocks the ThreadRun until a specified ExternalEvent arrives */ SearchNodeRunRequest_NodeType[\"EXTERNAL_EVENT\"] = \"EXTERNAL_EVENT\";\n    /** ENTRYPOINT - ENTRYPOINT kicks off a ThreadRun */ SearchNodeRunRequest_NodeType[\"ENTRYPOINT\"] = \"ENTRYPOINT\";\n    /** EXIT - EXIT completes a ThreadRun */ SearchNodeRunRequest_NodeType[\"EXIT\"] = \"EXIT\";\n    /** START_THREAD - START_THREAD creates a Child ThreadRun */ SearchNodeRunRequest_NodeType[\"START_THREAD\"] = \"START_THREAD\";\n    /** WAIT_THREADS - WAIT_THREADS waits for one or more child ThreadRuns to complete */ SearchNodeRunRequest_NodeType[\"WAIT_THREADS\"] = \"WAIT_THREADS\";\n    /** SLEEP - SLEEP makes the ThreadRun sleep for a specified time */ SearchNodeRunRequest_NodeType[\"SLEEP\"] = \"SLEEP\";\n    /** USER_TASK - USER_TASK creates a UserTaskRun and blocks until the UserTaskRun is completed. */ SearchNodeRunRequest_NodeType[\"USER_TASK\"] = \"USER_TASK\";\n    /** START_MULTIPLE_THREADS - START_MULTIPLE_THREADS iterates over a list and starts a Child Thread for each item */ SearchNodeRunRequest_NodeType[\"START_MULTIPLE_THREADS\"] = \"START_MULTIPLE_THREADS\";\n    SearchNodeRunRequest_NodeType[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(SearchNodeRunRequest_NodeType || (SearchNodeRunRequest_NodeType = {}));\nfunction searchNodeRunRequest_NodeTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"TASK\":\n            return \"TASK\";\n        case 1:\n        case \"EXTERNAL_EVENT\":\n            return \"EXTERNAL_EVENT\";\n        case 2:\n        case \"ENTRYPOINT\":\n            return \"ENTRYPOINT\";\n        case 3:\n        case \"EXIT\":\n            return \"EXIT\";\n        case 4:\n        case \"START_THREAD\":\n            return \"START_THREAD\";\n        case 5:\n        case \"WAIT_THREADS\":\n            return \"WAIT_THREADS\";\n        case 6:\n        case \"SLEEP\":\n            return \"SLEEP\";\n        case 7:\n        case \"USER_TASK\":\n            return \"USER_TASK\";\n        case 8:\n        case \"START_MULTIPLE_THREADS\":\n            return \"START_MULTIPLE_THREADS\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction searchNodeRunRequest_NodeTypeToJSON(object) {\n    switch(object){\n        case \"TASK\":\n            return \"TASK\";\n        case \"EXTERNAL_EVENT\":\n            return \"EXTERNAL_EVENT\";\n        case \"ENTRYPOINT\":\n            return \"ENTRYPOINT\";\n        case \"EXIT\":\n            return \"EXIT\";\n        case \"START_THREAD\":\n            return \"START_THREAD\";\n        case \"WAIT_THREADS\":\n            return \"WAIT_THREADS\";\n        case \"SLEEP\":\n            return \"SLEEP\";\n        case \"USER_TASK\":\n            return \"USER_TASK\";\n        case \"START_MULTIPLE_THREADS\":\n            return \"START_MULTIPLE_THREADS\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction searchNodeRunRequest_NodeTypeToNumber(object) {\n    switch(object){\n        case \"TASK\":\n            return 0;\n        case \"EXTERNAL_EVENT\":\n            return 1;\n        case \"ENTRYPOINT\":\n            return 2;\n        case \"EXIT\":\n            return 3;\n        case \"START_THREAD\":\n            return 4;\n        case \"WAIT_THREADS\":\n            return 5;\n        case \"SLEEP\":\n            return 6;\n        case \"USER_TASK\":\n            return 7;\n        case \"START_MULTIPLE_THREADS\":\n            return 8;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nfunction createBaseGetLatestUserTaskDefRequest() {\n    return {\n        name: \"\"\n    };\n}\nconst GetLatestUserTaskDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetLatestUserTaskDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        return obj;\n    },\n    create (base) {\n        return GetLatestUserTaskDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseGetLatestUserTaskDefRequest();\n        message.name = object.name ?? \"\";\n        return message;\n    }\n};\nfunction createBasePutWfSpecRequest() {\n    return {\n        name: \"\",\n        threadSpecs: {},\n        entrypointThreadName: \"\",\n        retentionPolicy: undefined,\n        parentWfSpec: undefined,\n        allowedUpdates: \"ALL_UPDATES\"\n    };\n}\nconst PutWfSpecRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        Object.entries(message.threadSpecs).forEach(([key, value])=>{\n            PutWfSpecRequest_ThreadSpecsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(42).fork()).ldelim();\n        });\n        if (message.entrypointThreadName !== \"\") {\n            writer.uint32(50).string(message.entrypointThreadName);\n        }\n        if (message.retentionPolicy !== undefined) {\n            _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WorkflowRetentionPolicy.encode(message.retentionPolicy, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.parentWfSpec !== undefined) {\n            _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec_ParentWfSpecReference.encode(message.parentWfSpec, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.allowedUpdates !== \"ALL_UPDATES\") {\n            writer.uint32(80).int32(allowedUpdateTypeToNumber(message.allowedUpdates));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutWfSpecRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    const entry5 = PutWfSpecRequest_ThreadSpecsEntry.decode(reader, reader.uint32());\n                    if (entry5.value !== undefined) {\n                        message.threadSpecs[entry5.key] = entry5.value;\n                    }\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.entrypointThreadName = reader.string();\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.retentionPolicy = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WorkflowRetentionPolicy.decode(reader, reader.uint32());\n                    continue;\n                case 9:\n                    if (tag !== 74) {\n                        break;\n                    }\n                    message.parentWfSpec = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec_ParentWfSpecReference.decode(reader, reader.uint32());\n                    continue;\n                case 10:\n                    if (tag !== 80) {\n                        break;\n                    }\n                    message.allowedUpdates = allowedUpdateTypeFromJSON(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            threadSpecs: isObject(object.threadSpecs) ? Object.entries(object.threadSpecs).reduce((acc, [key, value])=>{\n                acc[key] = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            entrypointThreadName: isSet(object.entrypointThreadName) ? globalThis.String(object.entrypointThreadName) : \"\",\n            retentionPolicy: isSet(object.retentionPolicy) ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WorkflowRetentionPolicy.fromJSON(object.retentionPolicy) : undefined,\n            parentWfSpec: isSet(object.parentWfSpec) ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec_ParentWfSpecReference.fromJSON(object.parentWfSpec) : undefined,\n            allowedUpdates: isSet(object.allowedUpdates) ? allowedUpdateTypeFromJSON(object.allowedUpdates) : \"ALL_UPDATES\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.threadSpecs) {\n            const entries = Object.entries(message.threadSpecs);\n            if (entries.length > 0) {\n                obj.threadSpecs = {};\n                entries.forEach(([k, v])=>{\n                    obj.threadSpecs[k] = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.toJSON(v);\n                });\n            }\n        }\n        if (message.entrypointThreadName !== \"\") {\n            obj.entrypointThreadName = message.entrypointThreadName;\n        }\n        if (message.retentionPolicy !== undefined) {\n            obj.retentionPolicy = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WorkflowRetentionPolicy.toJSON(message.retentionPolicy);\n        }\n        if (message.parentWfSpec !== undefined) {\n            obj.parentWfSpec = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec_ParentWfSpecReference.toJSON(message.parentWfSpec);\n        }\n        if (message.allowedUpdates !== \"ALL_UPDATES\") {\n            obj.allowedUpdates = allowedUpdateTypeToJSON(message.allowedUpdates);\n        }\n        return obj;\n    },\n    create (base) {\n        return PutWfSpecRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutWfSpecRequest();\n        message.name = object.name ?? \"\";\n        message.threadSpecs = Object.entries(object.threadSpecs ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.entrypointThreadName = object.entrypointThreadName ?? \"\";\n        message.retentionPolicy = object.retentionPolicy !== undefined && object.retentionPolicy !== null ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WorkflowRetentionPolicy.fromPartial(object.retentionPolicy) : undefined;\n        message.parentWfSpec = object.parentWfSpec !== undefined && object.parentWfSpec !== null ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec_ParentWfSpecReference.fromPartial(object.parentWfSpec) : undefined;\n        message.allowedUpdates = object.allowedUpdates ?? \"ALL_UPDATES\";\n        return message;\n    }\n};\nfunction createBasePutWfSpecRequest_ThreadSpecsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst PutWfSpecRequest_ThreadSpecsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutWfSpecRequest_ThreadSpecsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return PutWfSpecRequest_ThreadSpecsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutWfSpecRequest_ThreadSpecsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.ThreadSpec.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBasePutTaskDefRequest() {\n    return {\n        name: \"\",\n        inputVars: []\n    };\n}\nconst PutTaskDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        for (const v of message.inputVars){\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_4__.VariableDef.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutTaskDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.inputVars.push(_common_wfspec__WEBPACK_IMPORTED_MODULE_4__.VariableDef.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            inputVars: globalThis.Array.isArray(object?.inputVars) ? object.inputVars.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_4__.VariableDef.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.inputVars?.length) {\n            obj.inputVars = message.inputVars.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_4__.VariableDef.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return PutTaskDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutTaskDefRequest();\n        message.name = object.name ?? \"\";\n        message.inputVars = object.inputVars?.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_4__.VariableDef.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBasePutWorkflowEventDefRequest() {\n    return {\n        name: \"\",\n        type: _common_enums__WEBPACK_IMPORTED_MODULE_3__.VariableType.JSON_OBJ\n    };\n}\nconst PutWorkflowEventDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.VariableType.JSON_OBJ) {\n            writer.uint32(16).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.variableTypeToNumber)(message.type));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutWorkflowEventDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.variableTypeFromJSON)(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            type: isSet(object.type) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.variableTypeFromJSON)(object.type) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.VariableType.JSON_OBJ\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.VariableType.JSON_OBJ) {\n            obj.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.variableTypeToJSON)(message.type);\n        }\n        return obj;\n    },\n    create (base) {\n        return PutWorkflowEventDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutWorkflowEventDefRequest();\n        message.name = object.name ?? \"\";\n        message.type = object.type ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.VariableType.JSON_OBJ;\n        return message;\n    }\n};\nfunction createBasePutUserTaskDefRequest() {\n    return {\n        name: \"\",\n        fields: [],\n        description: undefined\n    };\n}\nconst PutUserTaskDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        for (const v of message.fields){\n            _user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskField.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.description !== undefined) {\n            writer.uint32(26).string(message.description);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutUserTaskDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.fields.push(_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskField.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.description = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e)=>_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskField.fromJSON(e)) : [],\n            description: isSet(object.description) ? globalThis.String(object.description) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.fields?.length) {\n            obj.fields = message.fields.map((e)=>_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskField.toJSON(e));\n        }\n        if (message.description !== undefined) {\n            obj.description = message.description;\n        }\n        return obj;\n    },\n    create (base) {\n        return PutUserTaskDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutUserTaskDefRequest();\n        message.name = object.name ?? \"\";\n        message.fields = object.fields?.map((e)=>_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskField.fromPartial(e)) || [];\n        message.description = object.description ?? undefined;\n        return message;\n    }\n};\nfunction createBasePutExternalEventDefRequest() {\n    return {\n        name: \"\",\n        retentionPolicy: undefined\n    };\n}\nconst PutExternalEventDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.retentionPolicy !== undefined) {\n            _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEventRetentionPolicy.encode(message.retentionPolicy, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutExternalEventDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.retentionPolicy = _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEventRetentionPolicy.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            retentionPolicy: isSet(object.retentionPolicy) ? _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEventRetentionPolicy.fromJSON(object.retentionPolicy) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.retentionPolicy !== undefined) {\n            obj.retentionPolicy = _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEventRetentionPolicy.toJSON(message.retentionPolicy);\n        }\n        return obj;\n    },\n    create (base) {\n        return PutExternalEventDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutExternalEventDefRequest();\n        message.name = object.name ?? \"\";\n        message.retentionPolicy = object.retentionPolicy !== undefined && object.retentionPolicy !== null ? _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEventRetentionPolicy.fromPartial(object.retentionPolicy) : undefined;\n        return message;\n    }\n};\nfunction createBasePutExternalEventRequest() {\n    return {\n        wfRunId: undefined,\n        externalEventDefId: undefined,\n        guid: undefined,\n        content: undefined,\n        threadRunNumber: undefined,\n        nodeRunPosition: undefined\n    };\n}\nconst PutExternalEventRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.externalEventDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.encode(message.externalEventDefId, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.guid !== undefined) {\n            writer.uint32(26).string(message.guid);\n        }\n        if (message.content !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.encode(message.content, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.threadRunNumber !== undefined) {\n            writer.uint32(48).int32(message.threadRunNumber);\n        }\n        if (message.nodeRunPosition !== undefined) {\n            writer.uint32(56).int32(message.nodeRunPosition);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePutExternalEventRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.guid = reader.string();\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.content = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n                case 7:\n                    if (tag !== 56) {\n                        break;\n                    }\n                    message.nodeRunPosition = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined,\n            externalEventDefId: isSet(object.externalEventDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.fromJSON(object.externalEventDefId) : undefined,\n            guid: isSet(object.guid) ? globalThis.String(object.guid) : undefined,\n            content: isSet(object.content) ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromJSON(object.content) : undefined,\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : undefined,\n            nodeRunPosition: isSet(object.nodeRunPosition) ? globalThis.Number(object.nodeRunPosition) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.externalEventDefId !== undefined) {\n            obj.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.toJSON(message.externalEventDefId);\n        }\n        if (message.guid !== undefined) {\n            obj.guid = message.guid;\n        }\n        if (message.content !== undefined) {\n            obj.content = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.toJSON(message.content);\n        }\n        if (message.threadRunNumber !== undefined) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        if (message.nodeRunPosition !== undefined) {\n            obj.nodeRunPosition = Math.round(message.nodeRunPosition);\n        }\n        return obj;\n    },\n    create (base) {\n        return PutExternalEventRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePutExternalEventRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.externalEventDefId = object.externalEventDefId !== undefined && object.externalEventDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.fromPartial(object.externalEventDefId) : undefined;\n        message.guid = object.guid ?? undefined;\n        message.content = object.content !== undefined && object.content !== null ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromPartial(object.content) : undefined;\n        message.threadRunNumber = object.threadRunNumber ?? undefined;\n        message.nodeRunPosition = object.nodeRunPosition ?? undefined;\n        return message;\n    }\n};\nfunction createBaseDeleteExternalEventRequest() {\n    return {\n        id: undefined\n    };\n}\nconst DeleteExternalEventRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteExternalEventRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.fromJSON(object.id) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.toJSON(message.id);\n        }\n        return obj;\n    },\n    create (base) {\n        return DeleteExternalEventRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDeleteExternalEventRequest();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.fromPartial(object.id) : undefined;\n        return message;\n    }\n};\nfunction createBaseDeleteWfRunRequest() {\n    return {\n        id: undefined\n    };\n}\nconst DeleteWfRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteWfRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.id) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.id);\n        }\n        return obj;\n    },\n    create (base) {\n        return DeleteWfRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDeleteWfRunRequest();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.id) : undefined;\n        return message;\n    }\n};\nfunction createBaseDeleteTaskDefRequest() {\n    return {\n        id: undefined\n    };\n}\nconst DeleteTaskDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteTaskDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(object.id) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(message.id);\n        }\n        return obj;\n    },\n    create (base) {\n        return DeleteTaskDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDeleteTaskDefRequest();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(object.id) : undefined;\n        return message;\n    }\n};\nfunction createBaseDeleteUserTaskDefRequest() {\n    return {\n        id: undefined\n    };\n}\nconst DeleteUserTaskDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteUserTaskDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.fromJSON(object.id) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.toJSON(message.id);\n        }\n        return obj;\n    },\n    create (base) {\n        return DeleteUserTaskDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDeleteUserTaskDefRequest();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.fromPartial(object.id) : undefined;\n        return message;\n    }\n};\nfunction createBaseDeleteWfSpecRequest() {\n    return {\n        id: undefined\n    };\n}\nconst DeleteWfSpecRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteWfSpecRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromJSON(object.id) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.toJSON(message.id);\n        }\n        return obj;\n    },\n    create (base) {\n        return DeleteWfSpecRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDeleteWfSpecRequest();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromPartial(object.id) : undefined;\n        return message;\n    }\n};\nfunction createBaseDeleteExternalEventDefRequest() {\n    return {\n        id: undefined\n    };\n}\nconst DeleteExternalEventDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteExternalEventDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.fromJSON(object.id) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.toJSON(message.id);\n        }\n        return obj;\n    },\n    create (base) {\n        return DeleteExternalEventDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDeleteExternalEventDefRequest();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.fromPartial(object.id) : undefined;\n        return message;\n    }\n};\nfunction createBaseRunWfRequest() {\n    return {\n        wfSpecName: \"\",\n        majorVersion: undefined,\n        revision: undefined,\n        variables: {},\n        id: undefined,\n        parentWfRunId: undefined\n    };\n}\nconst RunWfRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfSpecName !== \"\") {\n            writer.uint32(10).string(message.wfSpecName);\n        }\n        if (message.majorVersion !== undefined) {\n            writer.uint32(16).int32(message.majorVersion);\n        }\n        if (message.revision !== undefined) {\n            writer.uint32(24).int32(message.revision);\n        }\n        Object.entries(message.variables).forEach(([key, value])=>{\n            RunWfRequest_VariablesEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(34).fork()).ldelim();\n        });\n        if (message.id !== undefined) {\n            writer.uint32(42).string(message.id);\n        }\n        if (message.parentWfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.parentWfRunId, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRunWfRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfSpecName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.majorVersion = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.revision = reader.int32();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    const entry4 = RunWfRequest_VariablesEntry.decode(reader, reader.uint32());\n                    if (entry4.value !== undefined) {\n                        message.variables[entry4.key] = entry4.value;\n                    }\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.id = reader.string();\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.parentWfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfSpecName: isSet(object.wfSpecName) ? globalThis.String(object.wfSpecName) : \"\",\n            majorVersion: isSet(object.majorVersion) ? globalThis.Number(object.majorVersion) : undefined,\n            revision: isSet(object.revision) ? globalThis.Number(object.revision) : undefined,\n            variables: isObject(object.variables) ? Object.entries(object.variables).reduce((acc, [key, value])=>{\n                acc[key] = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            id: isSet(object.id) ? globalThis.String(object.id) : undefined,\n            parentWfRunId: isSet(object.parentWfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.parentWfRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfSpecName !== \"\") {\n            obj.wfSpecName = message.wfSpecName;\n        }\n        if (message.majorVersion !== undefined) {\n            obj.majorVersion = Math.round(message.majorVersion);\n        }\n        if (message.revision !== undefined) {\n            obj.revision = Math.round(message.revision);\n        }\n        if (message.variables) {\n            const entries = Object.entries(message.variables);\n            if (entries.length > 0) {\n                obj.variables = {};\n                entries.forEach(([k, v])=>{\n                    obj.variables[k] = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.toJSON(v);\n                });\n            }\n        }\n        if (message.id !== undefined) {\n            obj.id = message.id;\n        }\n        if (message.parentWfRunId !== undefined) {\n            obj.parentWfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.parentWfRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return RunWfRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseRunWfRequest();\n        message.wfSpecName = object.wfSpecName ?? \"\";\n        message.majorVersion = object.majorVersion ?? undefined;\n        message.revision = object.revision ?? undefined;\n        message.variables = Object.entries(object.variables ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.id = object.id ?? undefined;\n        message.parentWfRunId = object.parentWfRunId !== undefined && object.parentWfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.parentWfRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseRunWfRequest_VariablesEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst RunWfRequest_VariablesEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRunWfRequest_VariablesEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return RunWfRequest_VariablesEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseRunWfRequest_VariablesEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseVariableMatch() {\n    return {\n        varName: \"\",\n        value: undefined\n    };\n}\nconst VariableMatch = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.varName !== \"\") {\n            writer.uint32(10).string(message.varName);\n        }\n        if (message.value !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableMatch();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.varName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            varName: isSet(object.varName) ? globalThis.String(object.varName) : \"\",\n            value: isSet(object.value) ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.varName !== \"\") {\n            obj.varName = message.varName;\n        }\n        if (message.value !== undefined) {\n            obj.value = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableMatch.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableMatch();\n        message.varName = object.varName ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseAwaitWorkflowEventRequest() {\n    return {\n        wfRunId: undefined,\n        eventDefId: undefined\n    };\n}\nconst AwaitWorkflowEventRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.eventDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WorkflowEventDefId.encode(message.eventDefId, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAwaitWorkflowEventRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.eventDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WorkflowEventDefId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined,\n            eventDefId: isSet(object.eventDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WorkflowEventDefId.fromJSON(object.eventDefId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.eventDefId !== undefined) {\n            obj.eventDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WorkflowEventDefId.toJSON(message.eventDefId);\n        }\n        return obj;\n    },\n    create (base) {\n        return AwaitWorkflowEventRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseAwaitWorkflowEventRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.eventDefId = object.eventDefId !== undefined && object.eventDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WorkflowEventDefId.fromPartial(object.eventDefId) : undefined;\n        return message;\n    }\n};\nfunction createBaseSearchWfRunRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        wfSpecName: \"\",\n        wfSpecMajorVersion: undefined,\n        wfSpecRevision: undefined,\n        status: undefined,\n        earliestStart: undefined,\n        latestStart: undefined,\n        variableFilters: []\n    };\n}\nconst SearchWfRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.wfSpecName !== \"\") {\n            writer.uint32(26).string(message.wfSpecName);\n        }\n        if (message.wfSpecMajorVersion !== undefined) {\n            writer.uint32(32).int32(message.wfSpecMajorVersion);\n        }\n        if (message.wfSpecRevision !== undefined) {\n            writer.uint32(40).int32(message.wfSpecRevision);\n        }\n        if (message.status !== undefined) {\n            writer.uint32(48).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusToNumber)(message.status));\n        }\n        if (message.earliestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.earliestStart), writer.uint32(58).fork()).ldelim();\n        }\n        if (message.latestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.latestStart), writer.uint32(66).fork()).ldelim();\n        }\n        for (const v of message.variableFilters){\n            VariableMatch.encode(v, writer.uint32(74).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchWfRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.wfSpecName = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.wfSpecMajorVersion = reader.int32();\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.wfSpecRevision = reader.int32();\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusFromJSON)(reader.int32());\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.earliestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.latestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 9:\n                    if (tag !== 74) {\n                        break;\n                    }\n                    message.variableFilters.push(VariableMatch.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            wfSpecName: isSet(object.wfSpecName) ? globalThis.String(object.wfSpecName) : \"\",\n            wfSpecMajorVersion: isSet(object.wfSpecMajorVersion) ? globalThis.Number(object.wfSpecMajorVersion) : undefined,\n            wfSpecRevision: isSet(object.wfSpecRevision) ? globalThis.Number(object.wfSpecRevision) : undefined,\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusFromJSON)(object.status) : undefined,\n            earliestStart: isSet(object.earliestStart) ? globalThis.String(object.earliestStart) : undefined,\n            latestStart: isSet(object.latestStart) ? globalThis.String(object.latestStart) : undefined,\n            variableFilters: globalThis.Array.isArray(object?.variableFilters) ? object.variableFilters.map((e)=>VariableMatch.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.wfSpecName !== \"\") {\n            obj.wfSpecName = message.wfSpecName;\n        }\n        if (message.wfSpecMajorVersion !== undefined) {\n            obj.wfSpecMajorVersion = Math.round(message.wfSpecMajorVersion);\n        }\n        if (message.wfSpecRevision !== undefined) {\n            obj.wfSpecRevision = Math.round(message.wfSpecRevision);\n        }\n        if (message.status !== undefined) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusToJSON)(message.status);\n        }\n        if (message.earliestStart !== undefined) {\n            obj.earliestStart = message.earliestStart;\n        }\n        if (message.latestStart !== undefined) {\n            obj.latestStart = message.latestStart;\n        }\n        if (message.variableFilters?.length) {\n            obj.variableFilters = message.variableFilters.map((e)=>VariableMatch.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchWfRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchWfRunRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.wfSpecName = object.wfSpecName ?? \"\";\n        message.wfSpecMajorVersion = object.wfSpecMajorVersion ?? undefined;\n        message.wfSpecRevision = object.wfSpecRevision ?? undefined;\n        message.status = object.status ?? undefined;\n        message.earliestStart = object.earliestStart ?? undefined;\n        message.latestStart = object.latestStart ?? undefined;\n        message.variableFilters = object.variableFilters?.map((e)=>VariableMatch.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseWfRunIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst WfRunIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfRunIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfRunIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfRunIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchTaskRunRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        taskDefName: \"\",\n        status: undefined,\n        earliestStart: undefined,\n        latestStart: undefined\n    };\n}\nconst SearchTaskRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.taskDefName !== \"\") {\n            writer.uint32(26).string(message.taskDefName);\n        }\n        if (message.status !== undefined) {\n            writer.uint32(32).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusToNumber)(message.status));\n        }\n        if (message.earliestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.earliestStart), writer.uint32(42).fork()).ldelim();\n        }\n        if (message.latestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.latestStart), writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchTaskRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.taskDefName = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusFromJSON)(reader.int32());\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.earliestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.latestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            taskDefName: isSet(object.taskDefName) ? globalThis.String(object.taskDefName) : \"\",\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusFromJSON)(object.status) : undefined,\n            earliestStart: isSet(object.earliestStart) ? globalThis.String(object.earliestStart) : undefined,\n            latestStart: isSet(object.latestStart) ? globalThis.String(object.latestStart) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.taskDefName !== \"\") {\n            obj.taskDefName = message.taskDefName;\n        }\n        if (message.status !== undefined) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusToJSON)(message.status);\n        }\n        if (message.earliestStart !== undefined) {\n            obj.earliestStart = message.earliestStart;\n        }\n        if (message.latestStart !== undefined) {\n            obj.latestStart = message.latestStart;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchTaskRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchTaskRunRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.taskDefName = object.taskDefName ?? \"\";\n        message.status = object.status ?? undefined;\n        message.earliestStart = object.earliestStart ?? undefined;\n        message.latestStart = object.latestStart ?? undefined;\n        return message;\n    }\n};\nfunction createBaseTaskRunIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst TaskRunIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskRunIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskRunIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskRunIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchNodeRunRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        earliestStart: undefined,\n        latestStart: undefined,\n        nodeType: \"TASK\",\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_3__.LHStatus.STARTING\n    };\n}\nconst SearchNodeRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.earliestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.earliestStart), writer.uint32(26).fork()).ldelim();\n        }\n        if (message.latestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.latestStart), writer.uint32(34).fork()).ldelim();\n        }\n        if (message.nodeType !== \"TASK\") {\n            writer.uint32(40).int32(searchNodeRunRequest_NodeTypeToNumber(message.nodeType));\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.LHStatus.STARTING) {\n            writer.uint32(48).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusToNumber)(message.status));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchNodeRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.earliestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.latestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.nodeType = searchNodeRunRequest_NodeTypeFromJSON(reader.int32());\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusFromJSON)(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            earliestStart: isSet(object.earliestStart) ? globalThis.String(object.earliestStart) : undefined,\n            latestStart: isSet(object.latestStart) ? globalThis.String(object.latestStart) : undefined,\n            nodeType: isSet(object.nodeType) ? searchNodeRunRequest_NodeTypeFromJSON(object.nodeType) : \"TASK\",\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.LHStatus.STARTING\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.earliestStart !== undefined) {\n            obj.earliestStart = message.earliestStart;\n        }\n        if (message.latestStart !== undefined) {\n            obj.latestStart = message.latestStart;\n        }\n        if (message.nodeType !== \"TASK\") {\n            obj.nodeType = searchNodeRunRequest_NodeTypeToJSON(message.nodeType);\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.LHStatus.STARTING) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.lHStatusToJSON)(message.status);\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchNodeRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchNodeRunRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.earliestStart = object.earliestStart ?? undefined;\n        message.latestStart = object.latestStart ?? undefined;\n        message.nodeType = object.nodeType ?? \"TASK\";\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.LHStatus.STARTING;\n        return message;\n    }\n};\nfunction createBaseNodeRunIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst NodeRunIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.NodeRunId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNodeRunIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.NodeRunId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.NodeRunId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.NodeRunId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return NodeRunIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseNodeRunIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.NodeRunId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchUserTaskRunRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        status: undefined,\n        userTaskDefName: undefined,\n        userId: undefined,\n        userGroup: undefined,\n        earliestStart: undefined,\n        latestStart: undefined\n    };\n}\nconst SearchUserTaskRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.status !== undefined) {\n            writer.uint32(24).int32((0,_user_tasks__WEBPACK_IMPORTED_MODULE_12__.userTaskRunStatusToNumber)(message.status));\n        }\n        if (message.userTaskDefName !== undefined) {\n            writer.uint32(34).string(message.userTaskDefName);\n        }\n        if (message.userId !== undefined) {\n            writer.uint32(42).string(message.userId);\n        }\n        if (message.userGroup !== undefined) {\n            writer.uint32(50).string(message.userGroup);\n        }\n        if (message.earliestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.earliestStart), writer.uint32(58).fork()).ldelim();\n        }\n        if (message.latestStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.latestStart), writer.uint32(66).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchUserTaskRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.status = (0,_user_tasks__WEBPACK_IMPORTED_MODULE_12__.userTaskRunStatusFromJSON)(reader.int32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.userTaskDefName = reader.string();\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.userId = reader.string();\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.userGroup = reader.string();\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.earliestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.latestStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            status: isSet(object.status) ? (0,_user_tasks__WEBPACK_IMPORTED_MODULE_12__.userTaskRunStatusFromJSON)(object.status) : undefined,\n            userTaskDefName: isSet(object.userTaskDefName) ? globalThis.String(object.userTaskDefName) : undefined,\n            userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,\n            userGroup: isSet(object.userGroup) ? globalThis.String(object.userGroup) : undefined,\n            earliestStart: isSet(object.earliestStart) ? globalThis.String(object.earliestStart) : undefined,\n            latestStart: isSet(object.latestStart) ? globalThis.String(object.latestStart) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.status !== undefined) {\n            obj.status = (0,_user_tasks__WEBPACK_IMPORTED_MODULE_12__.userTaskRunStatusToJSON)(message.status);\n        }\n        if (message.userTaskDefName !== undefined) {\n            obj.userTaskDefName = message.userTaskDefName;\n        }\n        if (message.userId !== undefined) {\n            obj.userId = message.userId;\n        }\n        if (message.userGroup !== undefined) {\n            obj.userGroup = message.userGroup;\n        }\n        if (message.earliestStart !== undefined) {\n            obj.earliestStart = message.earliestStart;\n        }\n        if (message.latestStart !== undefined) {\n            obj.latestStart = message.latestStart;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchUserTaskRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchUserTaskRunRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.status = object.status ?? undefined;\n        message.userTaskDefName = object.userTaskDefName ?? undefined;\n        message.userId = object.userId ?? undefined;\n        message.userGroup = object.userGroup ?? undefined;\n        message.earliestStart = object.earliestStart ?? undefined;\n        message.latestStart = object.latestStart ?? undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskRunIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst UserTaskRunIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskRunId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskRunIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskRunId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskRunId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskRunId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskRunIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskRunIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskRunId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchVariableRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        value: undefined,\n        wfSpecMajorVersion: undefined,\n        wfSpecRevision: undefined,\n        varName: \"\",\n        wfSpecName: \"\"\n    };\n}\nconst SearchVariableRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.value !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.encode(message.value, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.wfSpecMajorVersion !== undefined) {\n            writer.uint32(32).int32(message.wfSpecMajorVersion);\n        }\n        if (message.wfSpecRevision !== undefined) {\n            writer.uint32(40).int32(message.wfSpecRevision);\n        }\n        if (message.varName !== \"\") {\n            writer.uint32(50).string(message.varName);\n        }\n        if (message.wfSpecName !== \"\") {\n            writer.uint32(58).string(message.wfSpecName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchVariableRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.value = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.wfSpecMajorVersion = reader.int32();\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.wfSpecRevision = reader.int32();\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.varName = reader.string();\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.wfSpecName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            value: isSet(object.value) ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromJSON(object.value) : undefined,\n            wfSpecMajorVersion: isSet(object.wfSpecMajorVersion) ? globalThis.Number(object.wfSpecMajorVersion) : undefined,\n            wfSpecRevision: isSet(object.wfSpecRevision) ? globalThis.Number(object.wfSpecRevision) : undefined,\n            varName: isSet(object.varName) ? globalThis.String(object.varName) : \"\",\n            wfSpecName: isSet(object.wfSpecName) ? globalThis.String(object.wfSpecName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.value !== undefined) {\n            obj.value = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.toJSON(message.value);\n        }\n        if (message.wfSpecMajorVersion !== undefined) {\n            obj.wfSpecMajorVersion = Math.round(message.wfSpecMajorVersion);\n        }\n        if (message.wfSpecRevision !== undefined) {\n            obj.wfSpecRevision = Math.round(message.wfSpecRevision);\n        }\n        if (message.varName !== \"\") {\n            obj.varName = message.varName;\n        }\n        if (message.wfSpecName !== \"\") {\n            obj.wfSpecName = message.wfSpecName;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchVariableRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchVariableRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.value = object.value !== undefined && object.value !== null ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromPartial(object.value) : undefined;\n        message.wfSpecMajorVersion = object.wfSpecMajorVersion ?? undefined;\n        message.wfSpecRevision = object.wfSpecRevision ?? undefined;\n        message.varName = object.varName ?? \"\";\n        message.wfSpecName = object.wfSpecName ?? \"\";\n        return message;\n    }\n};\nfunction createBaseVariableIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst VariableIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.VariableId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.VariableId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.VariableId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.VariableId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.VariableId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchTaskDefRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        prefix: undefined\n    };\n}\nconst SearchTaskDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.prefix !== undefined) {\n            writer.uint32(26).string(message.prefix);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchTaskDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.prefix = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.prefix !== undefined) {\n            obj.prefix = message.prefix;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchTaskDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchTaskDefRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.prefix = object.prefix ?? undefined;\n        return message;\n    }\n};\nfunction createBaseTaskDefIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst TaskDefIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskDefIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskDefIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskDefIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchUserTaskDefRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        prefix: undefined,\n        name: undefined\n    };\n}\nconst SearchUserTaskDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.prefix !== undefined) {\n            writer.uint32(26).string(message.prefix);\n        }\n        if (message.name !== undefined) {\n            writer.uint32(34).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchUserTaskDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.prefix = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : undefined,\n            name: isSet(object.name) ? globalThis.String(object.name) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.prefix !== undefined) {\n            obj.prefix = message.prefix;\n        }\n        if (message.name !== undefined) {\n            obj.name = message.name;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchUserTaskDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchUserTaskDefRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.prefix = object.prefix ?? undefined;\n        message.name = object.name ?? undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskDefIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst UserTaskDefIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskDefIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskDefIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskDefIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchWfSpecRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        name: undefined,\n        prefix: undefined,\n        taskDefName: undefined\n    };\n}\nconst SearchWfSpecRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.name !== undefined) {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.prefix !== undefined) {\n            writer.uint32(34).string(message.prefix);\n        }\n        if (message.taskDefName !== undefined) {\n            writer.uint32(42).string(message.taskDefName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchWfSpecRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.prefix = reader.string();\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.taskDefName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            name: isSet(object.name) ? globalThis.String(object.name) : undefined,\n            prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : undefined,\n            taskDefName: isSet(object.taskDefName) ? globalThis.String(object.taskDefName) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.name !== undefined) {\n            obj.name = message.name;\n        }\n        if (message.prefix !== undefined) {\n            obj.prefix = message.prefix;\n        }\n        if (message.taskDefName !== undefined) {\n            obj.taskDefName = message.taskDefName;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchWfSpecRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchWfSpecRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.name = object.name ?? undefined;\n        message.prefix = object.prefix ?? undefined;\n        message.taskDefName = object.taskDefName ?? undefined;\n        return message;\n    }\n};\nfunction createBaseWfSpecIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst WfSpecIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpecIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpecIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpecIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchExternalEventDefRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        prefix: undefined\n    };\n}\nconst SearchExternalEventDefRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.prefix !== undefined) {\n            writer.uint32(26).string(message.prefix);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchExternalEventDefRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.prefix = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.prefix !== undefined) {\n            obj.prefix = message.prefix;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchExternalEventDefRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchExternalEventDefRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.prefix = object.prefix ?? undefined;\n        return message;\n    }\n};\nfunction createBaseExternalEventDefIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst ExternalEventDefIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventDefIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventDefIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventDefIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseSearchExternalEventRequest() {\n    return {\n        bookmark: undefined,\n        limit: undefined,\n        wfRunId: undefined,\n        externalEventDefNameAndStatus: undefined\n    };\n}\nconst SearchExternalEventRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.bookmark !== undefined) {\n            writer.uint32(10).bytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            writer.uint32(16).int32(message.limit);\n        }\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.externalEventDefNameAndStatus !== undefined) {\n            SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest.encode(message.externalEventDefNameAndStatus, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchExternalEventRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.limit = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.externalEventDefNameAndStatus = SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined,\n            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined,\n            externalEventDefNameAndStatus: isSet(object.externalEventDefNameAndStatus) ? SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest.fromJSON(object.externalEventDefNameAndStatus) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        if (message.limit !== undefined) {\n            obj.limit = Math.round(message.limit);\n        }\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.externalEventDefNameAndStatus !== undefined) {\n            obj.externalEventDefNameAndStatus = SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest.toJSON(message.externalEventDefNameAndStatus);\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchExternalEventRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchExternalEventRequest();\n        message.bookmark = object.bookmark ?? undefined;\n        message.limit = object.limit ?? undefined;\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.externalEventDefNameAndStatus = object.externalEventDefNameAndStatus !== undefined && object.externalEventDefNameAndStatus !== null ? SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest.fromPartial(object.externalEventDefNameAndStatus) : undefined;\n        return message;\n    }\n};\nfunction createBaseSearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest() {\n    return {\n        externalEventDefName: \"\",\n        isClaimed: undefined\n    };\n}\nconst SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.externalEventDefName !== \"\") {\n            writer.uint32(10).string(message.externalEventDefName);\n        }\n        if (message.isClaimed !== undefined) {\n            writer.uint32(16).bool(message.isClaimed);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.externalEventDefName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.isClaimed = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            externalEventDefName: isSet(object.externalEventDefName) ? globalThis.String(object.externalEventDefName) : \"\",\n            isClaimed: isSet(object.isClaimed) ? globalThis.Boolean(object.isClaimed) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.externalEventDefName !== \"\") {\n            obj.externalEventDefName = message.externalEventDefName;\n        }\n        if (message.isClaimed !== undefined) {\n            obj.isClaimed = message.isClaimed;\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchExternalEventRequest_ByExtEvtDefNameAndStatusRequest();\n        message.externalEventDefName = object.externalEventDefName ?? \"\";\n        message.isClaimed = object.isClaimed ?? undefined;\n        return message;\n    }\n};\nfunction createBaseExternalEventIdList() {\n    return {\n        results: [],\n        bookmark: undefined\n    };\n}\nconst ExternalEventIdList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.bookmark !== undefined) {\n            writer.uint32(18).bytes(message.bookmark);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventIdList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.bookmark = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.fromJSON(e)) : [],\n            bookmark: isSet(object.bookmark) ? bytesFromBase64(object.bookmark) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.toJSON(e));\n        }\n        if (message.bookmark !== undefined) {\n            obj.bookmark = base64FromBytes(message.bookmark);\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventIdList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventIdList();\n        message.results = object.results?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId.fromPartial(e)) || [];\n        message.bookmark = object.bookmark ?? undefined;\n        return message;\n    }\n};\nfunction createBaseListNodeRunsRequest() {\n    return {\n        wfRunId: undefined\n    };\n}\nconst ListNodeRunsRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListNodeRunsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return ListNodeRunsRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListNodeRunsRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseNodeRunList() {\n    return {\n        results: []\n    };\n}\nconst NodeRunList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _node_run__WEBPACK_IMPORTED_MODULE_8__.NodeRun.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNodeRunList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_node_run__WEBPACK_IMPORTED_MODULE_8__.NodeRun.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_node_run__WEBPACK_IMPORTED_MODULE_8__.NodeRun.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_node_run__WEBPACK_IMPORTED_MODULE_8__.NodeRun.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return NodeRunList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseNodeRunList();\n        message.results = object.results?.map((e)=>_node_run__WEBPACK_IMPORTED_MODULE_8__.NodeRun.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseListVariablesRequest() {\n    return {\n        wfRunId: undefined\n    };\n}\nconst ListVariablesRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListVariablesRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return ListVariablesRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListVariablesRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseVariableList() {\n    return {\n        results: []\n    };\n}\nconst VariableList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _variable__WEBPACK_IMPORTED_MODULE_13__.Variable.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_variable__WEBPACK_IMPORTED_MODULE_13__.Variable.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_variable__WEBPACK_IMPORTED_MODULE_13__.Variable.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_variable__WEBPACK_IMPORTED_MODULE_13__.Variable.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableList();\n        message.results = object.results?.map((e)=>_variable__WEBPACK_IMPORTED_MODULE_13__.Variable.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseListExternalEventsRequest() {\n    return {\n        wfRunId: undefined\n    };\n}\nconst ListExternalEventsRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListExternalEventsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return ListExternalEventsRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListExternalEventsRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseExternalEventList() {\n    return {\n        results: []\n    };\n}\nconst ExternalEventList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEvent.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEvent.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEvent.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEvent.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventList();\n        message.results = object.results?.map((e)=>_external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEvent.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseRegisterTaskWorkerRequest() {\n    return {\n        taskWorkerId: \"\",\n        taskDefId: undefined,\n        listenerName: \"\"\n    };\n}\nconst RegisterTaskWorkerRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.taskWorkerId !== \"\") {\n            writer.uint32(10).string(message.taskWorkerId);\n        }\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(message.taskDefId, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.listenerName !== \"\") {\n            writer.uint32(26).string(message.listenerName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRegisterTaskWorkerRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskWorkerId = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.listenerName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskWorkerId: isSet(object.taskWorkerId) ? globalThis.String(object.taskWorkerId) : \"\",\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            listenerName: isSet(object.listenerName) ? globalThis.String(object.listenerName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskWorkerId !== \"\") {\n            obj.taskWorkerId = message.taskWorkerId;\n        }\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.listenerName !== \"\") {\n            obj.listenerName = message.listenerName;\n        }\n        return obj;\n    },\n    create (base) {\n        return RegisterTaskWorkerRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseRegisterTaskWorkerRequest();\n        message.taskWorkerId = object.taskWorkerId ?? \"\";\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.listenerName = object.listenerName ?? \"\";\n        return message;\n    }\n};\nfunction createBaseTaskWorkerHeartBeatRequest() {\n    return {\n        clientId: \"\",\n        taskDefId: undefined,\n        listenerName: \"\"\n    };\n}\nconst TaskWorkerHeartBeatRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(message.taskDefId, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.listenerName !== \"\") {\n            writer.uint32(26).string(message.listenerName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskWorkerHeartBeatRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.clientId = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.listenerName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : \"\",\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            listenerName: isSet(object.listenerName) ? globalThis.String(object.listenerName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.clientId !== \"\") {\n            obj.clientId = message.clientId;\n        }\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.listenerName !== \"\") {\n            obj.listenerName = message.listenerName;\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskWorkerHeartBeatRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskWorkerHeartBeatRequest();\n        message.clientId = object.clientId ?? \"\";\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.listenerName = object.listenerName ?? \"\";\n        return message;\n    }\n};\nfunction createBaseRegisterTaskWorkerResponse() {\n    return {\n        yourHosts: [],\n        isClusterHealthy: undefined\n    };\n}\nconst RegisterTaskWorkerResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.yourHosts){\n            LHHostInfo.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.isClusterHealthy !== undefined) {\n            writer.uint32(16).bool(message.isClusterHealthy);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRegisterTaskWorkerResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.yourHosts.push(LHHostInfo.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.isClusterHealthy = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            yourHosts: globalThis.Array.isArray(object?.yourHosts) ? object.yourHosts.map((e)=>LHHostInfo.fromJSON(e)) : [],\n            isClusterHealthy: isSet(object.isClusterHealthy) ? globalThis.Boolean(object.isClusterHealthy) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.yourHosts?.length) {\n            obj.yourHosts = message.yourHosts.map((e)=>LHHostInfo.toJSON(e));\n        }\n        if (message.isClusterHealthy !== undefined) {\n            obj.isClusterHealthy = message.isClusterHealthy;\n        }\n        return obj;\n    },\n    create (base) {\n        return RegisterTaskWorkerResponse.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseRegisterTaskWorkerResponse();\n        message.yourHosts = object.yourHosts?.map((e)=>LHHostInfo.fromPartial(e)) || [];\n        message.isClusterHealthy = object.isClusterHealthy ?? undefined;\n        return message;\n    }\n};\nfunction createBaseLHHostInfo() {\n    return {\n        host: \"\",\n        port: 0\n    };\n}\nconst LHHostInfo = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.host !== \"\") {\n            writer.uint32(10).string(message.host);\n        }\n        if (message.port !== 0) {\n            writer.uint32(16).int32(message.port);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLHHostInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.host = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.port = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            host: isSet(object.host) ? globalThis.String(object.host) : \"\",\n            port: isSet(object.port) ? globalThis.Number(object.port) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.host !== \"\") {\n            obj.host = message.host;\n        }\n        if (message.port !== 0) {\n            obj.port = Math.round(message.port);\n        }\n        return obj;\n    },\n    create (base) {\n        return LHHostInfo.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseLHHostInfo();\n        message.host = object.host ?? \"\";\n        message.port = object.port ?? 0;\n        return message;\n    }\n};\nfunction createBasePollTaskRequest() {\n    return {\n        taskDefId: undefined,\n        clientId: \"\",\n        taskWorkerVersion: undefined\n    };\n}\nconst PollTaskRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(message.taskDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.clientId !== \"\") {\n            writer.uint32(18).string(message.clientId);\n        }\n        if (message.taskWorkerVersion !== undefined) {\n            writer.uint32(26).string(message.taskWorkerVersion);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePollTaskRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.clientId = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.taskWorkerVersion = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : \"\",\n            taskWorkerVersion: isSet(object.taskWorkerVersion) ? globalThis.String(object.taskWorkerVersion) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.clientId !== \"\") {\n            obj.clientId = message.clientId;\n        }\n        if (message.taskWorkerVersion !== undefined) {\n            obj.taskWorkerVersion = message.taskWorkerVersion;\n        }\n        return obj;\n    },\n    create (base) {\n        return PollTaskRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePollTaskRequest();\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.clientId = object.clientId ?? \"\";\n        message.taskWorkerVersion = object.taskWorkerVersion ?? undefined;\n        return message;\n    }\n};\nfunction createBaseScheduledTask() {\n    return {\n        taskRunId: undefined,\n        taskDefId: undefined,\n        attemptNumber: 0,\n        variables: [],\n        createdAt: undefined,\n        source: undefined\n    };\n}\nconst ScheduledTask = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.taskRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.encode(message.taskRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(message.taskDefId, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.attemptNumber !== 0) {\n            writer.uint32(24).int32(message.attemptNumber);\n        }\n        for (const v of message.variables){\n            _task_run__WEBPACK_IMPORTED_MODULE_11__.VarNameAndVal.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();\n        }\n        if (message.source !== undefined) {\n            _task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRunSource.encode(message.source, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseScheduledTask();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.attemptNumber = reader.int32();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.variables.push(_task_run__WEBPACK_IMPORTED_MODULE_11__.VarNameAndVal.decode(reader, reader.uint32()));\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.source = _task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRunSource.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskRunId: isSet(object.taskRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.fromJSON(object.taskRunId) : undefined,\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            attemptNumber: isSet(object.attemptNumber) ? globalThis.Number(object.attemptNumber) : 0,\n            variables: globalThis.Array.isArray(object?.variables) ? object.variables.map((e)=>_task_run__WEBPACK_IMPORTED_MODULE_11__.VarNameAndVal.fromJSON(e)) : [],\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,\n            source: isSet(object.source) ? _task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRunSource.fromJSON(object.source) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskRunId !== undefined) {\n            obj.taskRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.toJSON(message.taskRunId);\n        }\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.attemptNumber !== 0) {\n            obj.attemptNumber = Math.round(message.attemptNumber);\n        }\n        if (message.variables?.length) {\n            obj.variables = message.variables.map((e)=>_task_run__WEBPACK_IMPORTED_MODULE_11__.VarNameAndVal.toJSON(e));\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        if (message.source !== undefined) {\n            obj.source = _task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRunSource.toJSON(message.source);\n        }\n        return obj;\n    },\n    create (base) {\n        return ScheduledTask.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseScheduledTask();\n        message.taskRunId = object.taskRunId !== undefined && object.taskRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.fromPartial(object.taskRunId) : undefined;\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.attemptNumber = object.attemptNumber ?? 0;\n        message.variables = object.variables?.map((e)=>_task_run__WEBPACK_IMPORTED_MODULE_11__.VarNameAndVal.fromPartial(e)) || [];\n        message.createdAt = object.createdAt ?? undefined;\n        message.source = object.source !== undefined && object.source !== null ? _task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRunSource.fromPartial(object.source) : undefined;\n        return message;\n    }\n};\nfunction createBasePollTaskResponse() {\n    return {\n        result: undefined\n    };\n}\nconst PollTaskResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.result !== undefined) {\n            ScheduledTask.encode(message.result, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePollTaskResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.result = ScheduledTask.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            result: isSet(object.result) ? ScheduledTask.fromJSON(object.result) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.result !== undefined) {\n            obj.result = ScheduledTask.toJSON(message.result);\n        }\n        return obj;\n    },\n    create (base) {\n        return PollTaskResponse.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePollTaskResponse();\n        message.result = object.result !== undefined && object.result !== null ? ScheduledTask.fromPartial(object.result) : undefined;\n        return message;\n    }\n};\nfunction createBaseReportTaskRun() {\n    return {\n        taskRunId: undefined,\n        time: undefined,\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_3__.TaskStatus.TASK_SCHEDULED,\n        logOutput: undefined,\n        attemptNumber: 0,\n        output: undefined,\n        error: undefined,\n        exception: undefined\n    };\n}\nconst ReportTaskRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.taskRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.encode(message.taskRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.time !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.time), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.TaskStatus.TASK_SCHEDULED) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusToNumber)(message.status));\n        }\n        if (message.logOutput !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.encode(message.logOutput, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.attemptNumber !== 0) {\n            writer.uint32(48).int32(message.attemptNumber);\n        }\n        if (message.output !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.encode(message.output, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskError.encode(message.error, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.exception !== undefined) {\n            _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskException.encode(message.exception, writer.uint32(66).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseReportTaskRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.time = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusFromJSON)(reader.int32());\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.logOutput = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.attemptNumber = reader.int32();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.output = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.error = _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskError.decode(reader, reader.uint32());\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.exception = _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskException.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskRunId: isSet(object.taskRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.fromJSON(object.taskRunId) : undefined,\n            time: isSet(object.time) ? globalThis.String(object.time) : undefined,\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.TaskStatus.TASK_SCHEDULED,\n            logOutput: isSet(object.logOutput) ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromJSON(object.logOutput) : undefined,\n            attemptNumber: isSet(object.attemptNumber) ? globalThis.Number(object.attemptNumber) : 0,\n            output: isSet(object.output) ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromJSON(object.output) : undefined,\n            error: isSet(object.error) ? _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskError.fromJSON(object.error) : undefined,\n            exception: isSet(object.exception) ? _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskException.fromJSON(object.exception) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskRunId !== undefined) {\n            obj.taskRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.toJSON(message.taskRunId);\n        }\n        if (message.time !== undefined) {\n            obj.time = message.time;\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.TaskStatus.TASK_SCHEDULED) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.taskStatusToJSON)(message.status);\n        }\n        if (message.logOutput !== undefined) {\n            obj.logOutput = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.toJSON(message.logOutput);\n        }\n        if (message.attemptNumber !== 0) {\n            obj.attemptNumber = Math.round(message.attemptNumber);\n        }\n        if (message.output !== undefined) {\n            obj.output = _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.toJSON(message.output);\n        }\n        if (message.error !== undefined) {\n            obj.error = _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskError.toJSON(message.error);\n        }\n        if (message.exception !== undefined) {\n            obj.exception = _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskException.toJSON(message.exception);\n        }\n        return obj;\n    },\n    create (base) {\n        return ReportTaskRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseReportTaskRun();\n        message.taskRunId = object.taskRunId !== undefined && object.taskRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId.fromPartial(object.taskRunId) : undefined;\n        message.time = object.time ?? undefined;\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.TaskStatus.TASK_SCHEDULED;\n        message.logOutput = object.logOutput !== undefined && object.logOutput !== null ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromPartial(object.logOutput) : undefined;\n        message.attemptNumber = object.attemptNumber ?? 0;\n        message.output = object.output !== undefined && object.output !== null ? _variable__WEBPACK_IMPORTED_MODULE_13__.VariableValue.fromPartial(object.output) : undefined;\n        message.error = object.error !== undefined && object.error !== null ? _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskError.fromPartial(object.error) : undefined;\n        message.exception = object.exception !== undefined && object.exception !== null ? _task_run__WEBPACK_IMPORTED_MODULE_11__.LHTaskException.fromPartial(object.exception) : undefined;\n        return message;\n    }\n};\nfunction createBaseStopWfRunRequest() {\n    return {\n        wfRunId: undefined,\n        threadRunNumber: 0\n    };\n}\nconst StopWfRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.threadRunNumber !== 0) {\n            writer.uint32(16).int32(message.threadRunNumber);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStopWfRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined,\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.threadRunNumber !== 0) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        return obj;\n    },\n    create (base) {\n        return StopWfRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseStopWfRunRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.threadRunNumber = object.threadRunNumber ?? 0;\n        return message;\n    }\n};\nfunction createBaseResumeWfRunRequest() {\n    return {\n        wfRunId: undefined,\n        threadRunNumber: 0\n    };\n}\nconst ResumeWfRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.threadRunNumber !== 0) {\n            writer.uint32(16).int32(message.threadRunNumber);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseResumeWfRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined,\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        if (message.threadRunNumber !== 0) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        return obj;\n    },\n    create (base) {\n        return ResumeWfRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseResumeWfRunRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        message.threadRunNumber = object.threadRunNumber ?? 0;\n        return message;\n    }\n};\nfunction createBaseTaskDefMetricsQueryRequest() {\n    return {\n        windowStart: undefined,\n        windowType: _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n        taskDefName: undefined\n    };\n}\nconst TaskDefMetricsQueryRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.windowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.windowType !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(16).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToNumber)(message.windowType));\n        }\n        if (message.taskDefName !== undefined) {\n            writer.uint32(26).string(message.taskDefName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskDefMetricsQueryRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.windowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.windowType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.taskDefName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            windowStart: isSet(object.windowStart) ? globalThis.String(object.windowStart) : undefined,\n            windowType: isSet(object.windowType) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(object.windowType) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n            taskDefName: isSet(object.taskDefName) ? globalThis.String(object.taskDefName) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.windowStart !== undefined) {\n            obj.windowStart = message.windowStart;\n        }\n        if (message.windowType !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            obj.windowType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToJSON)(message.windowType);\n        }\n        if (message.taskDefName !== undefined) {\n            obj.taskDefName = message.taskDefName;\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskDefMetricsQueryRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskDefMetricsQueryRequest();\n        message.windowStart = object.windowStart ?? undefined;\n        message.windowType = object.windowType ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5;\n        message.taskDefName = object.taskDefName ?? undefined;\n        return message;\n    }\n};\nfunction createBaseListTaskMetricsRequest() {\n    return {\n        taskDefId: undefined,\n        lastWindowStart: undefined,\n        windowLength: _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n        numWindows: 0\n    };\n}\nconst ListTaskMetricsRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(message.taskDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.lastWindowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.lastWindowStart), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.windowLength !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToNumber)(message.windowLength));\n        }\n        if (message.numWindows !== 0) {\n            writer.uint32(32).int32(message.numWindows);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListTaskMetricsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.lastWindowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.windowLength = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.numWindows = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            lastWindowStart: isSet(object.lastWindowStart) ? globalThis.String(object.lastWindowStart) : undefined,\n            windowLength: isSet(object.windowLength) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(object.windowLength) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n            numWindows: isSet(object.numWindows) ? globalThis.Number(object.numWindows) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.lastWindowStart !== undefined) {\n            obj.lastWindowStart = message.lastWindowStart;\n        }\n        if (message.windowLength !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            obj.windowLength = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToJSON)(message.windowLength);\n        }\n        if (message.numWindows !== 0) {\n            obj.numWindows = Math.round(message.numWindows);\n        }\n        return obj;\n    },\n    create (base) {\n        return ListTaskMetricsRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListTaskMetricsRequest();\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.lastWindowStart = object.lastWindowStart ?? undefined;\n        message.windowLength = object.windowLength ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5;\n        message.numWindows = object.numWindows ?? 0;\n        return message;\n    }\n};\nfunction createBaseListTaskMetricsResponse() {\n    return {\n        results: []\n    };\n}\nconst ListTaskMetricsResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            TaskDefMetrics.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListTaskMetricsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(TaskDefMetrics.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>TaskDefMetrics.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>TaskDefMetrics.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return ListTaskMetricsResponse.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListTaskMetricsResponse();\n        message.results = object.results?.map((e)=>TaskDefMetrics.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseWfSpecMetricsQueryRequest() {\n    return {\n        wfSpecId: undefined,\n        windowStart: undefined,\n        windowLength: _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5\n    };\n}\nconst WfSpecMetricsQueryRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.encode(message.wfSpecId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.windowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.windowLength !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToNumber)(message.windowLength));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpecMetricsQueryRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.windowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.windowLength = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromJSON(object.wfSpecId) : undefined,\n            windowStart: isSet(object.windowStart) ? globalThis.String(object.windowStart) : undefined,\n            windowLength: isSet(object.windowLength) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(object.windowLength) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        if (message.windowStart !== undefined) {\n            obj.windowStart = message.windowStart;\n        }\n        if (message.windowLength !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            obj.windowLength = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToJSON)(message.windowLength);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpecMetricsQueryRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpecMetricsQueryRequest();\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        message.windowStart = object.windowStart ?? undefined;\n        message.windowLength = object.windowLength ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5;\n        return message;\n    }\n};\nfunction createBaseListWfMetricsRequest() {\n    return {\n        wfSpecId: undefined,\n        lastWindowStart: undefined,\n        windowLength: _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n        numWindows: 0\n    };\n}\nconst ListWfMetricsRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.encode(message.wfSpecId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.lastWindowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.lastWindowStart), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.windowLength !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToNumber)(message.windowLength));\n        }\n        if (message.numWindows !== 0) {\n            writer.uint32(32).int32(message.numWindows);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListWfMetricsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.lastWindowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.windowLength = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.numWindows = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromJSON(object.wfSpecId) : undefined,\n            lastWindowStart: isSet(object.lastWindowStart) ? globalThis.String(object.lastWindowStart) : undefined,\n            windowLength: isSet(object.windowLength) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(object.windowLength) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n            numWindows: isSet(object.numWindows) ? globalThis.Number(object.numWindows) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        if (message.lastWindowStart !== undefined) {\n            obj.lastWindowStart = message.lastWindowStart;\n        }\n        if (message.windowLength !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            obj.windowLength = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToJSON)(message.windowLength);\n        }\n        if (message.numWindows !== 0) {\n            obj.numWindows = Math.round(message.numWindows);\n        }\n        return obj;\n    },\n    create (base) {\n        return ListWfMetricsRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListWfMetricsRequest();\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        message.lastWindowStart = object.lastWindowStart ?? undefined;\n        message.windowLength = object.windowLength ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5;\n        message.numWindows = object.numWindows ?? 0;\n        return message;\n    }\n};\nfunction createBaseListWfMetricsResponse() {\n    return {\n        results: []\n    };\n}\nconst ListWfMetricsResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            WfSpecMetrics.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListWfMetricsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(WfSpecMetrics.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>WfSpecMetrics.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>WfSpecMetrics.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return ListWfMetricsResponse.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListWfMetricsResponse();\n        message.results = object.results?.map((e)=>WfSpecMetrics.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseTaskDefMetrics() {\n    return {\n        taskDefId: undefined,\n        windowStart: undefined,\n        type: _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n        scheduleToStartMax: 0,\n        scheduleToStartAvg: 0,\n        startToCompleteMax: 0,\n        startToCompleteAvg: 0,\n        totalCompleted: 0,\n        totalErrored: 0,\n        totalStarted: 0,\n        totalScheduled: 0\n    };\n}\nconst TaskDefMetrics = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.encode(message.taskDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.windowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToNumber)(message.type));\n        }\n        if (message.scheduleToStartMax !== 0) {\n            writer.uint32(32).int64(message.scheduleToStartMax);\n        }\n        if (message.scheduleToStartAvg !== 0) {\n            writer.uint32(40).int64(message.scheduleToStartAvg);\n        }\n        if (message.startToCompleteMax !== 0) {\n            writer.uint32(48).int64(message.startToCompleteMax);\n        }\n        if (message.startToCompleteAvg !== 0) {\n            writer.uint32(56).int64(message.startToCompleteAvg);\n        }\n        if (message.totalCompleted !== 0) {\n            writer.uint32(64).int64(message.totalCompleted);\n        }\n        if (message.totalErrored !== 0) {\n            writer.uint32(72).int64(message.totalErrored);\n        }\n        if (message.totalStarted !== 0) {\n            writer.uint32(80).int64(message.totalStarted);\n        }\n        if (message.totalScheduled !== 0) {\n            writer.uint32(88).int64(message.totalScheduled);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskDefMetrics();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.windowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.scheduleToStartMax = longToNumber(reader.int64());\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.scheduleToStartAvg = longToNumber(reader.int64());\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.startToCompleteMax = longToNumber(reader.int64());\n                    continue;\n                case 7:\n                    if (tag !== 56) {\n                        break;\n                    }\n                    message.startToCompleteAvg = longToNumber(reader.int64());\n                    continue;\n                case 8:\n                    if (tag !== 64) {\n                        break;\n                    }\n                    message.totalCompleted = longToNumber(reader.int64());\n                    continue;\n                case 9:\n                    if (tag !== 72) {\n                        break;\n                    }\n                    message.totalErrored = longToNumber(reader.int64());\n                    continue;\n                case 10:\n                    if (tag !== 80) {\n                        break;\n                    }\n                    message.totalStarted = longToNumber(reader.int64());\n                    continue;\n                case 11:\n                    if (tag !== 88) {\n                        break;\n                    }\n                    message.totalScheduled = longToNumber(reader.int64());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            windowStart: isSet(object.windowStart) ? globalThis.String(object.windowStart) : undefined,\n            type: isSet(object.type) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(object.type) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n            scheduleToStartMax: isSet(object.scheduleToStartMax) ? globalThis.Number(object.scheduleToStartMax) : 0,\n            scheduleToStartAvg: isSet(object.scheduleToStartAvg) ? globalThis.Number(object.scheduleToStartAvg) : 0,\n            startToCompleteMax: isSet(object.startToCompleteMax) ? globalThis.Number(object.startToCompleteMax) : 0,\n            startToCompleteAvg: isSet(object.startToCompleteAvg) ? globalThis.Number(object.startToCompleteAvg) : 0,\n            totalCompleted: isSet(object.totalCompleted) ? globalThis.Number(object.totalCompleted) : 0,\n            totalErrored: isSet(object.totalErrored) ? globalThis.Number(object.totalErrored) : 0,\n            totalStarted: isSet(object.totalStarted) ? globalThis.Number(object.totalStarted) : 0,\n            totalScheduled: isSet(object.totalScheduled) ? globalThis.Number(object.totalScheduled) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.windowStart !== undefined) {\n            obj.windowStart = message.windowStart;\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            obj.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToJSON)(message.type);\n        }\n        if (message.scheduleToStartMax !== 0) {\n            obj.scheduleToStartMax = Math.round(message.scheduleToStartMax);\n        }\n        if (message.scheduleToStartAvg !== 0) {\n            obj.scheduleToStartAvg = Math.round(message.scheduleToStartAvg);\n        }\n        if (message.startToCompleteMax !== 0) {\n            obj.startToCompleteMax = Math.round(message.startToCompleteMax);\n        }\n        if (message.startToCompleteAvg !== 0) {\n            obj.startToCompleteAvg = Math.round(message.startToCompleteAvg);\n        }\n        if (message.totalCompleted !== 0) {\n            obj.totalCompleted = Math.round(message.totalCompleted);\n        }\n        if (message.totalErrored !== 0) {\n            obj.totalErrored = Math.round(message.totalErrored);\n        }\n        if (message.totalStarted !== 0) {\n            obj.totalStarted = Math.round(message.totalStarted);\n        }\n        if (message.totalScheduled !== 0) {\n            obj.totalScheduled = Math.round(message.totalScheduled);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskDefMetrics.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskDefMetrics();\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.windowStart = object.windowStart ?? undefined;\n        message.type = object.type ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5;\n        message.scheduleToStartMax = object.scheduleToStartMax ?? 0;\n        message.scheduleToStartAvg = object.scheduleToStartAvg ?? 0;\n        message.startToCompleteMax = object.startToCompleteMax ?? 0;\n        message.startToCompleteAvg = object.startToCompleteAvg ?? 0;\n        message.totalCompleted = object.totalCompleted ?? 0;\n        message.totalErrored = object.totalErrored ?? 0;\n        message.totalStarted = object.totalStarted ?? 0;\n        message.totalScheduled = object.totalScheduled ?? 0;\n        return message;\n    }\n};\nfunction createBaseWfSpecMetrics() {\n    return {\n        wfSpecId: undefined,\n        windowStart: undefined,\n        type: _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n        totalStarted: 0,\n        totalCompleted: 0,\n        totalErrored: 0,\n        startToCompleteMax: 0,\n        startToCompleteAvg: 0\n    };\n}\nconst WfSpecMetrics = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.encode(message.wfSpecId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.windowStart !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.encode(toTimestamp(message.windowStart), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToNumber)(message.type));\n        }\n        if (message.totalStarted !== 0) {\n            writer.uint32(32).int64(message.totalStarted);\n        }\n        if (message.totalCompleted !== 0) {\n            writer.uint32(40).int64(message.totalCompleted);\n        }\n        if (message.totalErrored !== 0) {\n            writer.uint32(48).int64(message.totalErrored);\n        }\n        if (message.startToCompleteMax !== 0) {\n            writer.uint32(56).int64(message.startToCompleteMax);\n        }\n        if (message.startToCompleteAvg !== 0) {\n            writer.uint32(64).int64(message.startToCompleteAvg);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpecMetrics();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.windowStart = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_7__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(reader.int32());\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.totalStarted = longToNumber(reader.int64());\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.totalCompleted = longToNumber(reader.int64());\n                    continue;\n                case 6:\n                    if (tag !== 48) {\n                        break;\n                    }\n                    message.totalErrored = longToNumber(reader.int64());\n                    continue;\n                case 7:\n                    if (tag !== 56) {\n                        break;\n                    }\n                    message.startToCompleteMax = longToNumber(reader.int64());\n                    continue;\n                case 8:\n                    if (tag !== 64) {\n                        break;\n                    }\n                    message.startToCompleteAvg = longToNumber(reader.int64());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromJSON(object.wfSpecId) : undefined,\n            windowStart: isSet(object.windowStart) ? globalThis.String(object.windowStart) : undefined,\n            type: isSet(object.type) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthFromJSON)(object.type) : _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5,\n            totalStarted: isSet(object.totalStarted) ? globalThis.Number(object.totalStarted) : 0,\n            totalCompleted: isSet(object.totalCompleted) ? globalThis.Number(object.totalCompleted) : 0,\n            totalErrored: isSet(object.totalErrored) ? globalThis.Number(object.totalErrored) : 0,\n            startToCompleteMax: isSet(object.startToCompleteMax) ? globalThis.Number(object.startToCompleteMax) : 0,\n            startToCompleteAvg: isSet(object.startToCompleteAvg) ? globalThis.Number(object.startToCompleteAvg) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        if (message.windowStart !== undefined) {\n            obj.windowStart = message.windowStart;\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5) {\n            obj.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_3__.metricsWindowLengthToJSON)(message.type);\n        }\n        if (message.totalStarted !== 0) {\n            obj.totalStarted = Math.round(message.totalStarted);\n        }\n        if (message.totalCompleted !== 0) {\n            obj.totalCompleted = Math.round(message.totalCompleted);\n        }\n        if (message.totalErrored !== 0) {\n            obj.totalErrored = Math.round(message.totalErrored);\n        }\n        if (message.startToCompleteMax !== 0) {\n            obj.startToCompleteMax = Math.round(message.startToCompleteMax);\n        }\n        if (message.startToCompleteAvg !== 0) {\n            obj.startToCompleteAvg = Math.round(message.startToCompleteAvg);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpecMetrics.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpecMetrics();\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        message.windowStart = object.windowStart ?? undefined;\n        message.type = object.type ?? _common_enums__WEBPACK_IMPORTED_MODULE_3__.MetricsWindowLength.MINUTES_5;\n        message.totalStarted = object.totalStarted ?? 0;\n        message.totalCompleted = object.totalCompleted ?? 0;\n        message.totalErrored = object.totalErrored ?? 0;\n        message.startToCompleteMax = object.startToCompleteMax ?? 0;\n        message.startToCompleteAvg = object.startToCompleteAvg ?? 0;\n        return message;\n    }\n};\nfunction createBaseListUserTaskRunRequest() {\n    return {\n        wfRunId: undefined\n    };\n}\nconst ListUserTaskRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListUserTaskRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return ListUserTaskRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListUserTaskRunRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskRunList() {\n    return {\n        results: []\n    };\n}\nconst UserTaskRunList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskRun.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskRunList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskRun.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskRun.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskRun.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskRunList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskRunList();\n        message.results = object.results?.map((e)=>_user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskRun.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseListTaskRunsRequest() {\n    return {\n        wfRunId: undefined\n    };\n}\nconst ListTaskRunsRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.encode(message.wfRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListTaskRunsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfRunId: isSet(object.wfRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromJSON(object.wfRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfRunId !== undefined) {\n            obj.wfRunId = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.toJSON(message.wfRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return ListTaskRunsRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseListTaskRunsRequest();\n        message.wfRunId = object.wfRunId !== undefined && object.wfRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId.fromPartial(object.wfRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseTaskRunList() {\n    return {\n        results: []\n    };\n}\nconst TaskRunList = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.results){\n            _task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRun.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskRunList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.results.push(_task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRun.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            results: globalThis.Array.isArray(object?.results) ? object.results.map((e)=>_task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRun.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.results?.length) {\n            obj.results = message.results.map((e)=>_task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRun.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskRunList.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskRunList();\n        message.results = object.results?.map((e)=>_task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRun.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseMigrateWfSpecRequest() {\n    return {\n        oldWfSpec: undefined,\n        migration: undefined\n    };\n}\nconst MigrateWfSpecRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.oldWfSpec !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.encode(message.oldWfSpec, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.migration !== undefined) {\n            _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpecVersionMigration.encode(message.migration, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMigrateWfSpecRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.oldWfSpec = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.migration = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpecVersionMigration.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            oldWfSpec: isSet(object.oldWfSpec) ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromJSON(object.oldWfSpec) : undefined,\n            migration: isSet(object.migration) ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpecVersionMigration.fromJSON(object.migration) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.oldWfSpec !== undefined) {\n            obj.oldWfSpec = _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.toJSON(message.oldWfSpec);\n        }\n        if (message.migration !== undefined) {\n            obj.migration = _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpecVersionMigration.toJSON(message.migration);\n        }\n        return obj;\n    },\n    create (base) {\n        return MigrateWfSpecRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseMigrateWfSpecRequest();\n        message.oldWfSpec = object.oldWfSpec !== undefined && object.oldWfSpec !== null ? _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId.fromPartial(object.oldWfSpec) : undefined;\n        message.migration = object.migration !== undefined && object.migration !== null ? _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpecVersionMigration.fromPartial(object.migration) : undefined;\n        return message;\n    }\n};\nfunction createBaseGetLatestWfSpecRequest() {\n    return {\n        name: \"\",\n        majorVersion: undefined\n    };\n}\nconst GetLatestWfSpecRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.majorVersion !== undefined) {\n            writer.uint32(16).int32(message.majorVersion);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGetLatestWfSpecRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.majorVersion = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            majorVersion: isSet(object.majorVersion) ? globalThis.Number(object.majorVersion) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.majorVersion !== undefined) {\n            obj.majorVersion = Math.round(message.majorVersion);\n        }\n        return obj;\n    },\n    create (base) {\n        return GetLatestWfSpecRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseGetLatestWfSpecRequest();\n        message.name = object.name ?? \"\";\n        message.majorVersion = object.majorVersion ?? undefined;\n        return message;\n    }\n};\nfunction createBaseServerVersionResponse() {\n    return {\n        majorVersion: 0,\n        minorVersion: 0,\n        patchVersion: 0,\n        preReleaseIdentifier: undefined\n    };\n}\nconst ServerVersionResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.majorVersion !== 0) {\n            writer.uint32(8).int32(message.majorVersion);\n        }\n        if (message.minorVersion !== 0) {\n            writer.uint32(16).int32(message.minorVersion);\n        }\n        if (message.patchVersion !== 0) {\n            writer.uint32(24).int32(message.patchVersion);\n        }\n        if (message.preReleaseIdentifier !== undefined) {\n            writer.uint32(34).string(message.preReleaseIdentifier);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseServerVersionResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.majorVersion = reader.int32();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.minorVersion = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.patchVersion = reader.int32();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.preReleaseIdentifier = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            majorVersion: isSet(object.majorVersion) ? globalThis.Number(object.majorVersion) : 0,\n            minorVersion: isSet(object.minorVersion) ? globalThis.Number(object.minorVersion) : 0,\n            patchVersion: isSet(object.patchVersion) ? globalThis.Number(object.patchVersion) : 0,\n            preReleaseIdentifier: isSet(object.preReleaseIdentifier) ? globalThis.String(object.preReleaseIdentifier) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.majorVersion !== 0) {\n            obj.majorVersion = Math.round(message.majorVersion);\n        }\n        if (message.minorVersion !== 0) {\n            obj.minorVersion = Math.round(message.minorVersion);\n        }\n        if (message.patchVersion !== 0) {\n            obj.patchVersion = Math.round(message.patchVersion);\n        }\n        if (message.preReleaseIdentifier !== undefined) {\n            obj.preReleaseIdentifier = message.preReleaseIdentifier;\n        }\n        return obj;\n    },\n    create (base) {\n        return ServerVersionResponse.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseServerVersionResponse();\n        message.majorVersion = object.majorVersion ?? 0;\n        message.minorVersion = object.minorVersion ?? 0;\n        message.patchVersion = object.patchVersion ?? 0;\n        message.preReleaseIdentifier = object.preReleaseIdentifier ?? undefined;\n        return message;\n    }\n};\nconst LittleHorseDefinition = {\n    name: \"LittleHorse\",\n    fullName: \"littlehorse.LittleHorse\",\n    methods: {\n        /** Creates a TaskDef. */ putTaskDef: {\n            name: \"PutTaskDef\",\n            requestType: PutTaskDefRequest,\n            requestStream: false,\n            responseType: _task_def__WEBPACK_IMPORTED_MODULE_10__.TaskDef,\n            responseStream: false,\n            options: {}\n        },\n        /** Gets a TaskDef. */ getTaskDef: {\n            name: \"GetTaskDef\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskDefId,\n            requestStream: false,\n            responseType: _task_def__WEBPACK_IMPORTED_MODULE_10__.TaskDef,\n            responseStream: false,\n            options: {}\n        },\n        /** Creates an ExternalEventDef. */ putExternalEventDef: {\n            name: \"PutExternalEventDef\",\n            requestType: PutExternalEventDefRequest,\n            requestStream: false,\n            responseType: _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDef,\n            responseStream: false,\n            options: {}\n        },\n        /** Gets an ExternalEventDef. */ getExternalEventDef: {\n            name: \"GetExternalEventDef\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventDefId,\n            requestStream: false,\n            responseType: _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDef,\n            responseStream: false,\n            options: {}\n        },\n        /** EXPERIMENTAL: Creates a WorkflowEventDef. */ putWorkflowEventDef: {\n            name: \"PutWorkflowEventDef\",\n            requestType: PutWorkflowEventDefRequest,\n            requestStream: false,\n            responseType: _workflow_event__WEBPACK_IMPORTED_MODULE_16__.WorkflowEventDef,\n            responseStream: false,\n            options: {}\n        },\n        /** Creates a WfSpec. */ putWfSpec: {\n            name: \"PutWfSpec\",\n            requestType: PutWfSpecRequest,\n            requestStream: false,\n            responseType: _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec,\n            responseStream: false,\n            options: {}\n        },\n        /** Gets a WfSpec. */ getWfSpec: {\n            name: \"GetWfSpec\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.WfSpecId,\n            requestStream: false,\n            responseType: _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec,\n            responseStream: false,\n            options: {}\n        },\n        /** Returns the latest WfSpec with a specified name (and optionally a specified Major Version). */ getLatestWfSpec: {\n            name: \"GetLatestWfSpec\",\n            requestType: GetLatestWfSpecRequest,\n            requestStream: false,\n            responseType: _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * EXPERIMENTAL: Migrates all WfRun's from one version of a WfSpec onto a newer version of the\n     * same WfSpec. This is useful for long-running WfRun's (eg. a 60-day marketing campaign) where\n     * you must update WfRun's that are in the RUNNING state rather than allowing them to run to\n     * completion.\n     *\n     * As of 0.7.2, this feature is only partially implemented.\n     */ migrateWfSpec: {\n            name: \"MigrateWfSpec\",\n            requestType: MigrateWfSpecRequest,\n            requestStream: false,\n            responseType: _wf_spec__WEBPACK_IMPORTED_MODULE_15__.WfSpec,\n            responseStream: false,\n            options: {}\n        },\n        /** Creates a UserTaskDef. */ putUserTaskDef: {\n            name: \"PutUserTaskDef\",\n            requestType: PutUserTaskDefRequest,\n            requestStream: false,\n            responseType: _user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskDef,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Gets a specific UserTaskDef.\n     *\n     * This RPC is highly useful for applications built around\n     * User Tasks. For example, a UI that dynamically displays form fields based on the User Task\n     * might first receive a UserTaskRun, then use that UserTaskRun to look up the UserTaskDef.\n     * The frontend would inspect the UserTaskDef and display a form field on the browser page\n     * for each field in the UserTaskDef.\n     */ getUserTaskDef: {\n            name: \"GetUserTaskDef\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskDefId,\n            requestStream: false,\n            responseType: _user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskDef,\n            responseStream: false,\n            options: {}\n        },\n        /** Returns the most recent UserTaskDef with a specific name. */ getLatestUserTaskDef: {\n            name: \"GetLatestUserTaskDef\",\n            requestType: GetLatestUserTaskDefRequest,\n            requestStream: false,\n            responseType: _user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskDef,\n            responseStream: false,\n            options: {}\n        },\n        /** Runs a WfSpec to create a WfRun. */ runWf: {\n            name: \"RunWf\",\n            requestType: RunWfRequest,\n            requestStream: false,\n            responseType: _wf_run__WEBPACK_IMPORTED_MODULE_14__.WfRun,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Gets a WfRun. Although useful for development and debugging, this RPC is not often\n     * used by applications.\n     */ getWfRun: {\n            name: \"GetWfRun\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.WfRunId,\n            requestStream: false,\n            responseType: _wf_run__WEBPACK_IMPORTED_MODULE_14__.WfRun,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Loads a specific UserTaskRun. It includes information about to whom the UserTask is\n     * currently assigned, history of assignments and reassignments, and any context for that\n     * UserTaskRun which is specific to the WfRun.\n     */ getUserTaskRun: {\n            name: \"GetUserTaskRun\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.UserTaskRunId,\n            requestStream: false,\n            responseType: _user_tasks__WEBPACK_IMPORTED_MODULE_12__.UserTaskRun,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Change the ownership of a UserTaskRun to a new userId, userGroup, or both. The\n     * action will be reflected in your next call to SearchUserTaskRun. This RPC is useful for\n     * applications that are using User Tasks to build an internal task-list and wish to\n     * administer the tasks.\n     */ assignUserTaskRun: {\n            name: \"AssignUserTaskRun\",\n            requestType: _user_tasks__WEBPACK_IMPORTED_MODULE_12__.AssignUserTaskRunRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Completes a UserTaskRun. Includes the results of the UserTaskRun, the UserTaskRun Id, and\n     * the userId of the user who completes the UserTaskRun. Results in the UserTask NodeRun being\n     * completed, and unblocks the associated ThreadRun in the WfRun.\n     *\n     * This RPC is highly useful for applications built around a WfSpec that uses USER_TASK nodes.\n     */ completeUserTaskRun: {\n            name: \"CompleteUserTaskRun\",\n            requestType: _user_tasks__WEBPACK_IMPORTED_MODULE_12__.CompleteUserTaskRunRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Cancels a UserTaskRun. This will result in an EXCEPTION being propagated to the WfRun. */ cancelUserTaskRun: {\n            name: \"CancelUserTaskRun\",\n            requestType: _user_tasks__WEBPACK_IMPORTED_MODULE_12__.CancelUserTaskRunRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Lists all UserTaskRun's for a specific WfRun. Can be useful when using a WfRun\n     * to model an entity.\n     */ listUserTaskRuns: {\n            name: \"ListUserTaskRuns\",\n            requestType: ListUserTaskRunRequest,\n            requestStream: false,\n            responseType: UserTaskRunList,\n            responseStream: false,\n            options: {}\n        },\n        /** Gets a specific NodeRun. */ getNodeRun: {\n            name: \"GetNodeRun\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.NodeRunId,\n            requestStream: false,\n            responseType: _node_run__WEBPACK_IMPORTED_MODULE_8__.NodeRun,\n            responseStream: false,\n            options: {}\n        },\n        /** Lists all NodeRun's for a specific WfRun. */ listNodeRuns: {\n            name: \"ListNodeRuns\",\n            requestType: ListNodeRunsRequest,\n            requestStream: false,\n            responseType: NodeRunList,\n            responseStream: false,\n            options: {}\n        },\n        /** Gets a specific TaskRun. */ getTaskRun: {\n            name: \"GetTaskRun\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.TaskRunId,\n            requestStream: false,\n            responseType: _task_run__WEBPACK_IMPORTED_MODULE_11__.TaskRun,\n            responseStream: false,\n            options: {}\n        },\n        /** Lists all TaskRun's for a specific WfRun. */ listTaskRuns: {\n            name: \"ListTaskRuns\",\n            requestType: ListTaskRunsRequest,\n            requestStream: false,\n            responseType: TaskRunList,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Get the value of a specific Variable. When using a WfRun to model an entity, this\n     * RPC is useful for retrieving information. It is equivalent to looking up the value of a\n     * column for a specific row in a SQL table.\n     */ getVariable: {\n            name: \"GetVariable\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.VariableId,\n            requestStream: false,\n            responseType: _variable__WEBPACK_IMPORTED_MODULE_13__.Variable,\n            responseStream: false,\n            options: {}\n        },\n        /** List all Variables from a WfRun. */ listVariables: {\n            name: \"ListVariables\",\n            requestType: ListVariablesRequest,\n            requestStream: false,\n            responseType: VariableList,\n            responseStream: false,\n            options: {}\n        },\n        /** Post an ExternalEvent. This RPC is highly useful for */ putExternalEvent: {\n            name: \"PutExternalEvent\",\n            requestType: PutExternalEventRequest,\n            requestStream: false,\n            responseType: _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEvent,\n            responseStream: false,\n            options: {}\n        },\n        /** Get a specific ExternalEvent. */ getExternalEvent: {\n            name: \"GetExternalEvent\",\n            requestType: _object_id__WEBPACK_IMPORTED_MODULE_9__.ExternalEventId,\n            requestStream: false,\n            responseType: _external_event__WEBPACK_IMPORTED_MODULE_5__.ExternalEvent,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Waits for a WorkflowEvent to be thrown by a given WfRun. Returns immediately if a matching\n     * WorkflowEvent has already been thrown; throws a DEADLINE_EXCEEDED error if the WorkflowEvent\n     * is not thrown before the deadline specified by the client.\n     *\n     * To specify the deadline, the client should use GRPC deadlines.\n     */ awaitWorkflowEvent: {\n            name: \"AwaitWorkflowEvent\",\n            requestType: AwaitWorkflowEventRequest,\n            requestStream: false,\n            responseType: _workflow_event__WEBPACK_IMPORTED_MODULE_16__.WorkflowEvent,\n            responseStream: false,\n            options: {}\n        },\n        /** List ExternalEvent's for a specific WfRun. */ listExternalEvents: {\n            name: \"ListExternalEvents\",\n            requestType: ListExternalEventsRequest,\n            requestStream: false,\n            responseType: ExternalEventList,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Search for WfRun's. This RPC is highly useful for applications that store data\n     * in LittleHorse and need to find a specific WfRun based on certain indexed fields.\n     */ searchWfRun: {\n            name: \"SearchWfRun\",\n            requestType: SearchWfRunRequest,\n            requestStream: false,\n            responseType: WfRunIdList,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Search for NodeRun's. This RPC is useful for monitoring and finding bugs in\n     * your workflows or Task Workers.\n     */ searchNodeRun: {\n            name: \"SearchNodeRun\",\n            requestType: SearchNodeRunRequest,\n            requestStream: false,\n            responseType: NodeRunIdList,\n            responseStream: false,\n            options: {}\n        },\n        /** Search for TaskRun's. This RPC is useful for finding bugs in your Task Workers. */ searchTaskRun: {\n            name: \"SearchTaskRun\",\n            requestType: SearchTaskRunRequest,\n            requestStream: false,\n            responseType: TaskRunIdList,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Search for UserTaskRun's. This RPC is highly useful for applications that connect\n     * human end-users to LittleHorse: it enables you to find all tasks assigned to a specific\n     * person or group of people.\n     */ searchUserTaskRun: {\n            name: \"SearchUserTaskRun\",\n            requestType: SearchUserTaskRunRequest,\n            requestStream: false,\n            responseType: UserTaskRunIdList,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Search for Variable's. This RPC is highly useful for applications that store data\n     * in LittleHorse and need to find a specific WfRun based on certain indexed fields.\n     */ searchVariable: {\n            name: \"SearchVariable\",\n            requestType: SearchVariableRequest,\n            requestStream: false,\n            responseType: VariableIdList,\n            responseStream: false,\n            options: {}\n        },\n        /** Search for ExternalEvent's. */ searchExternalEvent: {\n            name: \"SearchExternalEvent\",\n            requestType: SearchExternalEventRequest,\n            requestStream: false,\n            responseType: ExternalEventIdList,\n            responseStream: false,\n            options: {}\n        },\n        /** Search for TaskDef's. */ searchTaskDef: {\n            name: \"SearchTaskDef\",\n            requestType: SearchTaskDefRequest,\n            requestStream: false,\n            responseType: TaskDefIdList,\n            responseStream: false,\n            options: {}\n        },\n        /** Search for UserTaskDef's. */ searchUserTaskDef: {\n            name: \"SearchUserTaskDef\",\n            requestType: SearchUserTaskDefRequest,\n            requestStream: false,\n            responseType: UserTaskDefIdList,\n            responseStream: false,\n            options: {}\n        },\n        /** Search for WfSpec's. */ searchWfSpec: {\n            name: \"SearchWfSpec\",\n            requestType: SearchWfSpecRequest,\n            requestStream: false,\n            responseType: WfSpecIdList,\n            responseStream: false,\n            options: {}\n        },\n        /** Search for ExteranlEventDef's. */ searchExternalEventDef: {\n            name: \"SearchExternalEventDef\",\n            requestType: SearchExternalEventDefRequest,\n            requestStream: false,\n            responseType: ExternalEventDefIdList,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Used by the Task Worker to:\n     * 1. Tell the LH Server that the Task Worker has joined the Task Worker Group.\n     * 2. Receive the assignemnt of LH Server's to poll from.\n     * Generally, you won't use this request manually.\n     */ registerTaskWorker: {\n            name: \"RegisterTaskWorker\",\n            requestType: RegisterTaskWorkerRequest,\n            requestStream: false,\n            responseType: RegisterTaskWorkerResponse,\n            responseStream: false,\n            options: {}\n        },\n        /**\n     * Used by Task Workers to listen for TaskRuns on the Task Queue. Generally, you won't\n     * use this RPC manually.\n     */ pollTask: {\n            name: \"PollTask\",\n            requestType: PollTaskRequest,\n            requestStream: true,\n            responseType: PollTaskResponse,\n            responseStream: true,\n            options: {}\n        },\n        /**\n     * Used by Task Workers to report the result of a TaskRun. Generally, you won't use\n     * this rpc manually.\n     */ reportTask: {\n            name: \"ReportTask\",\n            requestType: ReportTaskRun,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Move a WfRun or a specific ThreadRun in that WfRun to the HALTED state. */ stopWfRun: {\n            name: \"StopWfRun\",\n            requestType: StopWfRunRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Resumes a WfRun or a specific ThreadRun of a WfRun. */ resumeWfRun: {\n            name: \"ResumeWfRun\",\n            requestType: ResumeWfRunRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Deletes a WfRun. The WfRun cannot be in the RUNNING state. */ deleteWfRun: {\n            name: \"DeleteWfRun\",\n            requestType: DeleteWfRunRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Deletes a TaskDef. */ deleteTaskDef: {\n            name: \"DeleteTaskDef\",\n            requestType: DeleteTaskDefRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Deletes a WfSpec. */ deleteWfSpec: {\n            name: \"DeleteWfSpec\",\n            requestType: DeleteWfSpecRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Deletes a UserTaskDef. */ deleteUserTaskDef: {\n            name: \"DeleteUserTaskDef\",\n            requestType: DeleteUserTaskDefRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Deletes an ExternalEventDef. */ deleteExternalEventDef: {\n            name: \"DeleteExternalEventDef\",\n            requestType: DeleteExternalEventDefRequest,\n            requestStream: false,\n            responseType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            responseStream: false,\n            options: {}\n        },\n        /** Returns TaskDef Metrics for a specific TaskDef and a specific time window. */ getTaskDefMetricsWindow: {\n            name: \"GetTaskDefMetricsWindow\",\n            requestType: TaskDefMetricsQueryRequest,\n            requestStream: false,\n            responseType: TaskDefMetrics,\n            responseStream: false,\n            options: {}\n        },\n        /** Returns WfSpec Metrics for a specific WfSpec and a specific time window. */ getWfSpecMetricsWindow: {\n            name: \"GetWfSpecMetricsWindow\",\n            requestType: WfSpecMetricsQueryRequest,\n            requestStream: false,\n            responseType: WfSpecMetrics,\n            responseStream: false,\n            options: {}\n        },\n        /** Returns a list of TaskDef Metrics Windows. */ listTaskDefMetrics: {\n            name: \"ListTaskDefMetrics\",\n            requestType: ListTaskMetricsRequest,\n            requestStream: false,\n            responseType: ListTaskMetricsResponse,\n            responseStream: false,\n            options: {}\n        },\n        /** Returns a list of WfSpec Metrics Windows. */ listWfSpecMetrics: {\n            name: \"ListWfSpecMetrics\",\n            requestType: ListWfMetricsRequest,\n            requestStream: false,\n            responseType: ListWfMetricsResponse,\n            responseStream: false,\n            options: {}\n        },\n        /** EXPERIMENTAL: Creates another Tenant in the LH Server. */ putTenant: {\n            name: \"PutTenant\",\n            requestType: _acls__WEBPACK_IMPORTED_MODULE_2__.PutTenantRequest,\n            requestStream: false,\n            responseType: _acls__WEBPACK_IMPORTED_MODULE_2__.Tenant,\n            responseStream: false,\n            options: {}\n        },\n        /** EXPERIMENTAL: Creates an Principal. */ putPrincipal: {\n            name: \"PutPrincipal\",\n            requestType: _acls__WEBPACK_IMPORTED_MODULE_2__.PutPrincipalRequest,\n            requestStream: false,\n            responseType: _acls__WEBPACK_IMPORTED_MODULE_2__.Principal,\n            responseStream: false,\n            options: {}\n        },\n        /** Returns the Principal of the caller. */ whoami: {\n            name: \"Whoami\",\n            requestType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            requestStream: false,\n            responseType: _acls__WEBPACK_IMPORTED_MODULE_2__.Principal,\n            responseStream: false,\n            options: {}\n        },\n        /** Gets the version of the LH Server. */ getServerVersion: {\n            name: \"GetServerVersion\",\n            requestType: _google_protobuf_empty__WEBPACK_IMPORTED_MODULE_6__.Empty,\n            requestStream: false,\n            responseType: ServerVersionResponse,\n            responseStream: false,\n            options: {}\n        }\n    }\n};\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    } else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for(let i = 0; i < bin.length; ++i){\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    } else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(globalThis.String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction longToNumber(long) {\n    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long !== (long__WEBPACK_IMPORTED_MODULE_0___default())) {\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long = (long__WEBPACK_IMPORTED_MODULE_0___default());\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/service.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/task_def.ts":
/*!********************************************!*\
  !*** ./littlehorse-public-api/task_def.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskDef: () => (/* binding */ TaskDef),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_wfspec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_wfspec */ \"(api)/./littlehorse-public-api/common_wfspec.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* eslint-disable */ \n\n\n\nconst protobufPackage = \"littlehorse\";\nfunction createBaseTaskDef() {\n    return {\n        id: undefined,\n        inputVars: [],\n        createdAt: undefined\n    };\n}\nconst TaskDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.inputVars){\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_1__.VariableDef.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.inputVars.push(_common_wfspec__WEBPACK_IMPORTED_MODULE_1__.VariableDef.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.fromJSON(object.id) : undefined,\n            inputVars: globalThis.Array.isArray(object?.inputVars) ? object.inputVars.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_1__.VariableDef.fromJSON(e)) : [],\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.toJSON(message.id);\n        }\n        if (message.inputVars?.length) {\n            obj.inputVars = message.inputVars.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_1__.VariableDef.toJSON(e));\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskDef();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.fromPartial(object.id) : undefined;\n        message.inputVars = object.inputVars?.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_1__.VariableDef.fromPartial(e)) || [];\n        message.createdAt = object.createdAt ?? undefined;\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saXR0bGVob3JzZS1wdWJsaWMtYXBpL3Rhc2tfZGVmLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxrQkFBa0IsR0FDd0I7QUFDSTtBQUNVO0FBQ2hCO0FBRWpDLE1BQU1JLGtCQUFrQixjQUFjO0FBYzdDLFNBQVNDO0lBQ1AsT0FBTztRQUFFQyxJQUFJQztRQUFXQyxXQUFXLEVBQUU7UUFBRUMsV0FBV0Y7SUFBVTtBQUM5RDtBQUVPLE1BQU1HLFVBQVU7SUFDckJDLFFBQU9DLE9BQWdCLEVBQUVDLFNBQXFCYixzREFBVSxDQUFDZSxNQUFNLEVBQUU7UUFDL0QsSUFBSUgsUUFBUU4sRUFBRSxLQUFLQyxXQUFXO1lBQzVCSixpREFBU0EsQ0FBQ1EsTUFBTSxDQUFDQyxRQUFRTixFQUFFLEVBQUVPLE9BQU9HLE1BQU0sQ0FBQyxJQUFJQyxJQUFJLElBQUlDLE1BQU07UUFDL0Q7UUFDQSxLQUFLLE1BQU1DLEtBQUtQLFFBQVFKLFNBQVMsQ0FBRTtZQUNqQ1AsdURBQVdBLENBQUNVLE1BQU0sQ0FBQ1EsR0FBSU4sT0FBT0csTUFBTSxDQUFDLElBQUlDLElBQUksSUFBSUMsTUFBTTtRQUN6RDtRQUNBLElBQUlOLFFBQVFILFNBQVMsS0FBS0YsV0FBVztZQUNuQ0wsaUVBQVNBLENBQUNTLE1BQU0sQ0FBQ1MsWUFBWVIsUUFBUUgsU0FBUyxHQUFHSSxPQUFPRyxNQUFNLENBQUMsSUFBSUMsSUFBSSxJQUFJQyxNQUFNO1FBQ25GO1FBQ0EsT0FBT0w7SUFDVDtJQUVBUSxRQUFPQyxLQUE4QixFQUFFQyxNQUFlO1FBQ3BELE1BQU1DLFNBQVNGLGlCQUFpQnRCLHNEQUFVLEdBQUdzQixRQUFRdEIsc0RBQVUsQ0FBQ2UsTUFBTSxDQUFDTztRQUN2RSxJQUFJSSxNQUFNSCxXQUFXaEIsWUFBWWlCLE9BQU9HLEdBQUcsR0FBR0gsT0FBT0ksR0FBRyxHQUFHTDtRQUMzRCxNQUFNWCxVQUFVUDtRQUNoQixNQUFPbUIsT0FBT0ksR0FBRyxHQUFHRixJQUFLO1lB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QUMxQjtBQUVBLFNBQVN0QixjQUFjdUIsQ0FBWTtJQUNqQyxJQUFJQyxTQUFTLENBQUNELEVBQUVMLE9BQU8sSUFBSSxLQUFLO0lBQ2hDTSxVQUFVLENBQUNELEVBQUVELEtBQUssSUFBSSxLQUFLO0lBQzNCLE9BQU8sSUFBSWpCLFdBQVdZLElBQUksQ0FBQ08sUUFBUUMsV0FBVztBQUNoRDtBQUVBLFNBQVNyQixNQUFNc0IsS0FBVTtJQUN2QixPQUFPQSxVQUFVLFFBQVFBLFVBQVVsRDtBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL2xpdHRsZWhvcnNlLXB1YmxpYy1hcGkvdGFza19kZWYudHM/NmY4NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0ICogYXMgX20wIGZyb20gXCJwcm90b2J1ZmpzL21pbmltYWxcIjtcbmltcG9ydCB7IFZhcmlhYmxlRGVmIH0gZnJvbSBcIi4vY29tbW9uX3dmc3BlY1wiO1xuaW1wb3J0IHsgVGltZXN0YW1wIH0gZnJvbSBcIi4vZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcFwiO1xuaW1wb3J0IHsgVGFza0RlZklkIH0gZnJvbSBcIi4vb2JqZWN0X2lkXCI7XG5cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImxpdHRsZWhvcnNlXCI7XG5cbi8qKiBBIFRhc2tEZWYgZGVmaW5lcyBhIGJsdWVwcmludCBmb3IgYSBUYXNrUnVuIHRoYXQgY2FuIGJlIGRpc3BhdGNoZWQgdG8gVGFzayBXb3JrZXJzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYXNrRGVmIHtcbiAgLyoqIFRoZSBJRCBvZiB0aGlzIFRhc2tEZWYuICovXG4gIGlkOlxuICAgIHwgVGFza0RlZklkXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKiBUaGUgaW5wdXQgdmFyaWFibGVzIHJlcXVpcmVkIHRvIGV4ZWN1dGUgdGhpcyBUYXNrRGVmLiAqL1xuICBpbnB1dFZhcnM6IFZhcmlhYmxlRGVmW107XG4gIC8qKiBUaGUgdGltZSBhdCB3aGljaCB0aGlzIFRhc2tEZWYgd2FzIGNyZWF0ZWQuICovXG4gIGNyZWF0ZWRBdDogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlVGFza0RlZigpOiBUYXNrRGVmIHtcbiAgcmV0dXJuIHsgaWQ6IHVuZGVmaW5lZCwgaW5wdXRWYXJzOiBbXSwgY3JlYXRlZEF0OiB1bmRlZmluZWQgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFRhc2tEZWYgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBUYXNrRGVmLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UuaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgVGFza0RlZklkLmVuY29kZShtZXNzYWdlLmlkLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5pbnB1dFZhcnMpIHtcbiAgICAgIFZhcmlhYmxlRGVmLmVuY29kZSh2ISwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuY3JlYXRlZEF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFRpbWVzdGFtcC5lbmNvZGUodG9UaW1lc3RhbXAobWVzc2FnZS5jcmVhdGVkQXQpLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFRhc2tEZWYge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVGFza0RlZigpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UuaWQgPSBUYXNrRGVmSWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLmlucHV0VmFycy5wdXNoKFZhcmlhYmxlRGVmLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UuY3JlYXRlZEF0ID0gZnJvbVRpbWVzdGFtcChUaW1lc3RhbXAuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG5cbiAgZnJvbUpTT04ob2JqZWN0OiBhbnkpOiBUYXNrRGVmIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGlzU2V0KG9iamVjdC5pZCkgPyBUYXNrRGVmSWQuZnJvbUpTT04ob2JqZWN0LmlkKSA6IHVuZGVmaW5lZCxcbiAgICAgIGlucHV0VmFyczogZ2xvYmFsVGhpcy5BcnJheS5pc0FycmF5KG9iamVjdD8uaW5wdXRWYXJzKVxuICAgICAgICA/IG9iamVjdC5pbnB1dFZhcnMubWFwKChlOiBhbnkpID0+IFZhcmlhYmxlRGVmLmZyb21KU09OKGUpKVxuICAgICAgICA6IFtdLFxuICAgICAgY3JlYXRlZEF0OiBpc1NldChvYmplY3QuY3JlYXRlZEF0KSA/IGdsb2JhbFRoaXMuU3RyaW5nKG9iamVjdC5jcmVhdGVkQXQpIDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH0sXG5cbiAgdG9KU09OKG1lc3NhZ2U6IFRhc2tEZWYpOiB1bmtub3duIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGlmIChtZXNzYWdlLmlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5pZCA9IFRhc2tEZWZJZC50b0pTT04obWVzc2FnZS5pZCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmlucHV0VmFycz8ubGVuZ3RoKSB7XG4gICAgICBvYmouaW5wdXRWYXJzID0gbWVzc2FnZS5pbnB1dFZhcnMubWFwKChlKSA9PiBWYXJpYWJsZURlZi50b0pTT04oZSkpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5jcmVhdGVkQXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLmNyZWF0ZWRBdCA9IG1lc3NhZ2UuY3JlYXRlZEF0O1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuXG4gIGNyZWF0ZTxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8VGFza0RlZj4sIEk+PihiYXNlPzogSSk6IFRhc2tEZWYge1xuICAgIHJldHVybiBUYXNrRGVmLmZyb21QYXJ0aWFsKGJhc2UgPz8gKHt9IGFzIGFueSkpO1xuICB9LFxuICBmcm9tUGFydGlhbDxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8VGFza0RlZj4sIEk+PihvYmplY3Q6IEkpOiBUYXNrRGVmIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVRhc2tEZWYoKTtcbiAgICBtZXNzYWdlLmlkID0gKG9iamVjdC5pZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5pZCAhPT0gbnVsbCkgPyBUYXNrRGVmSWQuZnJvbVBhcnRpYWwob2JqZWN0LmlkKSA6IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLmlucHV0VmFycyA9IG9iamVjdC5pbnB1dFZhcnM/Lm1hcCgoZSkgPT4gVmFyaWFibGVEZWYuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgIG1lc3NhZ2UuY3JlYXRlZEF0ID0gb2JqZWN0LmNyZWF0ZWRBdCA/PyB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG59O1xuXG50eXBlIEJ1aWx0aW4gPSBEYXRlIHwgRnVuY3Rpb24gfCBVaW50OEFycmF5IHwgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IHR5cGUgRGVlcFBhcnRpYWw8VD4gPSBUIGV4dGVuZHMgQnVpbHRpbiA/IFRcbiAgOiBUIGV4dGVuZHMgZ2xvYmFsVGhpcy5BcnJheTxpbmZlciBVPiA/IGdsb2JhbFRoaXMuQXJyYXk8RGVlcFBhcnRpYWw8VT4+XG4gIDogVCBleHRlbmRzIFJlYWRvbmx5QXJyYXk8aW5mZXIgVT4gPyBSZWFkb25seUFycmF5PERlZXBQYXJ0aWFsPFU+PlxuICA6IFQgZXh0ZW5kcyB7fSA/IHsgW0sgaW4ga2V5b2YgVF0/OiBEZWVwUGFydGlhbDxUW0tdPiB9XG4gIDogUGFydGlhbDxUPjtcblxudHlwZSBLZXlzT2ZVbmlvbjxUPiA9IFQgZXh0ZW5kcyBUID8ga2V5b2YgVCA6IG5ldmVyO1xuZXhwb3J0IHR5cGUgRXhhY3Q8UCwgSSBleHRlbmRzIFA+ID0gUCBleHRlbmRzIEJ1aWx0aW4gPyBQXG4gIDogUCAmIHsgW0sgaW4ga2V5b2YgUF06IEV4YWN0PFBbS10sIElbS10+IH0gJiB7IFtLIGluIEV4Y2x1ZGU8a2V5b2YgSSwgS2V5c09mVW5pb248UD4+XTogbmV2ZXIgfTtcblxuZnVuY3Rpb24gdG9UaW1lc3RhbXAoZGF0ZVN0cjogc3RyaW5nKTogVGltZXN0YW1wIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBnbG9iYWxUaGlzLkRhdGUoZGF0ZVN0cik7XG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLnRydW5jKGRhdGUuZ2V0VGltZSgpIC8gMV8wMDApO1xuICBjb25zdCBuYW5vcyA9IChkYXRlLmdldFRpbWUoKSAlIDFfMDAwKSAqIDFfMDAwXzAwMDtcbiAgcmV0dXJuIHsgc2Vjb25kcywgbmFub3MgfTtcbn1cblxuZnVuY3Rpb24gZnJvbVRpbWVzdGFtcCh0OiBUaW1lc3RhbXApOiBzdHJpbmcge1xuICBsZXQgbWlsbGlzID0gKHQuc2Vjb25kcyB8fCAwKSAqIDFfMDAwO1xuICBtaWxsaXMgKz0gKHQubmFub3MgfHwgMCkgLyAxXzAwMF8wMDA7XG4gIHJldHVybiBuZXcgZ2xvYmFsVGhpcy5EYXRlKG1pbGxpcykudG9JU09TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gaXNTZXQodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbiJdLCJuYW1lcyI6WyJfbTAiLCJWYXJpYWJsZURlZiIsIlRpbWVzdGFtcCIsIlRhc2tEZWZJZCIsInByb3RvYnVmUGFja2FnZSIsImNyZWF0ZUJhc2VUYXNrRGVmIiwiaWQiLCJ1bmRlZmluZWQiLCJpbnB1dFZhcnMiLCJjcmVhdGVkQXQiLCJUYXNrRGVmIiwiZW5jb2RlIiwibWVzc2FnZSIsIndyaXRlciIsIldyaXRlciIsImNyZWF0ZSIsInVpbnQzMiIsImZvcmsiLCJsZGVsaW0iLCJ2IiwidG9UaW1lc3RhbXAiLCJkZWNvZGUiLCJpbnB1dCIsImxlbmd0aCIsInJlYWRlciIsIlJlYWRlciIsImVuZCIsImxlbiIsInBvcyIsInRhZyIsInB1c2giLCJmcm9tVGltZXN0YW1wIiwic2tpcFR5cGUiLCJmcm9tSlNPTiIsIm9iamVjdCIsImlzU2V0IiwiZ2xvYmFsVGhpcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImUiLCJTdHJpbmciLCJ0b0pTT04iLCJvYmoiLCJiYXNlIiwiZnJvbVBhcnRpYWwiLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJzZWNvbmRzIiwiTWF0aCIsInRydW5jIiwiZ2V0VGltZSIsIm5hbm9zIiwidCIsIm1pbGxpcyIsInRvSVNPU3RyaW5nIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/task_def.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/task_run.ts":
/*!********************************************!*\
  !*** ./littlehorse-public-api/task_run.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LHTaskError: () => (/* binding */ LHTaskError),\n/* harmony export */   LHTaskException: () => (/* binding */ LHTaskException),\n/* harmony export */   TaskAttempt: () => (/* binding */ TaskAttempt),\n/* harmony export */   TaskNodeReference: () => (/* binding */ TaskNodeReference),\n/* harmony export */   TaskRun: () => (/* binding */ TaskRun),\n/* harmony export */   TaskRunSource: () => (/* binding */ TaskRunSource),\n/* harmony export */   VarNameAndVal: () => (/* binding */ VarNameAndVal),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* harmony import */ var _user_tasks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./user_tasks */ \"(api)/./littlehorse-public-api/user_tasks.ts\");\n/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./variable */ \"(api)/./littlehorse-public-api/variable.ts\");\n/* eslint-disable */ \n\n\n\n\n\nconst protobufPackage = \"littlehorse\";\nfunction createBaseTaskRun() {\n    return {\n        id: undefined,\n        taskDefId: undefined,\n        attempts: [],\n        maxAttempts: 0,\n        inputVariables: [],\n        source: undefined,\n        scheduledAt: undefined,\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED,\n        timeoutSeconds: 0\n    };\n}\nconst TaskRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.taskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.encode(message.taskDefId, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.attempts){\n            TaskAttempt.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.maxAttempts !== 0) {\n            writer.uint32(32).int32(message.maxAttempts);\n        }\n        for (const v of message.inputVariables){\n            VarNameAndVal.encode(v, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.source !== undefined) {\n            TaskRunSource.encode(message.source, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.scheduledAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.scheduledAt), writer.uint32(58).fork()).ldelim();\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED) {\n            writer.uint32(64).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusToNumber)(message.status));\n        }\n        if (message.timeoutSeconds !== 0) {\n            writer.uint32(72).int32(message.timeoutSeconds);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.attempts.push(TaskAttempt.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.maxAttempts = reader.int32();\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.inputVariables.push(VarNameAndVal.decode(reader, reader.uint32()));\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.source = TaskRunSource.decode(reader, reader.uint32());\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.scheduledAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 8:\n                    if (tag !== 64) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusFromJSON)(reader.int32());\n                    continue;\n                case 9:\n                    if (tag !== 72) {\n                        break;\n                    }\n                    message.timeoutSeconds = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.fromJSON(object.id) : undefined,\n            taskDefId: isSet(object.taskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.fromJSON(object.taskDefId) : undefined,\n            attempts: globalThis.Array.isArray(object?.attempts) ? object.attempts.map((e)=>TaskAttempt.fromJSON(e)) : [],\n            maxAttempts: isSet(object.maxAttempts) ? globalThis.Number(object.maxAttempts) : 0,\n            inputVariables: globalThis.Array.isArray(object?.inputVariables) ? object.inputVariables.map((e)=>VarNameAndVal.fromJSON(e)) : [],\n            source: isSet(object.source) ? TaskRunSource.fromJSON(object.source) : undefined,\n            scheduledAt: isSet(object.scheduledAt) ? globalThis.String(object.scheduledAt) : undefined,\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED,\n            timeoutSeconds: isSet(object.timeoutSeconds) ? globalThis.Number(object.timeoutSeconds) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.toJSON(message.id);\n        }\n        if (message.taskDefId !== undefined) {\n            obj.taskDefId = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.toJSON(message.taskDefId);\n        }\n        if (message.attempts?.length) {\n            obj.attempts = message.attempts.map((e)=>TaskAttempt.toJSON(e));\n        }\n        if (message.maxAttempts !== 0) {\n            obj.maxAttempts = Math.round(message.maxAttempts);\n        }\n        if (message.inputVariables?.length) {\n            obj.inputVariables = message.inputVariables.map((e)=>VarNameAndVal.toJSON(e));\n        }\n        if (message.source !== undefined) {\n            obj.source = TaskRunSource.toJSON(message.source);\n        }\n        if (message.scheduledAt !== undefined) {\n            obj.scheduledAt = message.scheduledAt;\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusToJSON)(message.status);\n        }\n        if (message.timeoutSeconds !== 0) {\n            obj.timeoutSeconds = Math.round(message.timeoutSeconds);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskRun();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.fromPartial(object.id) : undefined;\n        message.taskDefId = object.taskDefId !== undefined && object.taskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskDefId.fromPartial(object.taskDefId) : undefined;\n        message.attempts = object.attempts?.map((e)=>TaskAttempt.fromPartial(e)) || [];\n        message.maxAttempts = object.maxAttempts ?? 0;\n        message.inputVariables = object.inputVariables?.map((e)=>VarNameAndVal.fromPartial(e)) || [];\n        message.source = object.source !== undefined && object.source !== null ? TaskRunSource.fromPartial(object.source) : undefined;\n        message.scheduledAt = object.scheduledAt ?? undefined;\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED;\n        message.timeoutSeconds = object.timeoutSeconds ?? 0;\n        return message;\n    }\n};\nfunction createBaseVarNameAndVal() {\n    return {\n        varName: \"\",\n        value: undefined\n    };\n}\nconst VarNameAndVal = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.varName !== \"\") {\n            writer.uint32(10).string(message.varName);\n        }\n        if (message.value !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVarNameAndVal();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.varName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            varName: isSet(object.varName) ? globalThis.String(object.varName) : \"\",\n            value: isSet(object.value) ? _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.varName !== \"\") {\n            obj.varName = message.varName;\n        }\n        if (message.value !== undefined) {\n            obj.value = _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return VarNameAndVal.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVarNameAndVal();\n        message.varName = object.varName ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseTaskAttempt() {\n    return {\n        logOutput: undefined,\n        scheduleTime: undefined,\n        startTime: undefined,\n        endTime: undefined,\n        taskWorkerId: \"\",\n        taskWorkerVersion: undefined,\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED,\n        output: undefined,\n        error: undefined,\n        exception: undefined\n    };\n}\nconst TaskAttempt = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.logOutput !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.encode(message.logOutput, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.scheduleTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.scheduleTime), writer.uint32(26).fork()).ldelim();\n        }\n        if (message.startTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(34).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(42).fork()).ldelim();\n        }\n        if (message.taskWorkerId !== \"\") {\n            writer.uint32(58).string(message.taskWorkerId);\n        }\n        if (message.taskWorkerVersion !== undefined) {\n            writer.uint32(66).string(message.taskWorkerVersion);\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED) {\n            writer.uint32(72).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusToNumber)(message.status));\n        }\n        if (message.output !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.encode(message.output, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.error !== undefined) {\n            LHTaskError.encode(message.error, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.exception !== undefined) {\n            LHTaskException.encode(message.exception, writer.uint32(90).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskAttempt();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.logOutput = _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.scheduleTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.startTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.endTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.taskWorkerId = reader.string();\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.taskWorkerVersion = reader.string();\n                    continue;\n                case 9:\n                    if (tag !== 72) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusFromJSON)(reader.int32());\n                    continue;\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.output = _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 10:\n                    if (tag !== 82) {\n                        break;\n                    }\n                    message.error = LHTaskError.decode(reader, reader.uint32());\n                    continue;\n                case 11:\n                    if (tag !== 90) {\n                        break;\n                    }\n                    message.exception = LHTaskException.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            logOutput: isSet(object.logOutput) ? _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.fromJSON(object.logOutput) : undefined,\n            scheduleTime: isSet(object.scheduleTime) ? globalThis.String(object.scheduleTime) : undefined,\n            startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : undefined,\n            taskWorkerId: isSet(object.taskWorkerId) ? globalThis.String(object.taskWorkerId) : \"\",\n            taskWorkerVersion: isSet(object.taskWorkerVersion) ? globalThis.String(object.taskWorkerVersion) : undefined,\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED,\n            output: isSet(object.output) ? _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.fromJSON(object.output) : undefined,\n            error: isSet(object.error) ? LHTaskError.fromJSON(object.error) : undefined,\n            exception: isSet(object.exception) ? LHTaskException.fromJSON(object.exception) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.logOutput !== undefined) {\n            obj.logOutput = _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.toJSON(message.logOutput);\n        }\n        if (message.scheduleTime !== undefined) {\n            obj.scheduleTime = message.scheduleTime;\n        }\n        if (message.startTime !== undefined) {\n            obj.startTime = message.startTime;\n        }\n        if (message.endTime !== undefined) {\n            obj.endTime = message.endTime;\n        }\n        if (message.taskWorkerId !== \"\") {\n            obj.taskWorkerId = message.taskWorkerId;\n        }\n        if (message.taskWorkerVersion !== undefined) {\n            obj.taskWorkerVersion = message.taskWorkerVersion;\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.taskStatusToJSON)(message.status);\n        }\n        if (message.output !== undefined) {\n            obj.output = _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.toJSON(message.output);\n        }\n        if (message.error !== undefined) {\n            obj.error = LHTaskError.toJSON(message.error);\n        }\n        if (message.exception !== undefined) {\n            obj.exception = LHTaskException.toJSON(message.exception);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskAttempt.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskAttempt();\n        message.logOutput = object.logOutput !== undefined && object.logOutput !== null ? _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.fromPartial(object.logOutput) : undefined;\n        message.scheduleTime = object.scheduleTime ?? undefined;\n        message.startTime = object.startTime ?? undefined;\n        message.endTime = object.endTime ?? undefined;\n        message.taskWorkerId = object.taskWorkerId ?? \"\";\n        message.taskWorkerVersion = object.taskWorkerVersion ?? undefined;\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.TaskStatus.TASK_SCHEDULED;\n        message.output = object.output !== undefined && object.output !== null ? _variable__WEBPACK_IMPORTED_MODULE_5__.VariableValue.fromPartial(object.output) : undefined;\n        message.error = object.error !== undefined && object.error !== null ? LHTaskError.fromPartial(object.error) : undefined;\n        message.exception = object.exception !== undefined && object.exception !== null ? LHTaskException.fromPartial(object.exception) : undefined;\n        return message;\n    }\n};\nfunction createBaseTaskRunSource() {\n    return {\n        taskNode: undefined,\n        userTaskTrigger: undefined,\n        wfSpecId: undefined\n    };\n}\nconst TaskRunSource = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.taskNode !== undefined) {\n            TaskNodeReference.encode(message.taskNode, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.userTaskTrigger !== undefined) {\n            _user_tasks__WEBPACK_IMPORTED_MODULE_4__.UserTaskTriggerReference.encode(message.userTaskTrigger, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.encode(message.wfSpecId, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskRunSource();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskNode = TaskNodeReference.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.userTaskTrigger = _user_tasks__WEBPACK_IMPORTED_MODULE_4__.UserTaskTriggerReference.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskNode: isSet(object.taskNode) ? TaskNodeReference.fromJSON(object.taskNode) : undefined,\n            userTaskTrigger: isSet(object.userTaskTrigger) ? _user_tasks__WEBPACK_IMPORTED_MODULE_4__.UserTaskTriggerReference.fromJSON(object.userTaskTrigger) : undefined,\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromJSON(object.wfSpecId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskNode !== undefined) {\n            obj.taskNode = TaskNodeReference.toJSON(message.taskNode);\n        }\n        if (message.userTaskTrigger !== undefined) {\n            obj.userTaskTrigger = _user_tasks__WEBPACK_IMPORTED_MODULE_4__.UserTaskTriggerReference.toJSON(message.userTaskTrigger);\n        }\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskRunSource.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskRunSource();\n        message.taskNode = object.taskNode !== undefined && object.taskNode !== null ? TaskNodeReference.fromPartial(object.taskNode) : undefined;\n        message.userTaskTrigger = object.userTaskTrigger !== undefined && object.userTaskTrigger !== null ? _user_tasks__WEBPACK_IMPORTED_MODULE_4__.UserTaskTriggerReference.fromPartial(object.userTaskTrigger) : undefined;\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        return message;\n    }\n};\nfunction createBaseTaskNodeReference() {\n    return {\n        nodeRunId: undefined\n    };\n}\nconst TaskNodeReference = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.nodeRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.encode(message.nodeRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTaskNodeReference();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.nodeRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            nodeRunId: isSet(object.nodeRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromJSON(object.nodeRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.nodeRunId !== undefined) {\n            obj.nodeRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.toJSON(message.nodeRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return TaskNodeReference.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTaskNodeReference();\n        message.nodeRunId = object.nodeRunId !== undefined && object.nodeRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromPartial(object.nodeRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseLHTaskError() {\n    return {\n        type: _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHErrorType.CHILD_FAILURE,\n        message: \"\"\n    };\n}\nconst LHTaskError = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHErrorType.CHILD_FAILURE) {\n            writer.uint32(8).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHErrorTypeToNumber)(message.type));\n        }\n        if (message.message !== \"\") {\n            writer.uint32(18).string(message.message);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLHTaskError();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHErrorTypeFromJSON)(reader.int32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.message = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            type: isSet(object.type) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHErrorTypeFromJSON)(object.type) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHErrorType.CHILD_FAILURE,\n            message: isSet(object.message) ? globalThis.String(object.message) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHErrorType.CHILD_FAILURE) {\n            obj.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHErrorTypeToJSON)(message.type);\n        }\n        if (message.message !== \"\") {\n            obj.message = message.message;\n        }\n        return obj;\n    },\n    create (base) {\n        return LHTaskError.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseLHTaskError();\n        message.type = object.type ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHErrorType.CHILD_FAILURE;\n        message.message = object.message ?? \"\";\n        return message;\n    }\n};\nfunction createBaseLHTaskException() {\n    return {\n        name: \"\",\n        message: \"\"\n    };\n}\nconst LHTaskException = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.message !== \"\") {\n            writer.uint32(18).string(message.message);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLHTaskException();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.message = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            message: isSet(object.message) ? globalThis.String(object.message) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.message !== \"\") {\n            obj.message = message.message;\n        }\n        return obj;\n    },\n    create (base) {\n        return LHTaskException.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseLHTaskException();\n        message.name = object.name ?? \"\";\n        message.message = object.message ?? \"\";\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/task_run.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/user_tasks.ts":
/*!**********************************************!*\
  !*** ./littlehorse-public-api/user_tasks.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssignUserTaskRunRequest: () => (/* binding */ AssignUserTaskRunRequest),\n/* harmony export */   CancelUserTaskRunRequest: () => (/* binding */ CancelUserTaskRunRequest),\n/* harmony export */   CompleteUserTaskRunRequest: () => (/* binding */ CompleteUserTaskRunRequest),\n/* harmony export */   CompleteUserTaskRunRequest_ResultsEntry: () => (/* binding */ CompleteUserTaskRunRequest_ResultsEntry),\n/* harmony export */   UserTaskDef: () => (/* binding */ UserTaskDef),\n/* harmony export */   UserTaskEvent: () => (/* binding */ UserTaskEvent),\n/* harmony export */   UserTaskEvent_UTEAssigned: () => (/* binding */ UserTaskEvent_UTEAssigned),\n/* harmony export */   UserTaskEvent_UTECancelled: () => (/* binding */ UserTaskEvent_UTECancelled),\n/* harmony export */   UserTaskEvent_UTETaskExecuted: () => (/* binding */ UserTaskEvent_UTETaskExecuted),\n/* harmony export */   UserTaskField: () => (/* binding */ UserTaskField),\n/* harmony export */   UserTaskRun: () => (/* binding */ UserTaskRun),\n/* harmony export */   UserTaskRunStatus: () => (/* binding */ UserTaskRunStatus),\n/* harmony export */   UserTaskRun_ResultsEntry: () => (/* binding */ UserTaskRun_ResultsEntry),\n/* harmony export */   UserTaskTriggerReference: () => (/* binding */ UserTaskTriggerReference),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   userTaskRunStatusFromJSON: () => (/* binding */ userTaskRunStatusFromJSON),\n/* harmony export */   userTaskRunStatusToJSON: () => (/* binding */ userTaskRunStatusToJSON),\n/* harmony export */   userTaskRunStatusToNumber: () => (/* binding */ userTaskRunStatusToNumber)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./variable */ \"(api)/./littlehorse-public-api/variable.ts\");\n/* eslint-disable */ \n\n\n\n\nconst protobufPackage = \"littlehorse\";\nvar UserTaskRunStatus;\n(function(UserTaskRunStatus) {\n    /** UNASSIGNED - Not assigned to a specific user yet. */ UserTaskRunStatus[\"UNASSIGNED\"] = \"UNASSIGNED\";\n    /** ASSIGNED - Assigned to a specific user, but not completed or cancelled yet. */ UserTaskRunStatus[\"ASSIGNED\"] = \"ASSIGNED\";\n    /** DONE - Done. */ UserTaskRunStatus[\"DONE\"] = \"DONE\";\n    /** CANCELLED - Cancelled. */ UserTaskRunStatus[\"CANCELLED\"] = \"CANCELLED\";\n    UserTaskRunStatus[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(UserTaskRunStatus || (UserTaskRunStatus = {}));\nfunction userTaskRunStatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNASSIGNED\":\n            return \"UNASSIGNED\";\n        case 1:\n        case \"ASSIGNED\":\n            return \"ASSIGNED\";\n        case 3:\n        case \"DONE\":\n            return \"DONE\";\n        case 4:\n        case \"CANCELLED\":\n            return \"CANCELLED\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction userTaskRunStatusToJSON(object) {\n    switch(object){\n        case \"UNASSIGNED\":\n            return \"UNASSIGNED\";\n        case \"ASSIGNED\":\n            return \"ASSIGNED\";\n        case \"DONE\":\n            return \"DONE\";\n        case \"CANCELLED\":\n            return \"CANCELLED\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction userTaskRunStatusToNumber(object) {\n    switch(object){\n        case \"UNASSIGNED\":\n            return 0;\n        case \"ASSIGNED\":\n            return 1;\n        case \"DONE\":\n            return 3;\n        case \"CANCELLED\":\n            return 4;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nfunction createBaseUserTaskDef() {\n    return {\n        name: \"\",\n        version: 0,\n        description: undefined,\n        fields: [],\n        createdAt: undefined\n    };\n}\nconst UserTaskDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.version !== 0) {\n            writer.uint32(16).int32(message.version);\n        }\n        if (message.description !== undefined) {\n            writer.uint32(26).string(message.description);\n        }\n        for (const v of message.fields){\n            UserTaskField.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.version = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.description = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.fields.push(UserTaskField.decode(reader, reader.uint32()));\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            version: isSet(object.version) ? globalThis.Number(object.version) : 0,\n            description: isSet(object.description) ? globalThis.String(object.description) : undefined,\n            fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e)=>UserTaskField.fromJSON(e)) : [],\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.version !== 0) {\n            obj.version = Math.round(message.version);\n        }\n        if (message.description !== undefined) {\n            obj.description = message.description;\n        }\n        if (message.fields?.length) {\n            obj.fields = message.fields.map((e)=>UserTaskField.toJSON(e));\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskDef();\n        message.name = object.name ?? \"\";\n        message.version = object.version ?? 0;\n        message.description = object.description ?? undefined;\n        message.fields = object.fields?.map((e)=>UserTaskField.fromPartial(e)) || [];\n        message.createdAt = object.createdAt ?? undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskField() {\n    return {\n        name: \"\",\n        type: _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ,\n        description: undefined,\n        displayName: \"\",\n        required: false\n    };\n}\nconst UserTaskField = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ) {\n            writer.uint32(16).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeToNumber)(message.type));\n        }\n        if (message.description !== undefined) {\n            writer.uint32(26).string(message.description);\n        }\n        if (message.displayName !== \"\") {\n            writer.uint32(34).string(message.displayName);\n        }\n        if (message.required === true) {\n            writer.uint32(40).bool(message.required);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskField();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.name = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeFromJSON)(reader.int32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.description = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.displayName = reader.string();\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.required = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? globalThis.String(object.name) : \"\",\n            type: isSet(object.type) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeFromJSON)(object.type) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ,\n            description: isSet(object.description) ? globalThis.String(object.description) : undefined,\n            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : \"\",\n            required: isSet(object.required) ? globalThis.Boolean(object.required) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.name !== \"\") {\n            obj.name = message.name;\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ) {\n            obj.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeToJSON)(message.type);\n        }\n        if (message.description !== undefined) {\n            obj.description = message.description;\n        }\n        if (message.displayName !== \"\") {\n            obj.displayName = message.displayName;\n        }\n        if (message.required === true) {\n            obj.required = message.required;\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskField.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskField();\n        message.name = object.name ?? \"\";\n        message.type = object.type ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ;\n        message.description = object.description ?? undefined;\n        message.displayName = object.displayName ?? \"\";\n        message.required = object.required ?? false;\n        return message;\n    }\n};\nfunction createBaseUserTaskRun() {\n    return {\n        id: undefined,\n        userTaskDefId: undefined,\n        userGroup: undefined,\n        userId: undefined,\n        results: {},\n        status: \"UNASSIGNED\",\n        events: [],\n        notes: undefined,\n        scheduledTime: undefined,\n        nodeRunId: undefined,\n        epoch: 0\n    };\n}\nconst UserTaskRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.userTaskDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskDefId.encode(message.userTaskDefId, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.userGroup !== undefined) {\n            writer.uint32(26).string(message.userGroup);\n        }\n        if (message.userId !== undefined) {\n            writer.uint32(34).string(message.userId);\n        }\n        Object.entries(message.results).forEach(([key, value])=>{\n            UserTaskRun_ResultsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(50).fork()).ldelim();\n        });\n        if (message.status !== \"UNASSIGNED\") {\n            writer.uint32(56).int32(userTaskRunStatusToNumber(message.status));\n        }\n        for (const v of message.events){\n            UserTaskEvent.encode(v, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.notes !== undefined) {\n            writer.uint32(74).string(message.notes);\n        }\n        if (message.scheduledTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.scheduledTime), writer.uint32(82).fork()).ldelim();\n        }\n        if (message.nodeRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.encode(message.nodeRunId, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.epoch !== 0) {\n            writer.uint32(96).int32(message.epoch);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.userTaskDefId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskDefId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.userGroup = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.userId = reader.string();\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    const entry6 = UserTaskRun_ResultsEntry.decode(reader, reader.uint32());\n                    if (entry6.value !== undefined) {\n                        message.results[entry6.key] = entry6.value;\n                    }\n                    continue;\n                case 7:\n                    if (tag !== 56) {\n                        break;\n                    }\n                    message.status = userTaskRunStatusFromJSON(reader.int32());\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.events.push(UserTaskEvent.decode(reader, reader.uint32()));\n                    continue;\n                case 9:\n                    if (tag !== 74) {\n                        break;\n                    }\n                    message.notes = reader.string();\n                    continue;\n                case 10:\n                    if (tag !== 82) {\n                        break;\n                    }\n                    message.scheduledTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 11:\n                    if (tag !== 90) {\n                        break;\n                    }\n                    message.nodeRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.decode(reader, reader.uint32());\n                    continue;\n                case 12:\n                    if (tag !== 96) {\n                        break;\n                    }\n                    message.epoch = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromJSON(object.id) : undefined,\n            userTaskDefId: isSet(object.userTaskDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskDefId.fromJSON(object.userTaskDefId) : undefined,\n            userGroup: isSet(object.userGroup) ? globalThis.String(object.userGroup) : undefined,\n            userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,\n            results: isObject(object.results) ? Object.entries(object.results).reduce((acc, [key, value])=>{\n                acc[key] = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            status: isSet(object.status) ? userTaskRunStatusFromJSON(object.status) : \"UNASSIGNED\",\n            events: globalThis.Array.isArray(object?.events) ? object.events.map((e)=>UserTaskEvent.fromJSON(e)) : [],\n            notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,\n            scheduledTime: isSet(object.scheduledTime) ? globalThis.String(object.scheduledTime) : undefined,\n            nodeRunId: isSet(object.nodeRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromJSON(object.nodeRunId) : undefined,\n            epoch: isSet(object.epoch) ? globalThis.Number(object.epoch) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.toJSON(message.id);\n        }\n        if (message.userTaskDefId !== undefined) {\n            obj.userTaskDefId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskDefId.toJSON(message.userTaskDefId);\n        }\n        if (message.userGroup !== undefined) {\n            obj.userGroup = message.userGroup;\n        }\n        if (message.userId !== undefined) {\n            obj.userId = message.userId;\n        }\n        if (message.results) {\n            const entries = Object.entries(message.results);\n            if (entries.length > 0) {\n                obj.results = {};\n                entries.forEach(([k, v])=>{\n                    obj.results[k] = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.toJSON(v);\n                });\n            }\n        }\n        if (message.status !== \"UNASSIGNED\") {\n            obj.status = userTaskRunStatusToJSON(message.status);\n        }\n        if (message.events?.length) {\n            obj.events = message.events.map((e)=>UserTaskEvent.toJSON(e));\n        }\n        if (message.notes !== undefined) {\n            obj.notes = message.notes;\n        }\n        if (message.scheduledTime !== undefined) {\n            obj.scheduledTime = message.scheduledTime;\n        }\n        if (message.nodeRunId !== undefined) {\n            obj.nodeRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.toJSON(message.nodeRunId);\n        }\n        if (message.epoch !== 0) {\n            obj.epoch = Math.round(message.epoch);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskRun();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromPartial(object.id) : undefined;\n        message.userTaskDefId = object.userTaskDefId !== undefined && object.userTaskDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskDefId.fromPartial(object.userTaskDefId) : undefined;\n        message.userGroup = object.userGroup ?? undefined;\n        message.userId = object.userId ?? undefined;\n        message.results = Object.entries(object.results ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.status = object.status ?? \"UNASSIGNED\";\n        message.events = object.events?.map((e)=>UserTaskEvent.fromPartial(e)) || [];\n        message.notes = object.notes ?? undefined;\n        message.scheduledTime = object.scheduledTime ?? undefined;\n        message.nodeRunId = object.nodeRunId !== undefined && object.nodeRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromPartial(object.nodeRunId) : undefined;\n        message.epoch = object.epoch ?? 0;\n        return message;\n    }\n};\nfunction createBaseUserTaskRun_ResultsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst UserTaskRun_ResultsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskRun_ResultsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskRun_ResultsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskRun_ResultsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseAssignUserTaskRunRequest() {\n    return {\n        userTaskRunId: undefined,\n        overrideClaim: false,\n        userGroup: undefined,\n        userId: undefined\n    };\n}\nconst AssignUserTaskRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.userTaskRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.encode(message.userTaskRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.overrideClaim === true) {\n            writer.uint32(16).bool(message.overrideClaim);\n        }\n        if (message.userGroup !== undefined) {\n            writer.uint32(26).string(message.userGroup);\n        }\n        if (message.userId !== undefined) {\n            writer.uint32(34).string(message.userId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAssignUserTaskRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.overrideClaim = reader.bool();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.userGroup = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.userId = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            userTaskRunId: isSet(object.userTaskRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromJSON(object.userTaskRunId) : undefined,\n            overrideClaim: isSet(object.overrideClaim) ? globalThis.Boolean(object.overrideClaim) : false,\n            userGroup: isSet(object.userGroup) ? globalThis.String(object.userGroup) : undefined,\n            userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.userTaskRunId !== undefined) {\n            obj.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.toJSON(message.userTaskRunId);\n        }\n        if (message.overrideClaim === true) {\n            obj.overrideClaim = message.overrideClaim;\n        }\n        if (message.userGroup !== undefined) {\n            obj.userGroup = message.userGroup;\n        }\n        if (message.userId !== undefined) {\n            obj.userId = message.userId;\n        }\n        return obj;\n    },\n    create (base) {\n        return AssignUserTaskRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseAssignUserTaskRunRequest();\n        message.userTaskRunId = object.userTaskRunId !== undefined && object.userTaskRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromPartial(object.userTaskRunId) : undefined;\n        message.overrideClaim = object.overrideClaim ?? false;\n        message.userGroup = object.userGroup ?? undefined;\n        message.userId = object.userId ?? undefined;\n        return message;\n    }\n};\nfunction createBaseCompleteUserTaskRunRequest() {\n    return {\n        userTaskRunId: undefined,\n        results: {},\n        userId: \"\"\n    };\n}\nconst CompleteUserTaskRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.userTaskRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.encode(message.userTaskRunId, writer.uint32(10).fork()).ldelim();\n        }\n        Object.entries(message.results).forEach(([key, value])=>{\n            CompleteUserTaskRunRequest_ResultsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(18).fork()).ldelim();\n        });\n        if (message.userId !== \"\") {\n            writer.uint32(26).string(message.userId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompleteUserTaskRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    const entry2 = CompleteUserTaskRunRequest_ResultsEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.results[entry2.key] = entry2.value;\n                    }\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.userId = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            userTaskRunId: isSet(object.userTaskRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromJSON(object.userTaskRunId) : undefined,\n            results: isObject(object.results) ? Object.entries(object.results).reduce((acc, [key, value])=>{\n                acc[key] = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.userTaskRunId !== undefined) {\n            obj.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.toJSON(message.userTaskRunId);\n        }\n        if (message.results) {\n            const entries = Object.entries(message.results);\n            if (entries.length > 0) {\n                obj.results = {};\n                entries.forEach(([k, v])=>{\n                    obj.results[k] = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.toJSON(v);\n                });\n            }\n        }\n        if (message.userId !== \"\") {\n            obj.userId = message.userId;\n        }\n        return obj;\n    },\n    create (base) {\n        return CompleteUserTaskRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseCompleteUserTaskRunRequest();\n        message.userTaskRunId = object.userTaskRunId !== undefined && object.userTaskRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromPartial(object.userTaskRunId) : undefined;\n        message.results = Object.entries(object.results ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.userId = object.userId ?? \"\";\n        return message;\n    }\n};\nfunction createBaseCompleteUserTaskRunRequest_ResultsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst CompleteUserTaskRunRequest_ResultsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompleteUserTaskRunRequest_ResultsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return CompleteUserTaskRunRequest_ResultsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseCompleteUserTaskRunRequest_ResultsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseCancelUserTaskRunRequest() {\n    return {\n        userTaskRunId: undefined\n    };\n}\nconst CancelUserTaskRunRequest = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.userTaskRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.encode(message.userTaskRunId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCancelUserTaskRunRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            userTaskRunId: isSet(object.userTaskRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromJSON(object.userTaskRunId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.userTaskRunId !== undefined) {\n            obj.userTaskRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.toJSON(message.userTaskRunId);\n        }\n        return obj;\n    },\n    create (base) {\n        return CancelUserTaskRunRequest.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseCancelUserTaskRunRequest();\n        message.userTaskRunId = object.userTaskRunId !== undefined && object.userTaskRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.UserTaskRunId.fromPartial(object.userTaskRunId) : undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskTriggerReference() {\n    return {\n        nodeRunId: undefined,\n        userTaskEventNumber: 0,\n        userId: undefined,\n        userGroup: undefined\n    };\n}\nconst UserTaskTriggerReference = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.nodeRunId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.encode(message.nodeRunId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.userTaskEventNumber !== 0) {\n            writer.uint32(16).int32(message.userTaskEventNumber);\n        }\n        if (message.userId !== undefined) {\n            writer.uint32(26).string(message.userId);\n        }\n        if (message.userGroup !== undefined) {\n            writer.uint32(34).string(message.userGroup);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskTriggerReference();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.nodeRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.userTaskEventNumber = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.userId = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.userGroup = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            nodeRunId: isSet(object.nodeRunId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromJSON(object.nodeRunId) : undefined,\n            userTaskEventNumber: isSet(object.userTaskEventNumber) ? globalThis.Number(object.userTaskEventNumber) : 0,\n            userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,\n            userGroup: isSet(object.userGroup) ? globalThis.String(object.userGroup) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.nodeRunId !== undefined) {\n            obj.nodeRunId = _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.toJSON(message.nodeRunId);\n        }\n        if (message.userTaskEventNumber !== 0) {\n            obj.userTaskEventNumber = Math.round(message.userTaskEventNumber);\n        }\n        if (message.userId !== undefined) {\n            obj.userId = message.userId;\n        }\n        if (message.userGroup !== undefined) {\n            obj.userGroup = message.userGroup;\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskTriggerReference.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskTriggerReference();\n        message.nodeRunId = object.nodeRunId !== undefined && object.nodeRunId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.NodeRunId.fromPartial(object.nodeRunId) : undefined;\n        message.userTaskEventNumber = object.userTaskEventNumber ?? 0;\n        message.userId = object.userId ?? undefined;\n        message.userGroup = object.userGroup ?? undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskEvent() {\n    return {\n        time: undefined,\n        taskExecuted: undefined,\n        assigned: undefined,\n        cancelled: undefined\n    };\n}\nconst UserTaskEvent = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.time !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.taskExecuted !== undefined) {\n            UserTaskEvent_UTETaskExecuted.encode(message.taskExecuted, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.assigned !== undefined) {\n            UserTaskEvent_UTEAssigned.encode(message.assigned, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.cancelled !== undefined) {\n            UserTaskEvent_UTECancelled.encode(message.cancelled, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskEvent();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.time = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.taskExecuted = UserTaskEvent_UTETaskExecuted.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.assigned = UserTaskEvent_UTEAssigned.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.cancelled = UserTaskEvent_UTECancelled.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            time: isSet(object.time) ? globalThis.String(object.time) : undefined,\n            taskExecuted: isSet(object.taskExecuted) ? UserTaskEvent_UTETaskExecuted.fromJSON(object.taskExecuted) : undefined,\n            assigned: isSet(object.assigned) ? UserTaskEvent_UTEAssigned.fromJSON(object.assigned) : undefined,\n            cancelled: isSet(object.cancelled) ? UserTaskEvent_UTECancelled.fromJSON(object.cancelled) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.time !== undefined) {\n            obj.time = message.time;\n        }\n        if (message.taskExecuted !== undefined) {\n            obj.taskExecuted = UserTaskEvent_UTETaskExecuted.toJSON(message.taskExecuted);\n        }\n        if (message.assigned !== undefined) {\n            obj.assigned = UserTaskEvent_UTEAssigned.toJSON(message.assigned);\n        }\n        if (message.cancelled !== undefined) {\n            obj.cancelled = UserTaskEvent_UTECancelled.toJSON(message.cancelled);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskEvent.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskEvent();\n        message.time = object.time ?? undefined;\n        message.taskExecuted = object.taskExecuted !== undefined && object.taskExecuted !== null ? UserTaskEvent_UTETaskExecuted.fromPartial(object.taskExecuted) : undefined;\n        message.assigned = object.assigned !== undefined && object.assigned !== null ? UserTaskEvent_UTEAssigned.fromPartial(object.assigned) : undefined;\n        message.cancelled = object.cancelled !== undefined && object.cancelled !== null ? UserTaskEvent_UTECancelled.fromPartial(object.cancelled) : undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskEvent_UTECancelled() {\n    return {\n        message: \"\"\n    };\n}\nconst UserTaskEvent_UTECancelled = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.message !== \"\") {\n            writer.uint32(10).string(message.message);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskEvent_UTECancelled();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.message = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            message: isSet(object.message) ? globalThis.String(object.message) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.message !== \"\") {\n            obj.message = message.message;\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskEvent_UTECancelled.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskEvent_UTECancelled();\n        message.message = object.message ?? \"\";\n        return message;\n    }\n};\nfunction createBaseUserTaskEvent_UTETaskExecuted() {\n    return {\n        taskRun: undefined\n    };\n}\nconst UserTaskEvent_UTETaskExecuted = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.taskRun !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.encode(message.taskRun, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskEvent_UTETaskExecuted();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.taskRun = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            taskRun: isSet(object.taskRun) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.fromJSON(object.taskRun) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.taskRun !== undefined) {\n            obj.taskRun = _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.toJSON(message.taskRun);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskEvent_UTETaskExecuted.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskEvent_UTETaskExecuted();\n        message.taskRun = object.taskRun !== undefined && object.taskRun !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.TaskRunId.fromPartial(object.taskRun) : undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskEvent_UTEAssigned() {\n    return {\n        oldUserId: undefined,\n        oldUserGroup: undefined,\n        newUserId: undefined,\n        newUserGroup: undefined\n    };\n}\nconst UserTaskEvent_UTEAssigned = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.oldUserId !== undefined) {\n            writer.uint32(10).string(message.oldUserId);\n        }\n        if (message.oldUserGroup !== undefined) {\n            writer.uint32(18).string(message.oldUserGroup);\n        }\n        if (message.newUserId !== undefined) {\n            writer.uint32(26).string(message.newUserId);\n        }\n        if (message.newUserGroup !== undefined) {\n            writer.uint32(34).string(message.newUserGroup);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskEvent_UTEAssigned();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.oldUserId = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.oldUserGroup = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.newUserId = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.newUserGroup = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            oldUserId: isSet(object.oldUserId) ? globalThis.String(object.oldUserId) : undefined,\n            oldUserGroup: isSet(object.oldUserGroup) ? globalThis.String(object.oldUserGroup) : undefined,\n            newUserId: isSet(object.newUserId) ? globalThis.String(object.newUserId) : undefined,\n            newUserGroup: isSet(object.newUserGroup) ? globalThis.String(object.newUserGroup) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.oldUserId !== undefined) {\n            obj.oldUserId = message.oldUserId;\n        }\n        if (message.oldUserGroup !== undefined) {\n            obj.oldUserGroup = message.oldUserGroup;\n        }\n        if (message.newUserId !== undefined) {\n            obj.newUserId = message.newUserId;\n        }\n        if (message.newUserGroup !== undefined) {\n            obj.newUserGroup = message.newUserGroup;\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskEvent_UTEAssigned.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskEvent_UTEAssigned();\n        message.oldUserId = object.oldUserId ?? undefined;\n        message.oldUserGroup = object.oldUserGroup ?? undefined;\n        message.newUserId = object.newUserId ?? undefined;\n        message.newUserGroup = object.newUserGroup ?? undefined;\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saXR0bGVob3JzZS1wdWJsaWMtYXBpL3VzZXJfdGFza3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0JBQWtCLEdBQ3dCO0FBQ29FO0FBQ3REO0FBQ3lCO0FBQ3RDO0FBRXBDLE1BQU1XLGtCQUFrQixjQUFjOztVQUdqQ0M7SUFDVixzREFBc0Q7SUFFdEQsZ0ZBQWdGO0lBRWhGLGlCQUFpQjtJQUVqQiwyQkFBMkI7O0dBUGpCQSxzQkFBQUE7QUFZTCxTQUFTQywwQkFBMEJDLE1BQVc7SUFDbkQsT0FBUUE7UUFDTixLQUFLO1FBQ0wsS0FBSztZQUNIO1FBQ0YsS0FBSztRQUNMLEtBQUs7WUFDSDtRQUNGLEtBQUs7UUFDTCxLQUFLO1lBQ0g7UUFDRixLQUFLO1FBQ0wsS0FBSztZQUNIO1FBQ0YsS0FBSyxDQUFDO1FBQ04sS0FBSztRQUNMO1lBQ0U7SUFDSjtBQUNGO0FBRU8sU0FBU0Msd0JBQXdCRCxNQUF5QjtJQUMvRCxPQUFRQTtRQUNOO1lBQ0UsT0FBTztRQUNUO1lBQ0UsT0FBTztRQUNUO1lBQ0UsT0FBTztRQUNUO1lBQ0UsT0FBTztRQUNUO1FBQ0E7WUFDRSxPQUFPO0lBQ1g7QUFDRjtBQUVPLFNBQVNFLDBCQUEwQkYsTUFBeUI7SUFDakUsT0FBUUE7UUFDTjtZQUNFLE9BQU87UUFDVDtZQUNFLE9BQU87UUFDVDtZQUNFLE9BQU87UUFDVDtZQUNFLE9BQU87UUFDVDtRQUNBO1lBQ0UsT0FBTyxDQUFDO0lBQ1o7QUFDRjtBQXFRQSxTQUFTRztJQUNQLE9BQU87UUFBRUMsTUFBTTtRQUFJQyxTQUFTO1FBQUdDLGFBQWFDO1FBQVdDLFFBQVEsRUFBRTtRQUFFQyxXQUFXRjtJQUFVO0FBQzFGO0FBRU8sTUFBTUcsY0FBYztJQUN6QkMsUUFBT0MsT0FBb0IsRUFBRUMsU0FBcUIzQixzREFBVSxDQUFDNkIsTUFBTSxFQUFFO1FBQ25FLElBQUlILFFBQVFSLElBQUksS0FBSyxJQUFJO1lBQ3ZCUyxPQUFPRyxN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UyxJQUFJekc7UUFDeENLLFFBQVFxRyxZQUFZLEdBQUdqSCxPQUFPaUgsWUFBWSxJQUFJMUc7UUFDOUMsT0FBT0s7SUFDVDtBQUNGLEVBQUU7QUFjRixTQUFTVyxZQUFZMkYsT0FBZTtJQUNsQyxNQUFNQyxPQUFPLElBQUk3RSxXQUFXOEUsSUFBSSxDQUFDRjtJQUNqQyxNQUFNRyxVQUFVdEUsS0FBS3VFLEtBQUssQ0FBQ0gsS0FBS0ksT0FBTyxLQUFLO0lBQzVDLE1BQU1DLFFBQVEsS0FBTUQsT0FBTyxLQUFLLE9BQVM7SUFDekMsT0FBTztRQUFFRjtRQUFTRztJQUFNO0FBQzFCO0FBRUEsU0FBU3RGLGNBQWN1RixDQUFZO0lBQ2pDLElBQUlDLFNBQVMsQ0FBQ0QsRUFBRUosT0FBTyxJQUFJLEtBQUs7SUFDaENLLFVBQVUsQ0FBQ0QsRUFBRUQsS0FBSyxJQUFJLEtBQUs7SUFDM0IsT0FBTyxJQUFJbEYsV0FBVzhFLElBQUksQ0FBQ00sUUFBUUMsV0FBVztBQUNoRDtBQUVBLFNBQVM1QyxTQUFTSixLQUFVO0lBQzFCLE9BQU8sT0FBT0EsVUFBVSxZQUFZQSxVQUFVO0FBQ2hEO0FBRUEsU0FBU3RDLE1BQU1zQyxLQUFVO0lBQ3ZCLE9BQU9BLFVBQVUsUUFBUUEsVUFBVXBFO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbGl0dGxlaG9yc2UtcHVibGljLWFwaS91c2VyX3Rhc2tzLnRzPzQ3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCAqIGFzIF9tMCBmcm9tIFwicHJvdG9idWZqcy9taW5pbWFsXCI7XG5pbXBvcnQgeyBWYXJpYWJsZVR5cGUsIHZhcmlhYmxlVHlwZUZyb21KU09OLCB2YXJpYWJsZVR5cGVUb0pTT04sIHZhcmlhYmxlVHlwZVRvTnVtYmVyIH0gZnJvbSBcIi4vY29tbW9uX2VudW1zXCI7XG5pbXBvcnQgeyBUaW1lc3RhbXAgfSBmcm9tIFwiLi9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wXCI7XG5pbXBvcnQgeyBOb2RlUnVuSWQsIFRhc2tSdW5JZCwgVXNlclRhc2tEZWZJZCwgVXNlclRhc2tSdW5JZCB9IGZyb20gXCIuL29iamVjdF9pZFwiO1xuaW1wb3J0IHsgVmFyaWFibGVWYWx1ZSB9IGZyb20gXCIuL3ZhcmlhYmxlXCI7XG5cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSBcImxpdHRsZWhvcnNlXCI7XG5cbi8qKiBUaGUgc3RhdHVzIHRoYXQgYSBVc2VyVGFza1J1biBjYW4gYmUgaW4uICovXG5leHBvcnQgZW51bSBVc2VyVGFza1J1blN0YXR1cyB7XG4gIC8qKiBVTkFTU0lHTkVEIC0gTm90IGFzc2lnbmVkIHRvIGEgc3BlY2lmaWMgdXNlciB5ZXQuICovXG4gIFVOQVNTSUdORUQgPSBcIlVOQVNTSUdORURcIixcbiAgLyoqIEFTU0lHTkVEIC0gQXNzaWduZWQgdG8gYSBzcGVjaWZpYyB1c2VyLCBidXQgbm90IGNvbXBsZXRlZCBvciBjYW5jZWxsZWQgeWV0LiAqL1xuICBBU1NJR05FRCA9IFwiQVNTSUdORURcIixcbiAgLyoqIERPTkUgLSBEb25lLiAqL1xuICBET05FID0gXCJET05FXCIsXG4gIC8qKiBDQU5DRUxMRUQgLSBDYW5jZWxsZWQuICovXG4gIENBTkNFTExFRCA9IFwiQ0FOQ0VMTEVEXCIsXG4gIFVOUkVDT0dOSVpFRCA9IFwiVU5SRUNPR05JWkVEXCIsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VyVGFza1J1blN0YXR1c0Zyb21KU09OKG9iamVjdDogYW55KTogVXNlclRhc2tSdW5TdGF0dXMge1xuICBzd2l0Y2ggKG9iamVjdCkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIFwiVU5BU1NJR05FRFwiOlxuICAgICAgcmV0dXJuIFVzZXJUYXNrUnVuU3RhdHVzLlVOQVNTSUdORUQ7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgXCJBU1NJR05FRFwiOlxuICAgICAgcmV0dXJuIFVzZXJUYXNrUnVuU3RhdHVzLkFTU0lHTkVEO1xuICAgIGNhc2UgMzpcbiAgICBjYXNlIFwiRE9ORVwiOlxuICAgICAgcmV0dXJuIFVzZXJUYXNrUnVuU3RhdHVzLkRPTkU7XG4gICAgY2FzZSA0OlxuICAgIGNhc2UgXCJDQU5DRUxMRURcIjpcbiAgICAgIHJldHVybiBVc2VyVGFza1J1blN0YXR1cy5DQU5DRUxMRUQ7XG4gICAgY2FzZSAtMTpcbiAgICBjYXNlIFwiVU5SRUNPR05JWkVEXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBVc2VyVGFza1J1blN0YXR1cy5VTlJFQ09HTklaRUQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJUYXNrUnVuU3RhdHVzVG9KU09OKG9iamVjdDogVXNlclRhc2tSdW5TdGF0dXMpOiBzdHJpbmcge1xuICBzd2l0Y2ggKG9iamVjdCkge1xuICAgIGNhc2UgVXNlclRhc2tSdW5TdGF0dXMuVU5BU1NJR05FRDpcbiAgICAgIHJldHVybiBcIlVOQVNTSUdORURcIjtcbiAgICBjYXNlIFVzZXJUYXNrUnVuU3RhdHVzLkFTU0lHTkVEOlxuICAgICAgcmV0dXJuIFwiQVNTSUdORURcIjtcbiAgICBjYXNlIFVzZXJUYXNrUnVuU3RhdHVzLkRPTkU6XG4gICAgICByZXR1cm4gXCJET05FXCI7XG4gICAgY2FzZSBVc2VyVGFza1J1blN0YXR1cy5DQU5DRUxMRUQ6XG4gICAgICByZXR1cm4gXCJDQU5DRUxMRURcIjtcbiAgICBjYXNlIFVzZXJUYXNrUnVuU3RhdHVzLlVOUkVDT0dOSVpFRDpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiVU5SRUNPR05JWkVEXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJUYXNrUnVuU3RhdHVzVG9OdW1iZXIob2JqZWN0OiBVc2VyVGFza1J1blN0YXR1cyk6IG51bWJlciB7XG4gIHN3aXRjaCAob2JqZWN0KSB7XG4gICAgY2FzZSBVc2VyVGFza1J1blN0YXR1cy5VTkFTU0lHTkVEOlxuICAgICAgcmV0dXJuIDA7XG4gICAgY2FzZSBVc2VyVGFza1J1blN0YXR1cy5BU1NJR05FRDpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgVXNlclRhc2tSdW5TdGF0dXMuRE9ORTpcbiAgICAgIHJldHVybiAzO1xuICAgIGNhc2UgVXNlclRhc2tSdW5TdGF0dXMuQ0FOQ0VMTEVEOlxuICAgICAgcmV0dXJuIDQ7XG4gICAgY2FzZSBVc2VyVGFza1J1blN0YXR1cy5VTlJFQ09HTklaRUQ6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAtMTtcbiAgfVxufVxuXG4vKiogVXNlclRhc2tEZWYgaXMgdGhlIG1ldGFkYXRhIGJsdWVwcmludCBmb3IgVXNlclRhc2tSdW5zLiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VyVGFza0RlZiB7XG4gIC8qKiBUaGUgbmFtZSBvZiB0aGUgYFVzZXJUYXNrRGVmYCAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiBUaGUgdmVyc2lvbiBvZiB0aGUgYFVzZXJUYXNrRGVmYC4gT25seSBzaW1wbGUgdmVyc2lvbmluZyBpcyBzdXBwb3J0ZWQuICovXG4gIHZlcnNpb246IG51bWJlcjtcbiAgLyoqXG4gICAqIE1ldGFkYXRhIGZpZWxkIHRoYXQgZG9lcyBub3QgaW1wYWN0IFdmUnVuIGV4ZWN1dGlvbi4gVXNlZnVsIGZvciBwcm92aWRpbmdcbiAgICogY29udGV4dCBvbiB0aGUgVXNlclRhc2tSdW4sIGZvciBleGFtcGxlIHdoZW4gZGlzcGxheWluZyBpdCBvbiBhIGdlbmVyYWwtcHVycG9zZVxuICAgKiB0YXNrIG1hbmFnZXIgYXBwbGljYXRpb24uXG4gICAqL1xuICBkZXNjcmlwdGlvbj86XG4gICAgfCBzdHJpbmdcbiAgICB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFRoZXNlIGFyZSB0aGUgZmllbGRzIGNvbXByaXNlIHRoZSBVc2VyIFRhc2suIEEgVXNlciBUYXNrIE1hbmFnZXIgYXBwbGljYXRpb24sIG9yXG4gICAqIGFueSBhcHBsaWNhdGlvbiB1c2VkIHRvIGNvbXBsZXRlIGEgVXNlclRhc2tSdW4sIHNob3VsZCBpbnNwZWN0IHRoZXNlIGZpZWxkcyBhbmRcbiAgICogZGlzcGxheSBmb3JtIGVudHJpZXMgZm9yIGVhY2ggb25lLlxuICAgKi9cbiAgZmllbGRzOiBVc2VyVGFza0ZpZWxkW107XG4gIC8qKiBUaGUgdGltZSB0aGUgVXNlclRhc2tSdW4gd2FzIGNyZWF0ZWQuICovXG4gIGNyZWF0ZWRBdDogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG4vKiogQSBVc2VyVGFza0ZpZWxkIGlzIGEgc3BlY2lmaWMgZmllbGQgb2YgZGF0YSB0byBiZSBlbnRlcmVkIGludG8gYSBVc2VyVGFza1J1bi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclRhc2tGaWVsZCB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZmllbGQuIFdoZW4gYSBVc2VyVGFza1J1biBpcyBjb21wbGV0ZWQsIHRoZSBOb2RlT3V0cHV0IGlzIGFcbiAgICogc2luZ2xlLWxldmVsIEpTT05fT0JKLiBFYWNoIGtleSBpcyB0aGUgbmFtZSBvZiB0aGUgZmllbGQuIE11c3QgYmUgdW5pcXVlLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogVGhlIHR5cGUgb2YgdGhlIG91dHB1dC4gTXVzdCBiZSBhIHByaW1pdGl2ZSB0eXBlIChTVFIsIEJPT0wsIElOVCwgRE9VQkxFKS4gKi9cbiAgdHlwZTogVmFyaWFibGVUeXBlO1xuICAvKipcbiAgICogT3B0aW9uYWwgZGVzY3JpcHRpb24gd2hpY2ggY2FuIGJlIGRpc3BsYXllZCBieSB0aGUgVXNlciBUYXNrIFVJIGFwcGxpY2F0aW9uLlxuICAgKiBEb2VzIG5vdCBhZmZlY3QgV2ZSdW4gZXhlY3V0aW9uLlxuICAgKi9cbiAgZGVzY3JpcHRpb24/OlxuICAgIHwgc3RyaW5nXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSB0byBiZSBkaXNwbGF5ZWQgYnkgdGhlIFVzZXIgVGFzayBVSSBhcHBsaWNhdGlvbi4gRG9lcyBub3QgYWZmZWN0XG4gICAqIFdmUnVuIGV4ZWN1dGlvbi5cbiAgICovXG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIC8qKiBXaGV0aGVyIHRoaXMgZmllbGQgaXMgcmVxdWlyZWQgZm9yIFVzZXJUYXNrUnVuIGNvbXBsZXRpb24uICovXG4gIHJlcXVpcmVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgVXNlclRhc2tSdW4gaXMgYSBydW5uaW5nIGluc3RhbmNlIG9mIGEgVXNlclRhc2tEZWYuIEl0IGlzIGNyZWF0ZWQgd2hlbiBhXG4gKiBUaHJlYWRSdW4gYXJyaXZlcyBhdCBhIE5vZGUgb2YgdHlwZSBgVVNFUl9UQVNLYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VyVGFza1J1biB7XG4gIC8qKiBUaGUgSUQgb2YgdGhlIFVzZXJUYXNrUnVuLiAqL1xuICBpZDpcbiAgICB8IFVzZXJUYXNrUnVuSWRcbiAgICB8IHVuZGVmaW5lZDtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgVXNlclRhc2tEZWYgdGhhdCB0aGlzIFVzZXJUYXNrUnVuIGNvbWVzIGZyb20uICovXG4gIHVzZXJUYXNrRGVmSWQ6XG4gICAgfCBVc2VyVGFza0RlZklkXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgdXNlcl9ncm91cCB0byB3aGljaCB0aGlzIFVzZXJUYXNrUnVuIGlzIGFzc2lnbmVkLiBOb3QgU2V0IGlmIG5vdCBhc3NpZ25lZFxuICAgKiB0byBhIGdyb3VwLiBBdCBsZWFzdCBvbmUgb2YgdXNlcl9ncm91cCBvciB1c2VyX2lkIHdpbGwgYmUgc2V0IGZvciBhbnkgZ2l2ZW5cbiAgICogVXNlclRhc2tSdW4uXG4gICAqL1xuICB1c2VyR3JvdXA/OlxuICAgIHwgc3RyaW5nXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgdXNlcl9pZCB0byB3aGljaCB0aGlzIFVzZXJUYXNrUnVuIGlzIGFzc2lnbmVkLiBOb3QgU2V0IGlmIG5vdCBhc3NpZ25lZFxuICAgKiB0byBhIHVzZXIuIEF0IGxlYXN0IG9uZSBvZiB1c2VyX2dyb3VwIG9yIHVzZXJfaWQgd2lsbCBiZSBzZXQgZm9yIGFueSBnaXZlblxuICAgKiBVc2VyVGFza1J1bi4gSWYgdXNlcl9pZCBpcyBzZXQsIHRoZW4gdGhlIFVzZXJUYXNrUnVuIGNhbm5vdCBiZSBpbiB0aGVcbiAgICogVU5BU1NJR05FRCBzdGF0dXMuXG4gICAqL1xuICB1c2VySWQ/OlxuICAgIHwgc3RyaW5nXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgcmVzdWx0cyBvZiB0aGUgVXNlclRhc2tSdW4uIEVtcHR5IGlmIHRoZSBVc2VyVGFza1J1biBoYXMgbm90IHlldCBiZWVuIGNvbXBsZXRlZC5cbiAgICogRWFjaCBrZXkgaW4gdGhpcyBtYXAgaXMgdGhlIGBuYW1lYCBvZiBhIGNvcnJlc3BvbmRpbmcgYFVzZXJUYXNrRmllbGRgIG9uIHRoZVxuICAgKiBVc2VyVGFza0RlZi5cbiAgICovXG4gIHJlc3VsdHM6IHsgW2tleTogc3RyaW5nXTogVmFyaWFibGVWYWx1ZSB9O1xuICAvKiogU3RhdHVzIG9mIHRoZSBVc2VyVGFza1J1bi4gQ2FuIGJlIFVOQVNTSUdORUQsIEFTU0lHTkVELCBET05FLCBvciBDQU5DRUxMRUQuICovXG4gIHN0YXR1czogVXNlclRhc2tSdW5TdGF0dXM7XG4gIC8qKiBBIGxpc3Qgb2YgZXZlbnRzIHRoYXQgaGF2ZSBoYXBwZW5lZC4gVXNlZCBmb3IgYXVkaXRpbmcgaW5mb3JtYXRpb24uICovXG4gIGV2ZW50czogVXNlclRhc2tFdmVudFtdO1xuICAvKipcbiAgICogTm90ZXMgYWJvdXQgdGhpcyBVc2VyVGFza1J1biB0aGF0IGFyZSAqKnNwZWNpZmljIHRvIHRoZSBXZlJ1bioqLiBUaGVzZSBub3Rlc1xuICAgKiBhcmUgc2V0IGJ5IHRoZSBXZlNwZWMgYmFzZWQgb24gdmFyaWFibGVzIGluc2lkZSB0aGUgc3BlY2lmaWMgYFdmUnVuYCBhbmQgYXJlXG4gICAqIGludGVuZGVkIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgVXNlciBUYXNrIE1hbmFnZXIgYXBwbGljYXRpb24uIFRoZXkgZG8gbm90XG4gICAqIGFmZmVjdCBXZlJ1biBleGVjdXRpb24uXG4gICAqL1xuICBub3Rlcz86XG4gICAgfCBzdHJpbmdcbiAgICB8IHVuZGVmaW5lZDtcbiAgLyoqIFRoZSB0aW1lIHRoYXQgdGhlIFVzZXJUYXNrUnVuIHdhcyBjcmVhdGVkL3NjaGVkdWxlZC4gKi9cbiAgc2NoZWR1bGVkVGltZTpcbiAgICB8IHN0cmluZ1xuICAgIHwgdW5kZWZpbmVkO1xuICAvKiogVGhlIE5vZGVSdW4gd2l0aCB3aGljaCB0aGUgVXNlclRhc2tSdW4gaXMgYXNzb2NpYXRlZC4gKi9cbiAgbm9kZVJ1bklkOlxuICAgIHwgTm9kZVJ1bklkXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBDdXJyZW50IG9ic2VydmVkIGVwb2NoIG9mIHRoZSBVc2VyVGFza1J1biwgcmVsYXRlZCB0byB0aGUgbnVtYmVyIG9mIHRpbWVzIGl0IGhhcyBiZWVuXG4gICAqIHVwZGF0ZWQgb3IgcmUtYXNzaWduZWQuIFVzZWQgaW50ZXJuYWxseSB0byBpbXBsZW1lbnQgYXV0b21hdGVkIHJlYXNzaWdubWVudCBhbmQgcmVtaW5kZXJcbiAgICogdGFza3MuXG4gICAqL1xuICBlcG9jaDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJUYXNrUnVuX1Jlc3VsdHNFbnRyeSB7XG4gIGtleTogc3RyaW5nO1xuICB2YWx1ZTogVmFyaWFibGVWYWx1ZSB8IHVuZGVmaW5lZDtcbn1cblxuLyoqIFJlLUFzc2lnbnMgYSBVc2VyVGFza1J1biB0byBhIHNwZWNpZmljIHVzZXJJZCBvciB1c2VyR3JvdXAuICovXG5leHBvcnQgaW50ZXJmYWNlIEFzc2lnblVzZXJUYXNrUnVuUmVxdWVzdCB7XG4gIC8qKiBUaGUgVXNlclRhc2tSdW4gdG8gYXNzaWduIHRvIGEgbmV3IHVzZXJfaWQgb3IgdXNlcl9ncm91cC4gKi9cbiAgdXNlclRhc2tSdW5JZDpcbiAgICB8IFVzZXJUYXNrUnVuSWRcbiAgICB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIElmIG92ZXJyaWRlX2NsYWltIGlzIHNldCB0byBmYWxzZSBhbmQgdGhlIFVzZXJUYXNrUnVuIGlzIGFscmVhZHkgYXNzaWduZWQgdG9cbiAgICogYSB1c2VyX2lkLCB0aGVuIHRoZSByZXF1ZXN0IHRocm93cyBhIEZBSUxFRF9QUkVDT05ESVRJT04gZXJyb3IuIElmIHNldCB0b1xuICAgKiB0cnVlLCB0aGVuIHRoZSBvbGQgY2xhaW0gaXMgb3ZlcnJpZGVuIGFuZCB0aGUgVXNlclRhc2tSdW4gaXMgYXNzaWduZWQgdG9cbiAgICogdGhlIG5ldyB1c2VyLlxuICAgKi9cbiAgb3ZlcnJpZGVDbGFpbTogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSBuZXcgdXNlcl9ncm91cCB0byB3aGljaCB0aGUgVXNlclRhc2tSdW4gaXMgYXNzaWduZWQuIElmIG5vdCBzZXQsIHRoZW5cbiAgICogdGhlIHVzZXJfZ3JvdXAgb2YgdGhlIFVzZXJUYXNrUnVuIGlzIGFjdGl2ZWx5IHVuc2V0IGJ5IHRoaXMgcmVxdWVzdC4gQXQgbGVhc3RcbiAgICogb25lIG9mIHRoZSB1c2VyX2dyb3VwIGFuZCB1c2VyX2lkIG11c3QgYmUgc2V0LlxuICAgKi9cbiAgdXNlckdyb3VwPzpcbiAgICB8IHN0cmluZ1xuICAgIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlIG5ldyB1c2VyX2lkIHRvIHdoaWNoIHRoZSBVc2VyVGFza1J1biBpcyBhc3NpZ25lZC4gSWYgbm90IHNldCwgdGhlblxuICAgKiB0aGUgdXNlcl9pZCBvZiB0aGUgVXNlclRhc2tSdW4gaXMgYWN0aXZlbHkgdW5zZXQgYnkgdGhpcyByZXF1ZXN0LiBBdCBsZWFzdFxuICAgKiBvbmUgb2YgdGhlIHVzZXJfZ3JvdXAgYW5kIHVzZXJfaWQgbXVzdCBiZSBzZXQuXG4gICAqL1xuICB1c2VySWQ/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59XG5cbi8qKiBDb21wbGV0ZXMgYSBVc2VyVGFza1J1biB3aXRoIHByb3ZpZGVkIHZhbHVlcy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGVVc2VyVGFza1J1blJlcXVlc3Qge1xuICAvKiogVGhlIGlkIG9mIFVzZXJUYXNrUnVuIHRvIGNvbXBsZXRlLiAqL1xuICB1c2VyVGFza1J1bklkOlxuICAgIHwgVXNlclRhc2tSdW5JZFxuICAgIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogQSBtYXAgZnJvbSBVc2VyVGFza0ZpZWxkLm5hbWUgdG8gYSBWYXJpYWJsZVZhbHVlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb2YgdGhlXG4gICAqIHVzZXIgZmlsbGluZyBvdXQgdGhlIGZvcm0uXG4gICAqL1xuICByZXN1bHRzOiB7IFtrZXk6IHN0cmluZ106IFZhcmlhYmxlVmFsdWUgfTtcbiAgLyoqIFRoZSBJRCBvZiB0aGUgdXNlciB3aG8gZXhlY3V0ZWQgdGhlIHRhc2suICovXG4gIHVzZXJJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0X1Jlc3VsdHNFbnRyeSB7XG4gIGtleTogc3RyaW5nO1xuICB2YWx1ZTogVmFyaWFibGVWYWx1ZSB8IHVuZGVmaW5lZDtcbn1cblxuLyoqIENhbmNlbHMgYSBVc2VyVGFza1J1bi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgLyoqIFRoZSBpZCBvZiB0aGUgVXNlclRhc2tSdW4gdG8gY2FuY2VsLiAqL1xuICB1c2VyVGFza1J1bklkOiBVc2VyVGFza1J1bklkIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEFsbCBUYXNrUnVuJ3MgaGF2ZSBhIFwidHJpZ2dlciByZWZlcmVuY2VcIiB3aGljaCByZWZlcnMgdG8gdGhlIFdmUnVuIEVsZW1lbnQgdGhhdFxuICogY2F1c2VkIHRoZSBUYXNrUnVuIHRvIGJlIHNjaGVkdWxlZC4gRm9yIGV4YW1wbGUsIGEgVGFza1J1biBvbiBhIHJlZ3VsYXIgVEFTS19OT0RFXG4gKiBoYXMgYSBUYXNrTm9kZVJlZmVyZW5jZS5cbiAqXG4gKiBUaGUgVXNlclRhc2tUcmlnZ2VyUmVmZXJlbmNlIHNlcnZlcyBhcyB0aGUgXCJUcmlnZ2VyIFJlZmVyZW5jZVwiIGZvciBhIFRhc2tSdW4gdGhhdFxuICogd2FzIHNjaGVkdWxlZCBieSBhIGxpZmVjeWNsZSBob29rIG9uIGEgVXNlclRhc2tSdW4gKGVnLiBhIHJlbWluZGVyIHRhc2spLlxuICpcbiAqIFRoZSBVc2VyVGFza1RyaWdnZXJSZWZlcmVuY2UgaXMgbW9zdCB1c2VmdWwgaW4gdGhlIFdvcmtlckNvbnRleHQgb2YgdGhlIFRhc2sgV29ya2VyXG4gKiBTREssIHdoaWNoIGFsbG93cyB0aGUgVGFzayBNZXRob2QgdG8gZGV0ZXJtaW5lIHdoZXJlIHRoZSBUYXNrUnVuIGNvbWVzIGZyb20uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclRhc2tUcmlnZ2VyUmVmZXJlbmNlIHtcbiAgLyoqIElzIHRoZSBOb2RlUnVuIHRoYXQgdGhlIFVzZXJUYXNrUnVuIGJlbG9uZ3MgdG8uICovXG4gIG5vZGVSdW5JZDpcbiAgICB8IE5vZGVSdW5JZFxuICAgIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogSXMgdGhlIGluZGV4IGluIHRoZSBgZXZlbnRzYCBmaWVsZCBvZiB0aGUgVXNlclRhc2tSdW4gdGhhdCB0aGUgVGFza1J1biBjb3JyZXNwb25kc1xuICAgKiB0by5cbiAgICovXG4gIHVzZXJUYXNrRXZlbnROdW1iZXI6IG51bWJlcjtcbiAgLyoqXG4gICAqIElzIHRoZSB1c2VyX2lkIHRoYXQgdGhlIFVzZXJUYXNrUnVuIGlzIGFzc2lnbmVkIHRvLiBVbnNldCBpZiBVc2VyVGFza1J1biBpcyBub3RcbiAgICogYXNpZ25lZCB0byBhIHNwZWNpZmljIHVzZXJfaWQuXG4gICAqL1xuICB1c2VySWQ/OlxuICAgIHwgc3RyaW5nXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBJcyB0aGUgdXNlcl9pZCB0aGF0IHRoZSBVc2VyVGFza1J1biBpcyBhc3NpZ25lZCB0by4gVW5zZXQgaWYgVXNlclRhc2tSdW4gaXMgbm90XG4gICAqIGFzaWduZWQgdG8gYSBzcGVjaWZpYyB1c2VyX2lkLlxuICAgKi9cbiAgdXNlckdyb3VwPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXZlbnQgc3RvcmVkIGluIHRoZSBhdWRpdCBsb2cgb2YgYSBgVXNlclRhc2tSdW5gIHB1cmVseSBmb3Igb2JzZXJ2YWJpbGl0eVxuICogcHVycG9zZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclRhc2tFdmVudCB7XG4gIC8qKiB0aGUgdGltZSB0aGUgZXZlbnQgb2NjdXJyZWQuICovXG4gIHRpbWU6XG4gICAgfCBzdHJpbmdcbiAgICB8IHVuZGVmaW5lZDtcbiAgLyoqIERlbm90ZXMgdGhhdCBhIFRhc2tSdW4gd2FzIHNjaGVkdWxlZCB2aWEgYSB0cmlnZ2VyLiAqL1xuICB0YXNrRXhlY3V0ZWQ/OlxuICAgIHwgVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWRcbiAgICB8IHVuZGVmaW5lZDtcbiAgLyoqIERlbm90ZXMgdGhhdCB0aGUgVXNlclRhc2tSdW4gd2FzIGFzc2lnbmVkLiAqL1xuICBhc3NpZ25lZD86XG4gICAgfCBVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKiBEZW5vdGVzIHRoYXQgdGhlIFVzZXJUYXNrUnVuIHdhcyBjYW5jZWxsZWQuICovXG4gIGNhbmNlbGxlZD86IFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkIHwgdW5kZWZpbmVkO1xufVxuXG4vKiogRW1wdHkgbWVzc2FnZSB1c2VkIHRvIGRlbm90ZSB0aGF0IHRoZSBgVXNlclRhc2tSdW5gIHdhcyBjYW5jZWxsZWQuICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG4vKiogTWVzc2FnZSB0byBkZW5vdGUgdGhhdCBhIGBUYXNrUnVuYCB3YXMgc2NoZWR1bGVkIGJ5IGEgdHJpZ2dlciBmb3IgdGhpcyBVc2VyVGFza1J1bi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQge1xuICAvKiogVGhlIGBUYXNrUnVuSWRgIG9mIHRoZSBzY2hlZHVsZWQgYFRhc2tSdW5gICovXG4gIHRhc2tSdW46IFRhc2tSdW5JZCB8IHVuZGVmaW5lZDtcbn1cblxuLyoqIE1lc3NhZ2UgZGVub3RpbmcgdGhhdCB0aGUgVXNlclRhc2tSdW4gd2FzIGFzc2lnbmVkLiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkIHtcbiAgLyoqIFRoZSB1c2VyX2lkIGJlZm9yZSB0aGUgb3duZXJzaGlwIGNoYW5nZSwgaWYgc2V0LiAqL1xuICBvbGRVc2VySWQ/OlxuICAgIHwgc3RyaW5nXG4gICAgfCB1bmRlZmluZWQ7XG4gIC8qKiBUaGUgdXNlcl9ncm91cCBiZWZvcmUgdGhlIG93bmVyc2hpcCBjaGFuZ2UsIGlmIHNldC4gKi9cbiAgb2xkVXNlckdyb3VwPzpcbiAgICB8IHN0cmluZ1xuICAgIHwgdW5kZWZpbmVkO1xuICAvKiogVGhlIHVzZXJfaWQgYWZ0ZXIgdGhlIG93bmVyc2hpcCBjaGFuZ2UsIGlmIHNldC4gKi9cbiAgbmV3VXNlcklkPzpcbiAgICB8IHN0cmluZ1xuICAgIHwgdW5kZWZpbmVkO1xuICAvKiogVGhlIHVzZXJfZ3JvdXAgYWZ0ZXIgdGhlIG93bmVyc2hpcCBjaGFuZ2UsIGlmIHNldC4gKi9cbiAgbmV3VXNlckdyb3VwPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlVXNlclRhc2tEZWYoKTogVXNlclRhc2tEZWYge1xuICByZXR1cm4geyBuYW1lOiBcIlwiLCB2ZXJzaW9uOiAwLCBkZXNjcmlwdGlvbjogdW5kZWZpbmVkLCBmaWVsZHM6IFtdLCBjcmVhdGVkQXQ6IHVuZGVmaW5lZCB9O1xufVxuXG5leHBvcnQgY29uc3QgVXNlclRhc2tEZWYgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBVc2VyVGFza0RlZiwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLm5hbWUgIT09IFwiXCIpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLm5hbWUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS52ZXJzaW9uICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLnZlcnNpb24pO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS5kZXNjcmlwdGlvbik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmZpZWxkcykge1xuICAgICAgVXNlclRhc2tGaWVsZC5lbmNvZGUodiEsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmNyZWF0ZWRBdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBUaW1lc3RhbXAuZW5jb2RlKHRvVGltZXN0YW1wKG1lc3NhZ2UuY3JlYXRlZEF0KSwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBVc2VyVGFza0RlZiB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza0RlZigpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UubmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLnZlcnNpb24gPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGlmICh0YWcgIT09IDI2KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLmRlc2NyaXB0aW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UuZmllbGRzLnB1c2goVXNlclRhc2tGaWVsZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGlmICh0YWcgIT09IDQyKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLmNyZWF0ZWRBdCA9IGZyb21UaW1lc3RhbXAoVGltZXN0YW1wLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuXG4gIGZyb21KU09OKG9iamVjdDogYW55KTogVXNlclRhc2tEZWYge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBpc1NldChvYmplY3QubmFtZSkgPyBnbG9iYWxUaGlzLlN0cmluZyhvYmplY3QubmFtZSkgOiBcIlwiLFxuICAgICAgdmVyc2lvbjogaXNTZXQob2JqZWN0LnZlcnNpb24pID8gZ2xvYmFsVGhpcy5OdW1iZXIob2JqZWN0LnZlcnNpb24pIDogMCxcbiAgICAgIGRlc2NyaXB0aW9uOiBpc1NldChvYmplY3QuZGVzY3JpcHRpb24pID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0LmRlc2NyaXB0aW9uKSA6IHVuZGVmaW5lZCxcbiAgICAgIGZpZWxkczogZ2xvYmFsVGhpcy5BcnJheS5pc0FycmF5KG9iamVjdD8uZmllbGRzKSA/IG9iamVjdC5maWVsZHMubWFwKChlOiBhbnkpID0+IFVzZXJUYXNrRmllbGQuZnJvbUpTT04oZSkpIDogW10sXG4gICAgICBjcmVhdGVkQXQ6IGlzU2V0KG9iamVjdC5jcmVhdGVkQXQpID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0LmNyZWF0ZWRBdCkgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfSxcblxuICB0b0pTT04obWVzc2FnZTogVXNlclRhc2tEZWYpOiB1bmtub3duIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGlmIChtZXNzYWdlLm5hbWUgIT09IFwiXCIpIHtcbiAgICAgIG9iai5uYW1lID0gbWVzc2FnZS5uYW1lO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS52ZXJzaW9uICE9PSAwKSB7XG4gICAgICBvYmoudmVyc2lvbiA9IE1hdGgucm91bmQobWVzc2FnZS52ZXJzaW9uKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLmRlc2NyaXB0aW9uID0gbWVzc2FnZS5kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZmllbGRzPy5sZW5ndGgpIHtcbiAgICAgIG9iai5maWVsZHMgPSBtZXNzYWdlLmZpZWxkcy5tYXAoKGUpID0+IFVzZXJUYXNrRmllbGQudG9KU09OKGUpKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuY3JlYXRlZEF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5jcmVhdGVkQXQgPSBtZXNzYWdlLmNyZWF0ZWRBdDtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICBjcmVhdGU8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRGVmPiwgST4+KGJhc2U/OiBJKTogVXNlclRhc2tEZWYge1xuICAgIHJldHVybiBVc2VyVGFza0RlZi5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRGVmPiwgST4+KG9iamVjdDogSSk6IFVzZXJUYXNrRGVmIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVVzZXJUYXNrRGVmKCk7XG4gICAgbWVzc2FnZS5uYW1lID0gb2JqZWN0Lm5hbWUgPz8gXCJcIjtcbiAgICBtZXNzYWdlLnZlcnNpb24gPSBvYmplY3QudmVyc2lvbiA/PyAwO1xuICAgIG1lc3NhZ2UuZGVzY3JpcHRpb24gPSBvYmplY3QuZGVzY3JpcHRpb24gPz8gdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UuZmllbGRzID0gb2JqZWN0LmZpZWxkcz8ubWFwKChlKSA9PiBVc2VyVGFza0ZpZWxkLmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICBtZXNzYWdlLmNyZWF0ZWRBdCA9IG9iamVjdC5jcmVhdGVkQXQgPz8gdW5kZWZpbmVkO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlQmFzZVVzZXJUYXNrRmllbGQoKTogVXNlclRhc2tGaWVsZCB7XG4gIHJldHVybiB7IG5hbWU6IFwiXCIsIHR5cGU6IFZhcmlhYmxlVHlwZS5KU09OX09CSiwgZGVzY3JpcHRpb246IHVuZGVmaW5lZCwgZGlzcGxheU5hbWU6IFwiXCIsIHJlcXVpcmVkOiBmYWxzZSB9O1xufVxuXG5leHBvcnQgY29uc3QgVXNlclRhc2tGaWVsZCA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFVzZXJUYXNrRmllbGQsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5uYW1lICE9PSBcIlwiKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5uYW1lKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gVmFyaWFibGVUeXBlLkpTT05fT0JKKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMih2YXJpYWJsZVR5cGVUb051bWJlcihtZXNzYWdlLnR5cGUpKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UuZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5kaXNwbGF5TmFtZSAhPT0gXCJcIikge1xuICAgICAgd3JpdGVyLnVpbnQzMigzNCkuc3RyaW5nKG1lc3NhZ2UuZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5yZXF1aXJlZCA9PT0gdHJ1ZSkge1xuICAgICAgd3JpdGVyLnVpbnQzMig0MCkuYm9vbChtZXNzYWdlLnJlcXVpcmVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBVc2VyVGFza0ZpZWxkIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVVzZXJUYXNrRmllbGQoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBpZiAodGFnICE9PSAxNikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS50eXBlID0gdmFyaWFibGVUeXBlRnJvbUpTT04ocmVhZGVyLmludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UuZGVzY3JpcHRpb24gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBpZiAodGFnICE9PSAzNCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS5kaXNwbGF5TmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGlmICh0YWcgIT09IDQwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLnJlcXVpcmVkID0gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcblxuICBmcm9tSlNPTihvYmplY3Q6IGFueSk6IFVzZXJUYXNrRmllbGQge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBpc1NldChvYmplY3QubmFtZSkgPyBnbG9iYWxUaGlzLlN0cmluZyhvYmplY3QubmFtZSkgOiBcIlwiLFxuICAgICAgdHlwZTogaXNTZXQob2JqZWN0LnR5cGUpID8gdmFyaWFibGVUeXBlRnJvbUpTT04ob2JqZWN0LnR5cGUpIDogVmFyaWFibGVUeXBlLkpTT05fT0JKLFxuICAgICAgZGVzY3JpcHRpb246IGlzU2V0KG9iamVjdC5kZXNjcmlwdGlvbikgPyBnbG9iYWxUaGlzLlN0cmluZyhvYmplY3QuZGVzY3JpcHRpb24pIDogdW5kZWZpbmVkLFxuICAgICAgZGlzcGxheU5hbWU6IGlzU2V0KG9iamVjdC5kaXNwbGF5TmFtZSkgPyBnbG9iYWxUaGlzLlN0cmluZyhvYmplY3QuZGlzcGxheU5hbWUpIDogXCJcIixcbiAgICAgIHJlcXVpcmVkOiBpc1NldChvYmplY3QucmVxdWlyZWQpID8gZ2xvYmFsVGhpcy5Cb29sZWFuKG9iamVjdC5yZXF1aXJlZCkgOiBmYWxzZSxcbiAgICB9O1xuICB9LFxuXG4gIHRvSlNPTihtZXNzYWdlOiBVc2VyVGFza0ZpZWxkKTogdW5rbm93biB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBpZiAobWVzc2FnZS5uYW1lICE9PSBcIlwiKSB7XG4gICAgICBvYmoubmFtZSA9IG1lc3NhZ2UubmFtZTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudHlwZSAhPT0gVmFyaWFibGVUeXBlLkpTT05fT0JKKSB7XG4gICAgICBvYmoudHlwZSA9IHZhcmlhYmxlVHlwZVRvSlNPTihtZXNzYWdlLnR5cGUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmouZGVzY3JpcHRpb24gPSBtZXNzYWdlLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5kaXNwbGF5TmFtZSAhPT0gXCJcIikge1xuICAgICAgb2JqLmRpc3BsYXlOYW1lID0gbWVzc2FnZS5kaXNwbGF5TmFtZTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucmVxdWlyZWQgPT09IHRydWUpIHtcbiAgICAgIG9iai5yZXF1aXJlZCA9IG1lc3NhZ2UucmVxdWlyZWQ7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH0sXG5cbiAgY3JlYXRlPEkgZXh0ZW5kcyBFeGFjdDxEZWVwUGFydGlhbDxVc2VyVGFza0ZpZWxkPiwgST4+KGJhc2U/OiBJKTogVXNlclRhc2tGaWVsZCB7XG4gICAgcmV0dXJuIFVzZXJUYXNrRmllbGQuZnJvbVBhcnRpYWwoYmFzZSA/PyAoe30gYXMgYW55KSk7XG4gIH0sXG4gIGZyb21QYXJ0aWFsPEkgZXh0ZW5kcyBFeGFjdDxEZWVwUGFydGlhbDxVc2VyVGFza0ZpZWxkPiwgST4+KG9iamVjdDogSSk6IFVzZXJUYXNrRmllbGQge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVXNlclRhc2tGaWVsZCgpO1xuICAgIG1lc3NhZ2UubmFtZSA9IG9iamVjdC5uYW1lID8/IFwiXCI7XG4gICAgbWVzc2FnZS50eXBlID0gb2JqZWN0LnR5cGUgPz8gVmFyaWFibGVUeXBlLkpTT05fT0JKO1xuICAgIG1lc3NhZ2UuZGVzY3JpcHRpb24gPSBvYmplY3QuZGVzY3JpcHRpb24gPz8gdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UuZGlzcGxheU5hbWUgPSBvYmplY3QuZGlzcGxheU5hbWUgPz8gXCJcIjtcbiAgICBtZXNzYWdlLnJlcXVpcmVkID0gb2JqZWN0LnJlcXVpcmVkID8/IGZhbHNlO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlQmFzZVVzZXJUYXNrUnVuKCk6IFVzZXJUYXNrUnVuIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogdW5kZWZpbmVkLFxuICAgIHVzZXJUYXNrRGVmSWQ6IHVuZGVmaW5lZCxcbiAgICB1c2VyR3JvdXA6IHVuZGVmaW5lZCxcbiAgICB1c2VySWQ6IHVuZGVmaW5lZCxcbiAgICByZXN1bHRzOiB7fSxcbiAgICBzdGF0dXM6IFVzZXJUYXNrUnVuU3RhdHVzLlVOQVNTSUdORUQsXG4gICAgZXZlbnRzOiBbXSxcbiAgICBub3RlczogdW5kZWZpbmVkLFxuICAgIHNjaGVkdWxlZFRpbWU6IHVuZGVmaW5lZCxcbiAgICBub2RlUnVuSWQ6IHVuZGVmaW5lZCxcbiAgICBlcG9jaDogMCxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFVzZXJUYXNrUnVuID0ge1xuICBlbmNvZGUobWVzc2FnZTogVXNlclRhc2tSdW4sIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBVc2VyVGFza1J1bklkLmVuY29kZShtZXNzYWdlLmlkLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS51c2VyVGFza0RlZklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFVzZXJUYXNrRGVmSWQuZW5jb2RlKG1lc3NhZ2UudXNlclRhc2tEZWZJZCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudXNlckdyb3VwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLnVzZXJHcm91cCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS51c2VySWQpO1xuICAgIH1cbiAgICBPYmplY3QuZW50cmllcyhtZXNzYWdlLnJlc3VsdHMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgVXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5LmVuY29kZSh7IGtleToga2V5IGFzIGFueSwgdmFsdWUgfSwgd3JpdGVyLnVpbnQzMig1MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9KTtcbiAgICBpZiAobWVzc2FnZS5zdGF0dXMgIT09IFVzZXJUYXNrUnVuU3RhdHVzLlVOQVNTSUdORUQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNTYpLmludDMyKHVzZXJUYXNrUnVuU3RhdHVzVG9OdW1iZXIobWVzc2FnZS5zdGF0dXMpKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZXZlbnRzKSB7XG4gICAgICBVc2VyVGFza0V2ZW50LmVuY29kZSh2ISwgd3JpdGVyLnVpbnQzMig2NikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uubm90ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig3NCkuc3RyaW5nKG1lc3NhZ2Uubm90ZXMpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5zY2hlZHVsZWRUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFRpbWVzdGFtcC5lbmNvZGUodG9UaW1lc3RhbXAobWVzc2FnZS5zY2hlZHVsZWRUaW1lKSwgd3JpdGVyLnVpbnQzMig4MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uubm9kZVJ1bklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE5vZGVSdW5JZC5lbmNvZGUobWVzc2FnZS5ub2RlUnVuSWQsIHdyaXRlci51aW50MzIoOTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmVwb2NoICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDk2KS5pbnQzMihtZXNzYWdlLmVwb2NoKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBVc2VyVGFza1J1biB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza1J1bigpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UuaWQgPSBVc2VyVGFza1J1bklkLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS51c2VyVGFza0RlZklkID0gVXNlclRhc2tEZWZJZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlckdyb3VwID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gNTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGVudHJ5NiA9IFVzZXJUYXNrUnVuX1Jlc3VsdHNFbnRyeS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGlmIChlbnRyeTYudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWVzc2FnZS5yZXN1bHRzW2VudHJ5Ni5rZXldID0gZW50cnk2LnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIGlmICh0YWcgIT09IDU2KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLnN0YXR1cyA9IHVzZXJUYXNrUnVuU3RhdHVzRnJvbUpTT04ocmVhZGVyLmludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gNjYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UuZXZlbnRzLnB1c2goVXNlclRhc2tFdmVudC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgIGlmICh0YWcgIT09IDc0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm5vdGVzID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGlmICh0YWcgIT09IDgyKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLnNjaGVkdWxlZFRpbWUgPSBmcm9tVGltZXN0YW1wKFRpbWVzdGFtcC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBpZiAodGFnICE9PSA5MCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS5ub2RlUnVuSWQgPSBOb2RlUnVuSWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICBpZiAodGFnICE9PSA5Nikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS5lcG9jaCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuXG4gIGZyb21KU09OKG9iamVjdDogYW55KTogVXNlclRhc2tSdW4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogaXNTZXQob2JqZWN0LmlkKSA/IFVzZXJUYXNrUnVuSWQuZnJvbUpTT04ob2JqZWN0LmlkKSA6IHVuZGVmaW5lZCxcbiAgICAgIHVzZXJUYXNrRGVmSWQ6IGlzU2V0KG9iamVjdC51c2VyVGFza0RlZklkKSA/IFVzZXJUYXNrRGVmSWQuZnJvbUpTT04ob2JqZWN0LnVzZXJUYXNrRGVmSWQpIDogdW5kZWZpbmVkLFxuICAgICAgdXNlckdyb3VwOiBpc1NldChvYmplY3QudXNlckdyb3VwKSA/IGdsb2JhbFRoaXMuU3RyaW5nKG9iamVjdC51c2VyR3JvdXApIDogdW5kZWZpbmVkLFxuICAgICAgdXNlcklkOiBpc1NldChvYmplY3QudXNlcklkKSA/IGdsb2JhbFRoaXMuU3RyaW5nKG9iamVjdC51c2VySWQpIDogdW5kZWZpbmVkLFxuICAgICAgcmVzdWx0czogaXNPYmplY3Qob2JqZWN0LnJlc3VsdHMpXG4gICAgICAgID8gT2JqZWN0LmVudHJpZXMob2JqZWN0LnJlc3VsdHMpLnJlZHVjZTx7IFtrZXk6IHN0cmluZ106IFZhcmlhYmxlVmFsdWUgfT4oKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgYWNjW2tleV0gPSBWYXJpYWJsZVZhbHVlLmZyb21KU09OKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSlcbiAgICAgICAgOiB7fSxcbiAgICAgIHN0YXR1czogaXNTZXQob2JqZWN0LnN0YXR1cykgPyB1c2VyVGFza1J1blN0YXR1c0Zyb21KU09OKG9iamVjdC5zdGF0dXMpIDogVXNlclRhc2tSdW5TdGF0dXMuVU5BU1NJR05FRCxcbiAgICAgIGV2ZW50czogZ2xvYmFsVGhpcy5BcnJheS5pc0FycmF5KG9iamVjdD8uZXZlbnRzKSA/IG9iamVjdC5ldmVudHMubWFwKChlOiBhbnkpID0+IFVzZXJUYXNrRXZlbnQuZnJvbUpTT04oZSkpIDogW10sXG4gICAgICBub3RlczogaXNTZXQob2JqZWN0Lm5vdGVzKSA/IGdsb2JhbFRoaXMuU3RyaW5nKG9iamVjdC5ub3RlcykgOiB1bmRlZmluZWQsXG4gICAgICBzY2hlZHVsZWRUaW1lOiBpc1NldChvYmplY3Quc2NoZWR1bGVkVGltZSkgPyBnbG9iYWxUaGlzLlN0cmluZyhvYmplY3Quc2NoZWR1bGVkVGltZSkgOiB1bmRlZmluZWQsXG4gICAgICBub2RlUnVuSWQ6IGlzU2V0KG9iamVjdC5ub2RlUnVuSWQpID8gTm9kZVJ1bklkLmZyb21KU09OKG9iamVjdC5ub2RlUnVuSWQpIDogdW5kZWZpbmVkLFxuICAgICAgZXBvY2g6IGlzU2V0KG9iamVjdC5lcG9jaCkgPyBnbG9iYWxUaGlzLk51bWJlcihvYmplY3QuZXBvY2gpIDogMCxcbiAgICB9O1xuICB9LFxuXG4gIHRvSlNPTihtZXNzYWdlOiBVc2VyVGFza1J1bik6IHVua25vd24ge1xuICAgIGNvbnN0IG9iajogYW55ID0ge307XG4gICAgaWYgKG1lc3NhZ2UuaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLmlkID0gVXNlclRhc2tSdW5JZC50b0pTT04obWVzc2FnZS5pZCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnVzZXJUYXNrRGVmSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnVzZXJUYXNrRGVmSWQgPSBVc2VyVGFza0RlZklkLnRvSlNPTihtZXNzYWdlLnVzZXJUYXNrRGVmSWQpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS51c2VyR3JvdXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnVzZXJHcm91cCA9IG1lc3NhZ2UudXNlckdyb3VwO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS51c2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnVzZXJJZCA9IG1lc3NhZ2UudXNlcklkO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5yZXN1bHRzKSB7XG4gICAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMobWVzc2FnZS5yZXN1bHRzKTtcbiAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb2JqLnJlc3VsdHMgPSB7fTtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgICAgICBvYmoucmVzdWx0c1trXSA9IFZhcmlhYmxlVmFsdWUudG9KU09OKHYpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uuc3RhdHVzICE9PSBVc2VyVGFza1J1blN0YXR1cy5VTkFTU0lHTkVEKSB7XG4gICAgICBvYmouc3RhdHVzID0gdXNlclRhc2tSdW5TdGF0dXNUb0pTT04obWVzc2FnZS5zdGF0dXMpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5ldmVudHM/Lmxlbmd0aCkge1xuICAgICAgb2JqLmV2ZW50cyA9IG1lc3NhZ2UuZXZlbnRzLm1hcCgoZSkgPT4gVXNlclRhc2tFdmVudC50b0pTT04oZSkpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5ub3RlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmoubm90ZXMgPSBtZXNzYWdlLm5vdGVzO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5zY2hlZHVsZWRUaW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5zY2hlZHVsZWRUaW1lID0gbWVzc2FnZS5zY2hlZHVsZWRUaW1lO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5ub2RlUnVuSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLm5vZGVSdW5JZCA9IE5vZGVSdW5JZC50b0pTT04obWVzc2FnZS5ub2RlUnVuSWQpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5lcG9jaCAhPT0gMCkge1xuICAgICAgb2JqLmVwb2NoID0gTWF0aC5yb3VuZChtZXNzYWdlLmVwb2NoKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICBjcmVhdGU8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrUnVuPiwgST4+KGJhc2U/OiBJKTogVXNlclRhc2tSdW4ge1xuICAgIHJldHVybiBVc2VyVGFza1J1bi5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrUnVuPiwgST4+KG9iamVjdDogSSk6IFVzZXJUYXNrUnVuIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVVzZXJUYXNrUnVuKCk7XG4gICAgbWVzc2FnZS5pZCA9IChvYmplY3QuaWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuaWQgIT09IG51bGwpID8gVXNlclRhc2tSdW5JZC5mcm9tUGFydGlhbChvYmplY3QuaWQpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UudXNlclRhc2tEZWZJZCA9IChvYmplY3QudXNlclRhc2tEZWZJZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC51c2VyVGFza0RlZklkICE9PSBudWxsKVxuICAgICAgPyBVc2VyVGFza0RlZklkLmZyb21QYXJ0aWFsKG9iamVjdC51c2VyVGFza0RlZklkKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS51c2VyR3JvdXAgPSBvYmplY3QudXNlckdyb3VwID8/IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLnVzZXJJZCA9IG9iamVjdC51c2VySWQgPz8gdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UucmVzdWx0cyA9IE9iamVjdC5lbnRyaWVzKG9iamVjdC5yZXN1bHRzID8/IHt9KS5yZWR1Y2U8eyBba2V5OiBzdHJpbmddOiBWYXJpYWJsZVZhbHVlIH0+KFxuICAgICAgKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWNjW2tleV0gPSBWYXJpYWJsZVZhbHVlLmZyb21QYXJ0aWFsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSxcbiAgICAgIHt9LFxuICAgICk7XG4gICAgbWVzc2FnZS5zdGF0dXMgPSBvYmplY3Quc3RhdHVzID8/IFVzZXJUYXNrUnVuU3RhdHVzLlVOQVNTSUdORUQ7XG4gICAgbWVzc2FnZS5ldmVudHMgPSBvYmplY3QuZXZlbnRzPy5tYXAoKGUpID0+IFVzZXJUYXNrRXZlbnQuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgIG1lc3NhZ2Uubm90ZXMgPSBvYmplY3Qubm90ZXMgPz8gdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2Uuc2NoZWR1bGVkVGltZSA9IG9iamVjdC5zY2hlZHVsZWRUaW1lID8/IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLm5vZGVSdW5JZCA9IChvYmplY3Qubm9kZVJ1bklkICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0Lm5vZGVSdW5JZCAhPT0gbnVsbClcbiAgICAgID8gTm9kZVJ1bklkLmZyb21QYXJ0aWFsKG9iamVjdC5ub2RlUnVuSWQpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLmVwb2NoID0gb2JqZWN0LmVwb2NoID8/IDA7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVCYXNlVXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5KCk6IFVzZXJUYXNrUnVuX1Jlc3VsdHNFbnRyeSB7XG4gIHJldHVybiB7IGtleTogXCJcIiwgdmFsdWU6IHVuZGVmaW5lZCB9O1xufVxuXG5leHBvcnQgY29uc3QgVXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5ID0ge1xuICBlbmNvZGUobWVzc2FnZTogVXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5LCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2Uua2V5ICE9PSBcIlwiKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5rZXkpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBWYXJpYWJsZVZhbHVlLmVuY29kZShtZXNzYWdlLnZhbHVlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFVzZXJUYXNrUnVuX1Jlc3VsdHNFbnRyeSB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza1J1bl9SZXN1bHRzRW50cnkoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gVmFyaWFibGVWYWx1ZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuXG4gIGZyb21KU09OKG9iamVjdDogYW55KTogVXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5IHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBpc1NldChvYmplY3Qua2V5KSA/IGdsb2JhbFRoaXMuU3RyaW5nKG9iamVjdC5rZXkpIDogXCJcIixcbiAgICAgIHZhbHVlOiBpc1NldChvYmplY3QudmFsdWUpID8gVmFyaWFibGVWYWx1ZS5mcm9tSlNPTihvYmplY3QudmFsdWUpIDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH0sXG5cbiAgdG9KU09OKG1lc3NhZ2U6IFVzZXJUYXNrUnVuX1Jlc3VsdHNFbnRyeSk6IHVua25vd24ge1xuICAgIGNvbnN0IG9iajogYW55ID0ge307XG4gICAgaWYgKG1lc3NhZ2Uua2V5ICE9PSBcIlwiKSB7XG4gICAgICBvYmoua2V5ID0gbWVzc2FnZS5rZXk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai52YWx1ZSA9IFZhcmlhYmxlVmFsdWUudG9KU09OKG1lc3NhZ2UudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuXG4gIGNyZWF0ZTxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8VXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5PiwgST4+KGJhc2U/OiBJKTogVXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5IHtcbiAgICByZXR1cm4gVXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5LmZyb21QYXJ0aWFsKGJhc2UgPz8gKHt9IGFzIGFueSkpO1xuICB9LFxuICBmcm9tUGFydGlhbDxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8VXNlclRhc2tSdW5fUmVzdWx0c0VudHJ5PiwgST4+KG9iamVjdDogSSk6IFVzZXJUYXNrUnVuX1Jlc3VsdHNFbnRyeSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza1J1bl9SZXN1bHRzRW50cnkoKTtcbiAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gXCJcIjtcbiAgICBtZXNzYWdlLnZhbHVlID0gKG9iamVjdC52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWx1ZSAhPT0gbnVsbClcbiAgICAgID8gVmFyaWFibGVWYWx1ZS5mcm9tUGFydGlhbChvYmplY3QudmFsdWUpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3QoKTogQXNzaWduVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgcmV0dXJuIHsgdXNlclRhc2tSdW5JZDogdW5kZWZpbmVkLCBvdmVycmlkZUNsYWltOiBmYWxzZSwgdXNlckdyb3VwOiB1bmRlZmluZWQsIHVzZXJJZDogdW5kZWZpbmVkIH07XG59XG5cbmV4cG9ydCBjb25zdCBBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3QgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3QsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS51c2VyVGFza1J1bklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFVzZXJUYXNrUnVuSWQuZW5jb2RlKG1lc3NhZ2UudXNlclRhc2tSdW5JZCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uub3ZlcnJpZGVDbGFpbSA9PT0gdHJ1ZSkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxNikuYm9vbChtZXNzYWdlLm92ZXJyaWRlQ2xhaW0pO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS51c2VyR3JvdXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UudXNlckdyb3VwKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLnVzZXJJZCk7XG4gICAgfVxuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogQXNzaWduVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUFzc2lnblVzZXJUYXNrUnVuUmVxdWVzdCgpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlclRhc2tSdW5JZCA9IFVzZXJUYXNrUnVuSWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmICh0YWcgIT09IDE2KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm92ZXJyaWRlQ2xhaW0gPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlckdyb3VwID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuXG4gIGZyb21KU09OKG9iamVjdDogYW55KTogQXNzaWduVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlclRhc2tSdW5JZDogaXNTZXQob2JqZWN0LnVzZXJUYXNrUnVuSWQpID8gVXNlclRhc2tSdW5JZC5mcm9tSlNPTihvYmplY3QudXNlclRhc2tSdW5JZCkgOiB1bmRlZmluZWQsXG4gICAgICBvdmVycmlkZUNsYWltOiBpc1NldChvYmplY3Qub3ZlcnJpZGVDbGFpbSkgPyBnbG9iYWxUaGlzLkJvb2xlYW4ob2JqZWN0Lm92ZXJyaWRlQ2xhaW0pIDogZmFsc2UsXG4gICAgICB1c2VyR3JvdXA6IGlzU2V0KG9iamVjdC51c2VyR3JvdXApID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0LnVzZXJHcm91cCkgOiB1bmRlZmluZWQsXG4gICAgICB1c2VySWQ6IGlzU2V0KG9iamVjdC51c2VySWQpID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0LnVzZXJJZCkgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfSxcblxuICB0b0pTT04obWVzc2FnZTogQXNzaWduVXNlclRhc2tSdW5SZXF1ZXN0KTogdW5rbm93biB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBpZiAobWVzc2FnZS51c2VyVGFza1J1bklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai51c2VyVGFza1J1bklkID0gVXNlclRhc2tSdW5JZC50b0pTT04obWVzc2FnZS51c2VyVGFza1J1bklkKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uub3ZlcnJpZGVDbGFpbSA9PT0gdHJ1ZSkge1xuICAgICAgb2JqLm92ZXJyaWRlQ2xhaW0gPSBtZXNzYWdlLm92ZXJyaWRlQ2xhaW07XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnVzZXJHcm91cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmoudXNlckdyb3VwID0gbWVzc2FnZS51c2VyR3JvdXA7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmoudXNlcklkID0gbWVzc2FnZS51c2VySWQ7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH0sXG5cbiAgY3JlYXRlPEkgZXh0ZW5kcyBFeGFjdDxEZWVwUGFydGlhbDxBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3Q+LCBJPj4oYmFzZT86IEkpOiBBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3Qge1xuICAgIHJldHVybiBBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3QuZnJvbVBhcnRpYWwoYmFzZSA/PyAoe30gYXMgYW55KSk7XG4gIH0sXG4gIGZyb21QYXJ0aWFsPEkgZXh0ZW5kcyBFeGFjdDxEZWVwUGFydGlhbDxBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3Q+LCBJPj4ob2JqZWN0OiBJKTogQXNzaWduVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUFzc2lnblVzZXJUYXNrUnVuUmVxdWVzdCgpO1xuICAgIG1lc3NhZ2UudXNlclRhc2tSdW5JZCA9IChvYmplY3QudXNlclRhc2tSdW5JZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC51c2VyVGFza1J1bklkICE9PSBudWxsKVxuICAgICAgPyBVc2VyVGFza1J1bklkLmZyb21QYXJ0aWFsKG9iamVjdC51c2VyVGFza1J1bklkKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS5vdmVycmlkZUNsYWltID0gb2JqZWN0Lm92ZXJyaWRlQ2xhaW0gPz8gZmFsc2U7XG4gICAgbWVzc2FnZS51c2VyR3JvdXAgPSBvYmplY3QudXNlckdyb3VwID8/IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLnVzZXJJZCA9IG9iamVjdC51c2VySWQgPz8gdW5kZWZpbmVkO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0KCk6IENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgcmV0dXJuIHsgdXNlclRhc2tSdW5JZDogdW5kZWZpbmVkLCByZXN1bHRzOiB7fSwgdXNlcklkOiBcIlwiIH07XG59XG5cbmV4cG9ydCBjb25zdCBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdCA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0LCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UudXNlclRhc2tSdW5JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBVc2VyVGFza1J1bklkLmVuY29kZShtZXNzYWdlLnVzZXJUYXNrUnVuSWQsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIE9iamVjdC5lbnRyaWVzKG1lc3NhZ2UucmVzdWx0cykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnkuZW5jb2RlKHsga2V5OiBrZXkgYXMgYW55LCB2YWx1ZSB9LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH0pO1xuICAgIGlmIChtZXNzYWdlLnVzZXJJZCAhPT0gXCJcIikge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UudXNlcklkKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdCgpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlclRhc2tSdW5JZCA9IFVzZXJUYXNrUnVuSWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBlbnRyeTIgPSBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBpZiAoZW50cnkyLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UucmVzdWx0c1tlbnRyeTIua2V5XSA9IGVudHJ5Mi52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBpZiAodGFnICE9PSAyNikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS51c2VySWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG5cbiAgZnJvbUpTT04ob2JqZWN0OiBhbnkpOiBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJUYXNrUnVuSWQ6IGlzU2V0KG9iamVjdC51c2VyVGFza1J1bklkKSA/IFVzZXJUYXNrUnVuSWQuZnJvbUpTT04ob2JqZWN0LnVzZXJUYXNrUnVuSWQpIDogdW5kZWZpbmVkLFxuICAgICAgcmVzdWx0czogaXNPYmplY3Qob2JqZWN0LnJlc3VsdHMpXG4gICAgICAgID8gT2JqZWN0LmVudHJpZXMob2JqZWN0LnJlc3VsdHMpLnJlZHVjZTx7IFtrZXk6IHN0cmluZ106IFZhcmlhYmxlVmFsdWUgfT4oKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgYWNjW2tleV0gPSBWYXJpYWJsZVZhbHVlLmZyb21KU09OKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSlcbiAgICAgICAgOiB7fSxcbiAgICAgIHVzZXJJZDogaXNTZXQob2JqZWN0LnVzZXJJZCkgPyBnbG9iYWxUaGlzLlN0cmluZyhvYmplY3QudXNlcklkKSA6IFwiXCIsXG4gICAgfTtcbiAgfSxcblxuICB0b0pTT04obWVzc2FnZTogQ29tcGxldGVVc2VyVGFza1J1blJlcXVlc3QpOiB1bmtub3duIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGlmIChtZXNzYWdlLnVzZXJUYXNrUnVuSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnVzZXJUYXNrUnVuSWQgPSBVc2VyVGFza1J1bklkLnRvSlNPTihtZXNzYWdlLnVzZXJUYXNrUnVuSWQpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5yZXN1bHRzKSB7XG4gICAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMobWVzc2FnZS5yZXN1bHRzKTtcbiAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb2JqLnJlc3VsdHMgPSB7fTtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgICAgICBvYmoucmVzdWx0c1trXSA9IFZhcmlhYmxlVmFsdWUudG9KU09OKHYpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSBcIlwiKSB7XG4gICAgICBvYmoudXNlcklkID0gbWVzc2FnZS51c2VySWQ7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH0sXG5cbiAgY3JlYXRlPEkgZXh0ZW5kcyBFeGFjdDxEZWVwUGFydGlhbDxDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdD4sIEk+PihiYXNlPzogSSk6IENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgICByZXR1cm4gQ29tcGxldGVVc2VyVGFza1J1blJlcXVlc3QuZnJvbVBhcnRpYWwoYmFzZSA/PyAoe30gYXMgYW55KSk7XG4gIH0sXG4gIGZyb21QYXJ0aWFsPEkgZXh0ZW5kcyBFeGFjdDxEZWVwUGFydGlhbDxDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdD4sIEk+PihvYmplY3Q6IEkpOiBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdCgpO1xuICAgIG1lc3NhZ2UudXNlclRhc2tSdW5JZCA9IChvYmplY3QudXNlclRhc2tSdW5JZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC51c2VyVGFza1J1bklkICE9PSBudWxsKVxuICAgICAgPyBVc2VyVGFza1J1bklkLmZyb21QYXJ0aWFsKG9iamVjdC51c2VyVGFza1J1bklkKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS5yZXN1bHRzID0gT2JqZWN0LmVudHJpZXMob2JqZWN0LnJlc3VsdHMgPz8ge30pLnJlZHVjZTx7IFtrZXk6IHN0cmluZ106IFZhcmlhYmxlVmFsdWUgfT4oXG4gICAgICAoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhY2Nba2V5XSA9IFZhcmlhYmxlVmFsdWUuZnJvbVBhcnRpYWwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LFxuICAgICAge30sXG4gICAgKTtcbiAgICBtZXNzYWdlLnVzZXJJZCA9IG9iamVjdC51c2VySWQgPz8gXCJcIjtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnkoKTogQ29tcGxldGVVc2VyVGFza1J1blJlcXVlc3RfUmVzdWx0c0VudHJ5IHtcbiAgcmV0dXJuIHsga2V5OiBcIlwiLCB2YWx1ZTogdW5kZWZpbmVkIH07XG59XG5cbmV4cG9ydCBjb25zdCBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnkgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnksIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5rZXkgIT09IFwiXCIpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmtleSk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFZhcmlhYmxlVmFsdWUuZW5jb2RlKG1lc3NhZ2UudmFsdWUsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogQ29tcGxldGVVc2VyVGFza1J1blJlcXVlc3RfUmVzdWx0c0VudHJ5IHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0X1Jlc3VsdHNFbnRyeSgpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2Uua2V5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudmFsdWUgPSBWYXJpYWJsZVZhbHVlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoKHRhZyAmIDcpID09PSA0IHx8IHRhZyA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG5cbiAgZnJvbUpTT04ob2JqZWN0OiBhbnkpOiBDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnkge1xuICAgIHJldHVybiB7XG4gICAgICBrZXk6IGlzU2V0KG9iamVjdC5rZXkpID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0LmtleSkgOiBcIlwiLFxuICAgICAgdmFsdWU6IGlzU2V0KG9iamVjdC52YWx1ZSkgPyBWYXJpYWJsZVZhbHVlLmZyb21KU09OKG9iamVjdC52YWx1ZSkgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfSxcblxuICB0b0pTT04obWVzc2FnZTogQ29tcGxldGVVc2VyVGFza1J1blJlcXVlc3RfUmVzdWx0c0VudHJ5KTogdW5rbm93biB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBpZiAobWVzc2FnZS5rZXkgIT09IFwiXCIpIHtcbiAgICAgIG9iai5rZXkgPSBtZXNzYWdlLmtleTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnZhbHVlID0gVmFyaWFibGVWYWx1ZS50b0pTT04obWVzc2FnZS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH0sXG5cbiAgY3JlYXRlPEkgZXh0ZW5kcyBFeGFjdDxEZWVwUGFydGlhbDxDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnk+LCBJPj4oXG4gICAgYmFzZT86IEksXG4gICk6IENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0X1Jlc3VsdHNFbnRyeSB7XG4gICAgcmV0dXJuIENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0X1Jlc3VsdHNFbnRyeS5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0X1Jlc3VsdHNFbnRyeT4sIEk+PihcbiAgICBvYmplY3Q6IEksXG4gICk6IENvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0X1Jlc3VsdHNFbnRyeSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdF9SZXN1bHRzRW50cnkoKTtcbiAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gXCJcIjtcbiAgICBtZXNzYWdlLnZhbHVlID0gKG9iamVjdC52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWx1ZSAhPT0gbnVsbClcbiAgICAgID8gVmFyaWFibGVWYWx1ZS5mcm9tUGFydGlhbChvYmplY3QudmFsdWUpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDYW5jZWxVc2VyVGFza1J1blJlcXVlc3QoKTogQ2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgcmV0dXJuIHsgdXNlclRhc2tSdW5JZDogdW5kZWZpbmVkIH07XG59XG5cbmV4cG9ydCBjb25zdCBDYW5jZWxVc2VyVGFza1J1blJlcXVlc3QgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBDYW5jZWxVc2VyVGFza1J1blJlcXVlc3QsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS51c2VyVGFza1J1bklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFVzZXJUYXNrUnVuSWQuZW5jb2RlKG1lc3NhZ2UudXNlclRhc2tSdW5JZCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBDYW5jZWxVc2VyVGFza1J1blJlcXVlc3Qge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0KCk7XG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS51c2VyVGFza1J1bklkID0gVXNlclRhc2tSdW5JZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuXG4gIGZyb21KU09OKG9iamVjdDogYW55KTogQ2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgICByZXR1cm4geyB1c2VyVGFza1J1bklkOiBpc1NldChvYmplY3QudXNlclRhc2tSdW5JZCkgPyBVc2VyVGFza1J1bklkLmZyb21KU09OKG9iamVjdC51c2VyVGFza1J1bklkKSA6IHVuZGVmaW5lZCB9O1xuICB9LFxuXG4gIHRvSlNPTihtZXNzYWdlOiBDYW5jZWxVc2VyVGFza1J1blJlcXVlc3QpOiB1bmtub3duIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGlmIChtZXNzYWdlLnVzZXJUYXNrUnVuSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnVzZXJUYXNrUnVuSWQgPSBVc2VyVGFza1J1bklkLnRvSlNPTihtZXNzYWdlLnVzZXJUYXNrUnVuSWQpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuXG4gIGNyZWF0ZTxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8Q2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0PiwgST4+KGJhc2U/OiBJKTogQ2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0IHtcbiAgICByZXR1cm4gQ2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0LmZyb21QYXJ0aWFsKGJhc2UgPz8gKHt9IGFzIGFueSkpO1xuICB9LFxuICBmcm9tUGFydGlhbDxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8Q2FuY2VsVXNlclRhc2tSdW5SZXF1ZXN0PiwgST4+KG9iamVjdDogSSk6IENhbmNlbFVzZXJUYXNrUnVuUmVxdWVzdCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDYW5jZWxVc2VyVGFza1J1blJlcXVlc3QoKTtcbiAgICBtZXNzYWdlLnVzZXJUYXNrUnVuSWQgPSAob2JqZWN0LnVzZXJUYXNrUnVuSWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudXNlclRhc2tSdW5JZCAhPT0gbnVsbClcbiAgICAgID8gVXNlclRhc2tSdW5JZC5mcm9tUGFydGlhbChvYmplY3QudXNlclRhc2tSdW5JZClcbiAgICAgIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlQmFzZVVzZXJUYXNrVHJpZ2dlclJlZmVyZW5jZSgpOiBVc2VyVGFza1RyaWdnZXJSZWZlcmVuY2Uge1xuICByZXR1cm4geyBub2RlUnVuSWQ6IHVuZGVmaW5lZCwgdXNlclRhc2tFdmVudE51bWJlcjogMCwgdXNlcklkOiB1bmRlZmluZWQsIHVzZXJHcm91cDogdW5kZWZpbmVkIH07XG59XG5cbmV4cG9ydCBjb25zdCBVc2VyVGFza1RyaWdnZXJSZWZlcmVuY2UgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBVc2VyVGFza1RyaWdnZXJSZWZlcmVuY2UsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5ub2RlUnVuSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgTm9kZVJ1bklkLmVuY29kZShtZXNzYWdlLm5vZGVSdW5JZCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudXNlclRhc2tFdmVudE51bWJlciAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS51c2VyVGFza0V2ZW50TnVtYmVyKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLnVzZXJJZCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnVzZXJHcm91cCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDM0KS5zdHJpbmcobWVzc2FnZS51c2VyR3JvdXApO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFVzZXJUYXNrVHJpZ2dlclJlZmVyZW5jZSB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza1RyaWdnZXJSZWZlcmVuY2UoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm5vZGVSdW5JZCA9IE5vZGVSdW5JZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlclRhc2tFdmVudE51bWJlciA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlcklkID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMzQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UudXNlckdyb3VwID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuXG4gIGZyb21KU09OKG9iamVjdDogYW55KTogVXNlclRhc2tUcmlnZ2VyUmVmZXJlbmNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZVJ1bklkOiBpc1NldChvYmplY3Qubm9kZVJ1bklkKSA/IE5vZGVSdW5JZC5mcm9tSlNPTihvYmplY3Qubm9kZVJ1bklkKSA6IHVuZGVmaW5lZCxcbiAgICAgIHVzZXJUYXNrRXZlbnROdW1iZXI6IGlzU2V0KG9iamVjdC51c2VyVGFza0V2ZW50TnVtYmVyKSA/IGdsb2JhbFRoaXMuTnVtYmVyKG9iamVjdC51c2VyVGFza0V2ZW50TnVtYmVyKSA6IDAsXG4gICAgICB1c2VySWQ6IGlzU2V0KG9iamVjdC51c2VySWQpID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0LnVzZXJJZCkgOiB1bmRlZmluZWQsXG4gICAgICB1c2VyR3JvdXA6IGlzU2V0KG9iamVjdC51c2VyR3JvdXApID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0LnVzZXJHcm91cCkgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfSxcblxuICB0b0pTT04obWVzc2FnZTogVXNlclRhc2tUcmlnZ2VyUmVmZXJlbmNlKTogdW5rbm93biB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBpZiAobWVzc2FnZS5ub2RlUnVuSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLm5vZGVSdW5JZCA9IE5vZGVSdW5JZC50b0pTT04obWVzc2FnZS5ub2RlUnVuSWQpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS51c2VyVGFza0V2ZW50TnVtYmVyICE9PSAwKSB7XG4gICAgICBvYmoudXNlclRhc2tFdmVudE51bWJlciA9IE1hdGgucm91bmQobWVzc2FnZS51c2VyVGFza0V2ZW50TnVtYmVyKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudXNlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai51c2VySWQgPSBtZXNzYWdlLnVzZXJJZDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudXNlckdyb3VwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai51c2VyR3JvdXAgPSBtZXNzYWdlLnVzZXJHcm91cDtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICBjcmVhdGU8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrVHJpZ2dlclJlZmVyZW5jZT4sIEk+PihiYXNlPzogSSk6IFVzZXJUYXNrVHJpZ2dlclJlZmVyZW5jZSB7XG4gICAgcmV0dXJuIFVzZXJUYXNrVHJpZ2dlclJlZmVyZW5jZS5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrVHJpZ2dlclJlZmVyZW5jZT4sIEk+PihvYmplY3Q6IEkpOiBVc2VyVGFza1RyaWdnZXJSZWZlcmVuY2Uge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVXNlclRhc2tUcmlnZ2VyUmVmZXJlbmNlKCk7XG4gICAgbWVzc2FnZS5ub2RlUnVuSWQgPSAob2JqZWN0Lm5vZGVSdW5JZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5ub2RlUnVuSWQgIT09IG51bGwpXG4gICAgICA/IE5vZGVSdW5JZC5mcm9tUGFydGlhbChvYmplY3Qubm9kZVJ1bklkKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS51c2VyVGFza0V2ZW50TnVtYmVyID0gb2JqZWN0LnVzZXJUYXNrRXZlbnROdW1iZXIgPz8gMDtcbiAgICBtZXNzYWdlLnVzZXJJZCA9IG9iamVjdC51c2VySWQgPz8gdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UudXNlckdyb3VwID0gb2JqZWN0LnVzZXJHcm91cCA/PyB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVCYXNlVXNlclRhc2tFdmVudCgpOiBVc2VyVGFza0V2ZW50IHtcbiAgcmV0dXJuIHsgdGltZTogdW5kZWZpbmVkLCB0YXNrRXhlY3V0ZWQ6IHVuZGVmaW5lZCwgYXNzaWduZWQ6IHVuZGVmaW5lZCwgY2FuY2VsbGVkOiB1bmRlZmluZWQgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFVzZXJUYXNrRXZlbnQgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBVc2VyVGFza0V2ZW50LCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UudGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBUaW1lc3RhbXAuZW5jb2RlKHRvVGltZXN0YW1wKG1lc3NhZ2UudGltZSksIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnRhc2tFeGVjdXRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZC5lbmNvZGUobWVzc2FnZS50YXNrRXhlY3V0ZWQsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmFzc2lnbmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQuZW5jb2RlKG1lc3NhZ2UuYXNzaWduZWQsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmNhbmNlbGxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBVc2VyVGFza0V2ZW50X1VURUNhbmNlbGxlZC5lbmNvZGUobWVzc2FnZS5jYW5jZWxsZWQsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogVXNlclRhc2tFdmVudCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50KCk7XG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAodGFnICE9PSAxMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS50aW1lID0gZnJvbVRpbWVzdGFtcChUaW1lc3RhbXAuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBpZiAodGFnICE9PSAxOCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS50YXNrRXhlY3V0ZWQgPSBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMjYpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UuYXNzaWduZWQgPSBVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBpZiAodGFnICE9PSAzNCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZS5jYW5jZWxsZWQgPSBVc2VyVGFza0V2ZW50X1VURUNhbmNlbGxlZC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gNCB8fCB0YWcgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuXG4gIGZyb21KU09OKG9iamVjdDogYW55KTogVXNlclRhc2tFdmVudCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWU6IGlzU2V0KG9iamVjdC50aW1lKSA/IGdsb2JhbFRoaXMuU3RyaW5nKG9iamVjdC50aW1lKSA6IHVuZGVmaW5lZCxcbiAgICAgIHRhc2tFeGVjdXRlZDogaXNTZXQob2JqZWN0LnRhc2tFeGVjdXRlZClcbiAgICAgICAgPyBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZC5mcm9tSlNPTihvYmplY3QudGFza0V4ZWN1dGVkKVxuICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgIGFzc2lnbmVkOiBpc1NldChvYmplY3QuYXNzaWduZWQpID8gVXNlclRhc2tFdmVudF9VVEVBc3NpZ25lZC5mcm9tSlNPTihvYmplY3QuYXNzaWduZWQpIDogdW5kZWZpbmVkLFxuICAgICAgY2FuY2VsbGVkOiBpc1NldChvYmplY3QuY2FuY2VsbGVkKSA/IFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkLmZyb21KU09OKG9iamVjdC5jYW5jZWxsZWQpIDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH0sXG5cbiAgdG9KU09OKG1lc3NhZ2U6IFVzZXJUYXNrRXZlbnQpOiB1bmtub3duIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGlmIChtZXNzYWdlLnRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnRpbWUgPSBtZXNzYWdlLnRpbWU7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnRhc2tFeGVjdXRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmoudGFza0V4ZWN1dGVkID0gVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQudG9KU09OKG1lc3NhZ2UudGFza0V4ZWN1dGVkKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuYXNzaWduZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLmFzc2lnbmVkID0gVXNlclRhc2tFdmVudF9VVEVBc3NpZ25lZC50b0pTT04obWVzc2FnZS5hc3NpZ25lZCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmNhbmNlbGxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmouY2FuY2VsbGVkID0gVXNlclRhc2tFdmVudF9VVEVDYW5jZWxsZWQudG9KU09OKG1lc3NhZ2UuY2FuY2VsbGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICBjcmVhdGU8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRXZlbnQ+LCBJPj4oYmFzZT86IEkpOiBVc2VyVGFza0V2ZW50IHtcbiAgICByZXR1cm4gVXNlclRhc2tFdmVudC5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRXZlbnQ+LCBJPj4ob2JqZWN0OiBJKTogVXNlclRhc2tFdmVudCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50KCk7XG4gICAgbWVzc2FnZS50aW1lID0gb2JqZWN0LnRpbWUgPz8gdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UudGFza0V4ZWN1dGVkID0gKG9iamVjdC50YXNrRXhlY3V0ZWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudGFza0V4ZWN1dGVkICE9PSBudWxsKVxuICAgICAgPyBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZC5mcm9tUGFydGlhbChvYmplY3QudGFza0V4ZWN1dGVkKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS5hc3NpZ25lZCA9IChvYmplY3QuYXNzaWduZWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYXNzaWduZWQgIT09IG51bGwpXG4gICAgICA/IFVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQuZnJvbVBhcnRpYWwob2JqZWN0LmFzc2lnbmVkKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS5jYW5jZWxsZWQgPSAob2JqZWN0LmNhbmNlbGxlZCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5jYW5jZWxsZWQgIT09IG51bGwpXG4gICAgICA/IFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkLmZyb21QYXJ0aWFsKG9iamVjdC5jYW5jZWxsZWQpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50X1VURUNhbmNlbGxlZCgpOiBVc2VyVGFza0V2ZW50X1VURUNhbmNlbGxlZCB7XG4gIHJldHVybiB7IG1lc3NhZ2U6IFwiXCIgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkID0ge1xuICBlbmNvZGUobWVzc2FnZTogVXNlclRhc2tFdmVudF9VVEVDYW5jZWxsZWQsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5tZXNzYWdlICE9PSBcIlwiKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBVc2VyVGFza0V2ZW50X1VURUNhbmNlbGxlZCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBfbTAuUmVhZGVyLmNyZWF0ZShpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50X1VURUNhbmNlbGxlZCgpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKHRhZyAhPT0gMTApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lc3NhZ2UubWVzc2FnZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcblxuICBmcm9tSlNPTihvYmplY3Q6IGFueSk6IFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkIHtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBpc1NldChvYmplY3QubWVzc2FnZSkgPyBnbG9iYWxUaGlzLlN0cmluZyhvYmplY3QubWVzc2FnZSkgOiBcIlwiIH07XG4gIH0sXG5cbiAgdG9KU09OKG1lc3NhZ2U6IFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkKTogdW5rbm93biB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBpZiAobWVzc2FnZS5tZXNzYWdlICE9PSBcIlwiKSB7XG4gICAgICBvYmoubWVzc2FnZSA9IG1lc3NhZ2UubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICBjcmVhdGU8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkPiwgST4+KGJhc2U/OiBJKTogVXNlclRhc2tFdmVudF9VVEVDYW5jZWxsZWQge1xuICAgIHJldHVybiBVc2VyVGFza0V2ZW50X1VURUNhbmNlbGxlZC5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkPiwgST4+KG9iamVjdDogSSk6IFVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVVzZXJUYXNrRXZlbnRfVVRFQ2FuY2VsbGVkKCk7XG4gICAgbWVzc2FnZS5tZXNzYWdlID0gb2JqZWN0Lm1lc3NhZ2UgPz8gXCJcIjtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZCgpOiBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZCB7XG4gIHJldHVybiB7IHRhc2tSdW46IHVuZGVmaW5lZCB9O1xufVxuXG5leHBvcnQgY29uc3QgVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZCwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLnRhc2tSdW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgVGFza1J1bklkLmVuY29kZShtZXNzYWdlLnRhc2tSdW4sIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogX20wLlJlYWRlci5jcmVhdGUoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLnRhc2tSdW4gPSBUYXNrUnVuSWQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcblxuICBmcm9tSlNPTihvYmplY3Q6IGFueSk6IFVzZXJUYXNrRXZlbnRfVVRFVGFza0V4ZWN1dGVkIHtcbiAgICByZXR1cm4geyB0YXNrUnVuOiBpc1NldChvYmplY3QudGFza1J1bikgPyBUYXNrUnVuSWQuZnJvbUpTT04ob2JqZWN0LnRhc2tSdW4pIDogdW5kZWZpbmVkIH07XG4gIH0sXG5cbiAgdG9KU09OKG1lc3NhZ2U6IFVzZXJUYXNrRXZlbnRfVVRFVGFza0V4ZWN1dGVkKTogdW5rbm93biB7XG4gICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICBpZiAobWVzc2FnZS50YXNrUnVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai50YXNrUnVuID0gVGFza1J1bklkLnRvSlNPTihtZXNzYWdlLnRhc2tSdW4pO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuXG4gIGNyZWF0ZTxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8VXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQ+LCBJPj4oYmFzZT86IEkpOiBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZCB7XG4gICAgcmV0dXJuIFVzZXJUYXNrRXZlbnRfVVRFVGFza0V4ZWN1dGVkLmZyb21QYXJ0aWFsKGJhc2UgPz8gKHt9IGFzIGFueSkpO1xuICB9LFxuICBmcm9tUGFydGlhbDxJIGV4dGVuZHMgRXhhY3Q8RGVlcFBhcnRpYWw8VXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQ+LCBJPj4oXG4gICAgb2JqZWN0OiBJLFxuICApOiBVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50X1VURVRhc2tFeGVjdXRlZCgpO1xuICAgIG1lc3NhZ2UudGFza1J1biA9IChvYmplY3QudGFza1J1biAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC50YXNrUnVuICE9PSBudWxsKVxuICAgICAgPyBUYXNrUnVuSWQuZnJvbVBhcnRpYWwob2JqZWN0LnRhc2tSdW4pXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkKCk6IFVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQge1xuICByZXR1cm4geyBvbGRVc2VySWQ6IHVuZGVmaW5lZCwgb2xkVXNlckdyb3VwOiB1bmRlZmluZWQsIG5ld1VzZXJJZDogdW5kZWZpbmVkLCBuZXdVc2VyR3JvdXA6IHVuZGVmaW5lZCB9O1xufVxuXG5leHBvcnQgY29uc3QgVXNlclRhc2tFdmVudF9VVEVBc3NpZ25lZCA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5vbGRVc2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uub2xkVXNlcklkKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uub2xkVXNlckdyb3VwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLm9sZFVzZXJHcm91cCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm5ld1VzZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS5uZXdVc2VySWQpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5uZXdVc2VyR3JvdXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigzNCkuc3RyaW5nKG1lc3NhZ2UubmV3VXNlckdyb3VwKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IF9tMC5SZWFkZXIuY3JlYXRlKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmICh0YWcgIT09IDEwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm9sZFVzZXJJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmICh0YWcgIT09IDE4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm9sZFVzZXJHcm91cCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGlmICh0YWcgIT09IDI2KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm5ld1VzZXJJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGlmICh0YWcgIT09IDM0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXNzYWdlLm5ld1VzZXJHcm91cCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgodGFnICYgNykgPT09IDQgfHwgdGFnID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcblxuICBmcm9tSlNPTihvYmplY3Q6IGFueSk6IFVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQge1xuICAgIHJldHVybiB7XG4gICAgICBvbGRVc2VySWQ6IGlzU2V0KG9iamVjdC5vbGRVc2VySWQpID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0Lm9sZFVzZXJJZCkgOiB1bmRlZmluZWQsXG4gICAgICBvbGRVc2VyR3JvdXA6IGlzU2V0KG9iamVjdC5vbGRVc2VyR3JvdXApID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0Lm9sZFVzZXJHcm91cCkgOiB1bmRlZmluZWQsXG4gICAgICBuZXdVc2VySWQ6IGlzU2V0KG9iamVjdC5uZXdVc2VySWQpID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0Lm5ld1VzZXJJZCkgOiB1bmRlZmluZWQsXG4gICAgICBuZXdVc2VyR3JvdXA6IGlzU2V0KG9iamVjdC5uZXdVc2VyR3JvdXApID8gZ2xvYmFsVGhpcy5TdHJpbmcob2JqZWN0Lm5ld1VzZXJHcm91cCkgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfSxcblxuICB0b0pTT04obWVzc2FnZTogVXNlclRhc2tFdmVudF9VVEVBc3NpZ25lZCk6IHVua25vd24ge1xuICAgIGNvbnN0IG9iajogYW55ID0ge307XG4gICAgaWYgKG1lc3NhZ2Uub2xkVXNlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5vbGRVc2VySWQgPSBtZXNzYWdlLm9sZFVzZXJJZDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uub2xkVXNlckdyb3VwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5vbGRVc2VyR3JvdXAgPSBtZXNzYWdlLm9sZFVzZXJHcm91cDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UubmV3VXNlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5uZXdVc2VySWQgPSBtZXNzYWdlLm5ld1VzZXJJZDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UubmV3VXNlckdyb3VwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9iai5uZXdVc2VyR3JvdXAgPSBtZXNzYWdlLm5ld1VzZXJHcm91cDtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICBjcmVhdGU8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQ+LCBJPj4oYmFzZT86IEkpOiBVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkIHtcbiAgICByZXR1cm4gVXNlclRhc2tFdmVudF9VVEVBc3NpZ25lZC5mcm9tUGFydGlhbChiYXNlID8/ICh7fSBhcyBhbnkpKTtcbiAgfSxcbiAgZnJvbVBhcnRpYWw8SSBleHRlbmRzIEV4YWN0PERlZXBQYXJ0aWFsPFVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQ+LCBJPj4ob2JqZWN0OiBJKTogVXNlclRhc2tFdmVudF9VVEVBc3NpZ25lZCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkKCk7XG4gICAgbWVzc2FnZS5vbGRVc2VySWQgPSBvYmplY3Qub2xkVXNlcklkID8/IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLm9sZFVzZXJHcm91cCA9IG9iamVjdC5vbGRVc2VyR3JvdXAgPz8gdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UubmV3VXNlcklkID0gb2JqZWN0Lm5ld1VzZXJJZCA/PyB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS5uZXdVc2VyR3JvdXAgPSBvYmplY3QubmV3VXNlckdyb3VwID8/IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbn07XG5cbnR5cGUgQnVpbHRpbiA9IERhdGUgfCBGdW5jdGlvbiB8IFVpbnQ4QXJyYXkgfCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgdHlwZSBEZWVwUGFydGlhbDxUPiA9IFQgZXh0ZW5kcyBCdWlsdGluID8gVFxuICA6IFQgZXh0ZW5kcyBnbG9iYWxUaGlzLkFycmF5PGluZmVyIFU+ID8gZ2xvYmFsVGhpcy5BcnJheTxEZWVwUGFydGlhbDxVPj5cbiAgOiBUIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxpbmZlciBVPiA/IFJlYWRvbmx5QXJyYXk8RGVlcFBhcnRpYWw8VT4+XG4gIDogVCBleHRlbmRzIHt9ID8geyBbSyBpbiBrZXlvZiBUXT86IERlZXBQYXJ0aWFsPFRbS10+IH1cbiAgOiBQYXJ0aWFsPFQ+O1xuXG50eXBlIEtleXNPZlVuaW9uPFQ+ID0gVCBleHRlbmRzIFQgPyBrZXlvZiBUIDogbmV2ZXI7XG5leHBvcnQgdHlwZSBFeGFjdDxQLCBJIGV4dGVuZHMgUD4gPSBQIGV4dGVuZHMgQnVpbHRpbiA/IFBcbiAgOiBQICYgeyBbSyBpbiBrZXlvZiBQXTogRXhhY3Q8UFtLXSwgSVtLXT4gfSAmIHsgW0sgaW4gRXhjbHVkZTxrZXlvZiBJLCBLZXlzT2ZVbmlvbjxQPj5dOiBuZXZlciB9O1xuXG5mdW5jdGlvbiB0b1RpbWVzdGFtcChkYXRlU3RyOiBzdHJpbmcpOiBUaW1lc3RhbXAge1xuICBjb25zdCBkYXRlID0gbmV3IGdsb2JhbFRoaXMuRGF0ZShkYXRlU3RyKTtcbiAgY29uc3Qgc2Vjb25kcyA9IE1hdGgudHJ1bmMoZGF0ZS5nZXRUaW1lKCkgLyAxXzAwMCk7XG4gIGNvbnN0IG5hbm9zID0gKGRhdGUuZ2V0VGltZSgpICUgMV8wMDApICogMV8wMDBfMDAwO1xuICByZXR1cm4geyBzZWNvbmRzLCBuYW5vcyB9O1xufVxuXG5mdW5jdGlvbiBmcm9tVGltZXN0YW1wKHQ6IFRpbWVzdGFtcCk6IHN0cmluZyB7XG4gIGxldCBtaWxsaXMgPSAodC5zZWNvbmRzIHx8IDApICogMV8wMDA7XG4gIG1pbGxpcyArPSAodC5uYW5vcyB8fCAwKSAvIDFfMDAwXzAwMDtcbiAgcmV0dXJuIG5ldyBnbG9iYWxUaGlzLkRhdGUobWlsbGlzKS50b0lTT1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4iXSwibmFtZXMiOlsiX20wIiwiVmFyaWFibGVUeXBlIiwidmFyaWFibGVUeXBlRnJvbUpTT04iLCJ2YXJpYWJsZVR5cGVUb0pTT04iLCJ2YXJpYWJsZVR5cGVUb051bWJlciIsIlRpbWVzdGFtcCIsIk5vZGVSdW5JZCIsIlRhc2tSdW5JZCIsIlVzZXJUYXNrRGVmSWQiLCJVc2VyVGFza1J1bklkIiwiVmFyaWFibGVWYWx1ZSIsInByb3RvYnVmUGFja2FnZSIsIlVzZXJUYXNrUnVuU3RhdHVzIiwidXNlclRhc2tSdW5TdGF0dXNGcm9tSlNPTiIsIm9iamVjdCIsInVzZXJUYXNrUnVuU3RhdHVzVG9KU09OIiwidXNlclRhc2tSdW5TdGF0dXNUb051bWJlciIsImNyZWF0ZUJhc2VVc2VyVGFza0RlZiIsIm5hbWUiLCJ2ZXJzaW9uIiwiZGVzY3JpcHRpb24iLCJ1bmRlZmluZWQiLCJmaWVsZHMiLCJjcmVhdGVkQXQiLCJVc2VyVGFza0RlZiIsImVuY29kZSIsIm1lc3NhZ2UiLCJ3cml0ZXIiLCJXcml0ZXIiLCJjcmVhdGUiLCJ1aW50MzIiLCJzdHJpbmciLCJpbnQzMiIsInYiLCJVc2VyVGFza0ZpZWxkIiwiZm9yayIsImxkZWxpbSIsInRvVGltZXN0YW1wIiwiZGVjb2RlIiwiaW5wdXQiLCJsZW5ndGgiLCJyZWFkZXIiLCJSZWFkZXIiLCJlbmQiLCJsZW4iLCJwb3MiLCJ0YWciLCJwdXNoIiwiZnJvbVRpbWVzdGFtcCIsInNraXBUeXBlIiwiZnJvbUpTT04iLCJpc1NldCIsImdsb2JhbFRoaXMiLCJTdHJpbmciLCJOdW1iZXIiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJlIiwidG9KU09OIiwib2JqIiwiTWF0aCIsInJvdW5kIiwiYmFzZSIsImZyb21QYXJ0aWFsIiwiY3JlYXRlQmFzZVVzZXJUYXNrRmllbGQiLCJ0eXBlIiwiSlNPTl9PQkoiLCJkaXNwbGF5TmFtZSIsInJlcXVpcmVkIiwiYm9vbCIsIkJvb2xlYW4iLCJjcmVhdGVCYXNlVXNlclRhc2tSdW4iLCJpZCIsInVzZXJUYXNrRGVmSWQiLCJ1c2VyR3JvdXAiLCJ1c2VySWQiLCJyZXN1bHRzIiwic3RhdHVzIiwiZXZlbnRzIiwibm90ZXMiLCJzY2hlZHVsZWRUaW1lIiwibm9kZVJ1bklkIiwiZXBvY2giLCJVc2VyVGFza1J1biIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJVc2VyVGFza1J1bl9SZXN1bHRzRW50cnkiLCJVc2VyVGFza0V2ZW50IiwiZW50cnk2IiwiaXNPYmplY3QiLCJyZWR1Y2UiLCJhY2MiLCJrIiwiY3JlYXRlQmFzZVVzZXJUYXNrUnVuX1Jlc3VsdHNFbnRyeSIsImNyZWF0ZUJhc2VBc3NpZ25Vc2VyVGFza1J1blJlcXVlc3QiLCJ1c2VyVGFza1J1bklkIiwib3ZlcnJpZGVDbGFpbSIsIkFzc2lnblVzZXJUYXNrUnVuUmVxdWVzdCIsImNyZWF0ZUJhc2VDb21wbGV0ZVVzZXJUYXNrUnVuUmVxdWVzdCIsIkNvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0IiwiQ29tcGxldGVVc2VyVGFza1J1blJlcXVlc3RfUmVzdWx0c0VudHJ5IiwiZW50cnkyIiwiY3JlYXRlQmFzZUNvbXBsZXRlVXNlclRhc2tSdW5SZXF1ZXN0X1Jlc3VsdHNFbnRyeSIsImNyZWF0ZUJhc2VDYW5jZWxVc2VyVGFza1J1blJlcXVlc3QiLCJDYW5jZWxVc2VyVGFza1J1blJlcXVlc3QiLCJjcmVhdGVCYXNlVXNlclRhc2tUcmlnZ2VyUmVmZXJlbmNlIiwidXNlclRhc2tFdmVudE51bWJlciIsIlVzZXJUYXNrVHJpZ2dlclJlZmVyZW5jZSIsImNyZWF0ZUJhc2VVc2VyVGFza0V2ZW50IiwidGltZSIsInRhc2tFeGVjdXRlZCIsImFzc2lnbmVkIiwiY2FuY2VsbGVkIiwiVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQiLCJVc2VyVGFza0V2ZW50X1VURUFzc2lnbmVkIiwiVXNlclRhc2tFdmVudF9VVEVDYW5jZWxsZWQiLCJjcmVhdGVCYXNlVXNlclRhc2tFdmVudF9VVEVDYW5jZWxsZWQiLCJjcmVhdGVCYXNlVXNlclRhc2tFdmVudF9VVEVUYXNrRXhlY3V0ZWQiLCJ0YXNrUnVuIiwiY3JlYXRlQmFzZVVzZXJUYXNrRXZlbnRfVVRFQXNzaWduZWQiLCJvbGRVc2VySWQiLCJvbGRVc2VyR3JvdXAiLCJuZXdVc2VySWQiLCJuZXdVc2VyR3JvdXAiLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJzZWNvbmRzIiwidHJ1bmMiLCJnZXRUaW1lIiwibmFub3MiLCJ0IiwibWlsbGlzIiwidG9JU09TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/user_tasks.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/variable.ts":
/*!********************************************!*\
  !*** ./littlehorse-public-api/variable.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Variable: () => (/* binding */ Variable),\n/* harmony export */   VariableValue: () => (/* binding */ VariableValue),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"long\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* eslint-disable */ \n\n\n\nconst protobufPackage = \"littlehorse\";\nfunction createBaseVariableValue() {\n    return {\n        jsonObj: undefined,\n        jsonArr: undefined,\n        double: undefined,\n        bool: undefined,\n        str: undefined,\n        int: undefined,\n        bytes: undefined\n    };\n}\nconst VariableValue = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.jsonObj !== undefined) {\n            writer.uint32(18).string(message.jsonObj);\n        }\n        if (message.jsonArr !== undefined) {\n            writer.uint32(26).string(message.jsonArr);\n        }\n        if (message.double !== undefined) {\n            writer.uint32(33).double(message.double);\n        }\n        if (message.bool !== undefined) {\n            writer.uint32(40).bool(message.bool);\n        }\n        if (message.str !== undefined) {\n            writer.uint32(50).string(message.str);\n        }\n        if (message.int !== undefined) {\n            writer.uint32(56).int64(message.int);\n        }\n        if (message.bytes !== undefined) {\n            writer.uint32(66).bytes(message.bytes);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariableValue();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.jsonObj = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.jsonArr = reader.string();\n                    continue;\n                case 4:\n                    if (tag !== 33) {\n                        break;\n                    }\n                    message.double = reader.double();\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.bool = reader.bool();\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.str = reader.string();\n                    continue;\n                case 7:\n                    if (tag !== 56) {\n                        break;\n                    }\n                    message.int = longToNumber(reader.int64());\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.bytes = reader.bytes();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            jsonObj: isSet(object.jsonObj) ? globalThis.String(object.jsonObj) : undefined,\n            jsonArr: isSet(object.jsonArr) ? globalThis.String(object.jsonArr) : undefined,\n            double: isSet(object.double) ? globalThis.Number(object.double) : undefined,\n            bool: isSet(object.bool) ? globalThis.Boolean(object.bool) : undefined,\n            str: isSet(object.str) ? globalThis.String(object.str) : undefined,\n            int: isSet(object.int) ? globalThis.Number(object.int) : undefined,\n            bytes: isSet(object.bytes) ? bytesFromBase64(object.bytes) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.jsonObj !== undefined) {\n            obj.jsonObj = message.jsonObj;\n        }\n        if (message.jsonArr !== undefined) {\n            obj.jsonArr = message.jsonArr;\n        }\n        if (message.double !== undefined) {\n            obj.double = message.double;\n        }\n        if (message.bool !== undefined) {\n            obj.bool = message.bool;\n        }\n        if (message.str !== undefined) {\n            obj.str = message.str;\n        }\n        if (message.int !== undefined) {\n            obj.int = Math.round(message.int);\n        }\n        if (message.bytes !== undefined) {\n            obj.bytes = base64FromBytes(message.bytes);\n        }\n        return obj;\n    },\n    create (base) {\n        return VariableValue.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariableValue();\n        message.jsonObj = object.jsonObj ?? undefined;\n        message.jsonArr = object.jsonArr ?? undefined;\n        message.double = object.double ?? undefined;\n        message.bool = object.bool ?? undefined;\n        message.str = object.str ?? undefined;\n        message.int = object.int ?? undefined;\n        message.bytes = object.bytes ?? undefined;\n        return message;\n    }\n};\nfunction createBaseVariable() {\n    return {\n        id: undefined,\n        value: undefined,\n        createdAt: undefined,\n        wfSpecId: undefined\n    };\n}\nconst Variable = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.VariableId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.value !== undefined) {\n            VariableValue.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();\n        }\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.encode(message.wfSpecId, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVariable();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.VariableId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.VariableId.fromJSON(object.id) : undefined,\n            value: isSet(object.value) ? VariableValue.fromJSON(object.value) : undefined,\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromJSON(object.wfSpecId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.VariableId.toJSON(message.id);\n        }\n        if (message.value !== undefined) {\n            obj.value = VariableValue.toJSON(message.value);\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        return obj;\n    },\n    create (base) {\n        return Variable.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVariable();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.VariableId.fromPartial(object.id) : undefined;\n        message.value = object.value !== undefined && object.value !== null ? VariableValue.fromPartial(object.value) : undefined;\n        message.createdAt = object.createdAt ?? undefined;\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        return message;\n    }\n};\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    } else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for(let i = 0; i < bin.length; ++i){\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    } else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(globalThis.String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction longToNumber(long) {\n    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long !== (long__WEBPACK_IMPORTED_MODULE_0___default())) {\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long = (long__WEBPACK_IMPORTED_MODULE_0___default());\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/variable.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/wf_run.ts":
/*!******************************************!*\
  !*** ./littlehorse-public-api/wf_run.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FailureBeingHandled: () => (/* binding */ FailureBeingHandled),\n/* harmony export */   HandlingFailureHaltReason: () => (/* binding */ HandlingFailureHaltReason),\n/* harmony export */   Interrupted: () => (/* binding */ Interrupted),\n/* harmony export */   ManualHalt: () => (/* binding */ ManualHalt),\n/* harmony export */   ParentHalted: () => (/* binding */ ParentHalted),\n/* harmony export */   PendingFailureHandler: () => (/* binding */ PendingFailureHandler),\n/* harmony export */   PendingFailureHandlerHaltReason: () => (/* binding */ PendingFailureHandlerHaltReason),\n/* harmony export */   PendingInterrupt: () => (/* binding */ PendingInterrupt),\n/* harmony export */   PendingInterruptHaltReason: () => (/* binding */ PendingInterruptHaltReason),\n/* harmony export */   ThreadHaltReason: () => (/* binding */ ThreadHaltReason),\n/* harmony export */   ThreadRun: () => (/* binding */ ThreadRun),\n/* harmony export */   ThreadType: () => (/* binding */ ThreadType),\n/* harmony export */   WfRun: () => (/* binding */ WfRun),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   threadTypeFromJSON: () => (/* binding */ threadTypeFromJSON),\n/* harmony export */   threadTypeToJSON: () => (/* binding */ threadTypeToJSON),\n/* harmony export */   threadTypeToNumber: () => (/* binding */ threadTypeToNumber)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* eslint-disable */ \n\n\n\nconst protobufPackage = \"littlehorse\";\nvar ThreadType;\n(function(ThreadType) {\n    /** ENTRYPOINT - The ENTRYPOINT ThreadRun. Exactly one per WfRun. Always has number == 0. */ ThreadType[\"ENTRYPOINT\"] = \"ENTRYPOINT\";\n    /**\n   * CHILD - A ThreadRun explicitly created by another ThreadRun via a START_THREAD or START_MULTIPLE_THREADS\n   * NodeRun.\n   */ ThreadType[\"CHILD\"] = \"CHILD\";\n    /** INTERRUPT - A ThreadRun that was created to handle an Interrupt. */ ThreadType[\"INTERRUPT\"] = \"INTERRUPT\";\n    /** FAILURE_HANDLER - A ThreadRun that was created to handle a Failure. */ ThreadType[\"FAILURE_HANDLER\"] = \"FAILURE_HANDLER\";\n    ThreadType[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(ThreadType || (ThreadType = {}));\nfunction threadTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ENTRYPOINT\":\n            return \"ENTRYPOINT\";\n        case 1:\n        case \"CHILD\":\n            return \"CHILD\";\n        case 2:\n        case \"INTERRUPT\":\n            return \"INTERRUPT\";\n        case 3:\n        case \"FAILURE_HANDLER\":\n            return \"FAILURE_HANDLER\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction threadTypeToJSON(object) {\n    switch(object){\n        case \"ENTRYPOINT\":\n            return \"ENTRYPOINT\";\n        case \"CHILD\":\n            return \"CHILD\";\n        case \"INTERRUPT\":\n            return \"INTERRUPT\";\n        case \"FAILURE_HANDLER\":\n            return \"FAILURE_HANDLER\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction threadTypeToNumber(object) {\n    switch(object){\n        case \"ENTRYPOINT\":\n            return 0;\n        case \"CHILD\":\n            return 1;\n        case \"INTERRUPT\":\n            return 2;\n        case \"FAILURE_HANDLER\":\n            return 3;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nfunction createBaseWfRun() {\n    return {\n        id: undefined,\n        wfSpecId: undefined,\n        oldWfSpecVersions: [],\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n        greatestThreadrunNumber: 0,\n        startTime: undefined,\n        endTime: undefined,\n        threadRuns: [],\n        pendingInterrupts: [],\n        pendingFailures: []\n    };\n}\nconst WfRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WfRunId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.encode(message.wfSpecId, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.oldWfSpecVersions){\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            writer.uint32(32).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToNumber)(message.status));\n        }\n        if (message.greatestThreadrunNumber !== 0) {\n            writer.uint32(40).int32(message.greatestThreadrunNumber);\n        }\n        if (message.startTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(50).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(58).fork()).ldelim();\n        }\n        for (const v of message.threadRuns){\n            ThreadRun.encode(v, writer.uint32(66).fork()).ldelim();\n        }\n        for (const v of message.pendingInterrupts){\n            PendingInterrupt.encode(v, writer.uint32(74).fork()).ldelim();\n        }\n        for (const v of message.pendingFailures){\n            PendingFailureHandler.encode(v, writer.uint32(82).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfRunId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.oldWfSpecVersions.push(_object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(reader.int32());\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.greatestThreadrunNumber = reader.int32();\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.startTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.endTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.threadRuns.push(ThreadRun.decode(reader, reader.uint32()));\n                    continue;\n                case 9:\n                    if (tag !== 74) {\n                        break;\n                    }\n                    message.pendingInterrupts.push(PendingInterrupt.decode(reader, reader.uint32()));\n                    continue;\n                case 10:\n                    if (tag !== 82) {\n                        break;\n                    }\n                    message.pendingFailures.push(PendingFailureHandler.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfRunId.fromJSON(object.id) : undefined,\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromJSON(object.wfSpecId) : undefined,\n            oldWfSpecVersions: globalThis.Array.isArray(object?.oldWfSpecVersions) ? object.oldWfSpecVersions.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromJSON(e)) : [],\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n            greatestThreadrunNumber: isSet(object.greatestThreadrunNumber) ? globalThis.Number(object.greatestThreadrunNumber) : 0,\n            startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : undefined,\n            threadRuns: globalThis.Array.isArray(object?.threadRuns) ? object.threadRuns.map((e)=>ThreadRun.fromJSON(e)) : [],\n            pendingInterrupts: globalThis.Array.isArray(object?.pendingInterrupts) ? object.pendingInterrupts.map((e)=>PendingInterrupt.fromJSON(e)) : [],\n            pendingFailures: globalThis.Array.isArray(object?.pendingFailures) ? object.pendingFailures.map((e)=>PendingFailureHandler.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfRunId.toJSON(message.id);\n        }\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        if (message.oldWfSpecVersions?.length) {\n            obj.oldWfSpecVersions = message.oldWfSpecVersions.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.toJSON(e));\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToJSON)(message.status);\n        }\n        if (message.greatestThreadrunNumber !== 0) {\n            obj.greatestThreadrunNumber = Math.round(message.greatestThreadrunNumber);\n        }\n        if (message.startTime !== undefined) {\n            obj.startTime = message.startTime;\n        }\n        if (message.endTime !== undefined) {\n            obj.endTime = message.endTime;\n        }\n        if (message.threadRuns?.length) {\n            obj.threadRuns = message.threadRuns.map((e)=>ThreadRun.toJSON(e));\n        }\n        if (message.pendingInterrupts?.length) {\n            obj.pendingInterrupts = message.pendingInterrupts.map((e)=>PendingInterrupt.toJSON(e));\n        }\n        if (message.pendingFailures?.length) {\n            obj.pendingFailures = message.pendingFailures.map((e)=>PendingFailureHandler.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return WfRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfRun();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfRunId.fromPartial(object.id) : undefined;\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        message.oldWfSpecVersions = object.oldWfSpecVersions?.map((e)=>_object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromPartial(e)) || [];\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING;\n        message.greatestThreadrunNumber = object.greatestThreadrunNumber ?? 0;\n        message.startTime = object.startTime ?? undefined;\n        message.endTime = object.endTime ?? undefined;\n        message.threadRuns = object.threadRuns?.map((e)=>ThreadRun.fromPartial(e)) || [];\n        message.pendingInterrupts = object.pendingInterrupts?.map((e)=>PendingInterrupt.fromPartial(e)) || [];\n        message.pendingFailures = object.pendingFailures?.map((e)=>PendingFailureHandler.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseThreadRun() {\n    return {\n        wfSpecId: undefined,\n        number: 0,\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n        threadSpecName: \"\",\n        startTime: undefined,\n        endTime: undefined,\n        errorMessage: undefined,\n        childThreadIds: [],\n        parentThreadId: undefined,\n        haltReasons: [],\n        interruptTriggerId: undefined,\n        failureBeingHandled: undefined,\n        currentNodePosition: 0,\n        handledFailedChildren: [],\n        type: \"ENTRYPOINT\"\n    };\n}\nconst ThreadRun = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.wfSpecId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.encode(message.wfSpecId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.number !== 0) {\n            writer.uint32(16).int32(message.number);\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToNumber)(message.status));\n        }\n        if (message.threadSpecName !== \"\") {\n            writer.uint32(34).string(message.threadSpecName);\n        }\n        if (message.startTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).ldelim();\n        }\n        if (message.errorMessage !== undefined) {\n            writer.uint32(58).string(message.errorMessage);\n        }\n        writer.uint32(66).fork();\n        for (const v of message.childThreadIds){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.parentThreadId !== undefined) {\n            writer.uint32(72).int32(message.parentThreadId);\n        }\n        for (const v of message.haltReasons){\n            ThreadHaltReason.encode(v, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.interruptTriggerId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.encode(message.interruptTriggerId, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.failureBeingHandled !== undefined) {\n            FailureBeingHandled.encode(message.failureBeingHandled, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.currentNodePosition !== 0) {\n            writer.uint32(104).int32(message.currentNodePosition);\n        }\n        writer.uint32(114).fork();\n        for (const v of message.handledFailedChildren){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.type !== \"ENTRYPOINT\") {\n            writer.uint32(120).int32(threadTypeToNumber(message.type));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadRun();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.number = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(reader.int32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.threadSpecName = reader.string();\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.startTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.endTime = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.errorMessage = reader.string();\n                    continue;\n                case 8:\n                    if (tag === 64) {\n                        message.childThreadIds.push(reader.int32());\n                        continue;\n                    }\n                    if (tag === 66) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.childThreadIds.push(reader.int32());\n                        }\n                        continue;\n                    }\n                    break;\n                case 9:\n                    if (tag !== 72) {\n                        break;\n                    }\n                    message.parentThreadId = reader.int32();\n                    continue;\n                case 10:\n                    if (tag !== 82) {\n                        break;\n                    }\n                    message.haltReasons.push(ThreadHaltReason.decode(reader, reader.uint32()));\n                    continue;\n                case 11:\n                    if (tag !== 90) {\n                        break;\n                    }\n                    message.interruptTriggerId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.decode(reader, reader.uint32());\n                    continue;\n                case 12:\n                    if (tag !== 98) {\n                        break;\n                    }\n                    message.failureBeingHandled = FailureBeingHandled.decode(reader, reader.uint32());\n                    continue;\n                case 13:\n                    if (tag !== 104) {\n                        break;\n                    }\n                    message.currentNodePosition = reader.int32();\n                    continue;\n                case 14:\n                    if (tag === 112) {\n                        message.handledFailedChildren.push(reader.int32());\n                        continue;\n                    }\n                    if (tag === 114) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.handledFailedChildren.push(reader.int32());\n                        }\n                        continue;\n                    }\n                    break;\n                case 15:\n                    if (tag !== 120) {\n                        break;\n                    }\n                    message.type = threadTypeFromJSON(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfSpecId: isSet(object.wfSpecId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromJSON(object.wfSpecId) : undefined,\n            number: isSet(object.number) ? globalThis.Number(object.number) : 0,\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING,\n            threadSpecName: isSet(object.threadSpecName) ? globalThis.String(object.threadSpecName) : \"\",\n            startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : undefined,\n            errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined,\n            childThreadIds: globalThis.Array.isArray(object?.childThreadIds) ? object.childThreadIds.map((e)=>globalThis.Number(e)) : [],\n            parentThreadId: isSet(object.parentThreadId) ? globalThis.Number(object.parentThreadId) : undefined,\n            haltReasons: globalThis.Array.isArray(object?.haltReasons) ? object.haltReasons.map((e)=>ThreadHaltReason.fromJSON(e)) : [],\n            interruptTriggerId: isSet(object.interruptTriggerId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromJSON(object.interruptTriggerId) : undefined,\n            failureBeingHandled: isSet(object.failureBeingHandled) ? FailureBeingHandled.fromJSON(object.failureBeingHandled) : undefined,\n            currentNodePosition: isSet(object.currentNodePosition) ? globalThis.Number(object.currentNodePosition) : 0,\n            handledFailedChildren: globalThis.Array.isArray(object?.handledFailedChildren) ? object.handledFailedChildren.map((e)=>globalThis.Number(e)) : [],\n            type: isSet(object.type) ? threadTypeFromJSON(object.type) : \"ENTRYPOINT\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfSpecId !== undefined) {\n            obj.wfSpecId = _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.toJSON(message.wfSpecId);\n        }\n        if (message.number !== 0) {\n            obj.number = Math.round(message.number);\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.lHStatusToJSON)(message.status);\n        }\n        if (message.threadSpecName !== \"\") {\n            obj.threadSpecName = message.threadSpecName;\n        }\n        if (message.startTime !== undefined) {\n            obj.startTime = message.startTime;\n        }\n        if (message.endTime !== undefined) {\n            obj.endTime = message.endTime;\n        }\n        if (message.errorMessage !== undefined) {\n            obj.errorMessage = message.errorMessage;\n        }\n        if (message.childThreadIds?.length) {\n            obj.childThreadIds = message.childThreadIds.map((e)=>Math.round(e));\n        }\n        if (message.parentThreadId !== undefined) {\n            obj.parentThreadId = Math.round(message.parentThreadId);\n        }\n        if (message.haltReasons?.length) {\n            obj.haltReasons = message.haltReasons.map((e)=>ThreadHaltReason.toJSON(e));\n        }\n        if (message.interruptTriggerId !== undefined) {\n            obj.interruptTriggerId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.toJSON(message.interruptTriggerId);\n        }\n        if (message.failureBeingHandled !== undefined) {\n            obj.failureBeingHandled = FailureBeingHandled.toJSON(message.failureBeingHandled);\n        }\n        if (message.currentNodePosition !== 0) {\n            obj.currentNodePosition = Math.round(message.currentNodePosition);\n        }\n        if (message.handledFailedChildren?.length) {\n            obj.handledFailedChildren = message.handledFailedChildren.map((e)=>Math.round(e));\n        }\n        if (message.type !== \"ENTRYPOINT\") {\n            obj.type = threadTypeToJSON(message.type);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadRun.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadRun();\n        message.wfSpecId = object.wfSpecId !== undefined && object.wfSpecId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WfSpecId.fromPartial(object.wfSpecId) : undefined;\n        message.number = object.number ?? 0;\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.LHStatus.STARTING;\n        message.threadSpecName = object.threadSpecName ?? \"\";\n        message.startTime = object.startTime ?? undefined;\n        message.endTime = object.endTime ?? undefined;\n        message.errorMessage = object.errorMessage ?? undefined;\n        message.childThreadIds = object.childThreadIds?.map((e)=>e) || [];\n        message.parentThreadId = object.parentThreadId ?? undefined;\n        message.haltReasons = object.haltReasons?.map((e)=>ThreadHaltReason.fromPartial(e)) || [];\n        message.interruptTriggerId = object.interruptTriggerId !== undefined && object.interruptTriggerId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromPartial(object.interruptTriggerId) : undefined;\n        message.failureBeingHandled = object.failureBeingHandled !== undefined && object.failureBeingHandled !== null ? FailureBeingHandled.fromPartial(object.failureBeingHandled) : undefined;\n        message.currentNodePosition = object.currentNodePosition ?? 0;\n        message.handledFailedChildren = object.handledFailedChildren?.map((e)=>e) || [];\n        message.type = object.type ?? \"ENTRYPOINT\";\n        return message;\n    }\n};\nfunction createBaseFailureBeingHandled() {\n    return {\n        threadRunNumber: 0,\n        nodeRunPosition: 0,\n        failureNumber: 0\n    };\n}\nconst FailureBeingHandled = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.threadRunNumber !== 0) {\n            writer.uint32(8).int32(message.threadRunNumber);\n        }\n        if (message.nodeRunPosition !== 0) {\n            writer.uint32(16).int32(message.nodeRunPosition);\n        }\n        if (message.failureNumber !== 0) {\n            writer.uint32(24).int32(message.failureNumber);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFailureBeingHandled();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.threadRunNumber = reader.int32();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.nodeRunPosition = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.failureNumber = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threadRunNumber: isSet(object.threadRunNumber) ? globalThis.Number(object.threadRunNumber) : 0,\n            nodeRunPosition: isSet(object.nodeRunPosition) ? globalThis.Number(object.nodeRunPosition) : 0,\n            failureNumber: isSet(object.failureNumber) ? globalThis.Number(object.failureNumber) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threadRunNumber !== 0) {\n            obj.threadRunNumber = Math.round(message.threadRunNumber);\n        }\n        if (message.nodeRunPosition !== 0) {\n            obj.nodeRunPosition = Math.round(message.nodeRunPosition);\n        }\n        if (message.failureNumber !== 0) {\n            obj.failureNumber = Math.round(message.failureNumber);\n        }\n        return obj;\n    },\n    create (base) {\n        return FailureBeingHandled.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseFailureBeingHandled();\n        message.threadRunNumber = object.threadRunNumber ?? 0;\n        message.nodeRunPosition = object.nodeRunPosition ?? 0;\n        message.failureNumber = object.failureNumber ?? 0;\n        return message;\n    }\n};\nfunction createBasePendingInterrupt() {\n    return {\n        externalEventId: undefined,\n        handlerSpecName: \"\",\n        interruptedThreadId: 0\n    };\n}\nconst PendingInterrupt = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.externalEventId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.encode(message.externalEventId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.handlerSpecName !== \"\") {\n            writer.uint32(18).string(message.handlerSpecName);\n        }\n        if (message.interruptedThreadId !== 0) {\n            writer.uint32(24).int32(message.interruptedThreadId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePendingInterrupt();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.externalEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.handlerSpecName = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.interruptedThreadId = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            externalEventId: isSet(object.externalEventId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromJSON(object.externalEventId) : undefined,\n            handlerSpecName: isSet(object.handlerSpecName) ? globalThis.String(object.handlerSpecName) : \"\",\n            interruptedThreadId: isSet(object.interruptedThreadId) ? globalThis.Number(object.interruptedThreadId) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.externalEventId !== undefined) {\n            obj.externalEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.toJSON(message.externalEventId);\n        }\n        if (message.handlerSpecName !== \"\") {\n            obj.handlerSpecName = message.handlerSpecName;\n        }\n        if (message.interruptedThreadId !== 0) {\n            obj.interruptedThreadId = Math.round(message.interruptedThreadId);\n        }\n        return obj;\n    },\n    create (base) {\n        return PendingInterrupt.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePendingInterrupt();\n        message.externalEventId = object.externalEventId !== undefined && object.externalEventId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromPartial(object.externalEventId) : undefined;\n        message.handlerSpecName = object.handlerSpecName ?? \"\";\n        message.interruptedThreadId = object.interruptedThreadId ?? 0;\n        return message;\n    }\n};\nfunction createBasePendingFailureHandler() {\n    return {\n        failedThreadRun: 0,\n        handlerSpecName: \"\"\n    };\n}\nconst PendingFailureHandler = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.failedThreadRun !== 0) {\n            writer.uint32(8).int32(message.failedThreadRun);\n        }\n        if (message.handlerSpecName !== \"\") {\n            writer.uint32(18).string(message.handlerSpecName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePendingFailureHandler();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.failedThreadRun = reader.int32();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.handlerSpecName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            failedThreadRun: isSet(object.failedThreadRun) ? globalThis.Number(object.failedThreadRun) : 0,\n            handlerSpecName: isSet(object.handlerSpecName) ? globalThis.String(object.handlerSpecName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.failedThreadRun !== 0) {\n            obj.failedThreadRun = Math.round(message.failedThreadRun);\n        }\n        if (message.handlerSpecName !== \"\") {\n            obj.handlerSpecName = message.handlerSpecName;\n        }\n        return obj;\n    },\n    create (base) {\n        return PendingFailureHandler.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePendingFailureHandler();\n        message.failedThreadRun = object.failedThreadRun ?? 0;\n        message.handlerSpecName = object.handlerSpecName ?? \"\";\n        return message;\n    }\n};\nfunction createBasePendingInterruptHaltReason() {\n    return {\n        externalEventId: undefined\n    };\n}\nconst PendingInterruptHaltReason = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.externalEventId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.encode(message.externalEventId, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePendingInterruptHaltReason();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.externalEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            externalEventId: isSet(object.externalEventId) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromJSON(object.externalEventId) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.externalEventId !== undefined) {\n            obj.externalEventId = _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.toJSON(message.externalEventId);\n        }\n        return obj;\n    },\n    create (base) {\n        return PendingInterruptHaltReason.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePendingInterruptHaltReason();\n        message.externalEventId = object.externalEventId !== undefined && object.externalEventId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.ExternalEventId.fromPartial(object.externalEventId) : undefined;\n        return message;\n    }\n};\nfunction createBasePendingFailureHandlerHaltReason() {\n    return {\n        nodeRunPosition: 0\n    };\n}\nconst PendingFailureHandlerHaltReason = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.nodeRunPosition !== 0) {\n            writer.uint32(8).int32(message.nodeRunPosition);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePendingFailureHandlerHaltReason();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.nodeRunPosition = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            nodeRunPosition: isSet(object.nodeRunPosition) ? globalThis.Number(object.nodeRunPosition) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.nodeRunPosition !== 0) {\n            obj.nodeRunPosition = Math.round(message.nodeRunPosition);\n        }\n        return obj;\n    },\n    create (base) {\n        return PendingFailureHandlerHaltReason.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePendingFailureHandlerHaltReason();\n        message.nodeRunPosition = object.nodeRunPosition ?? 0;\n        return message;\n    }\n};\nfunction createBaseHandlingFailureHaltReason() {\n    return {\n        handlerThreadId: 0\n    };\n}\nconst HandlingFailureHaltReason = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.handlerThreadId !== 0) {\n            writer.uint32(8).int32(message.handlerThreadId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseHandlingFailureHaltReason();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.handlerThreadId = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            handlerThreadId: isSet(object.handlerThreadId) ? globalThis.Number(object.handlerThreadId) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.handlerThreadId !== 0) {\n            obj.handlerThreadId = Math.round(message.handlerThreadId);\n        }\n        return obj;\n    },\n    create (base) {\n        return HandlingFailureHaltReason.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseHandlingFailureHaltReason();\n        message.handlerThreadId = object.handlerThreadId ?? 0;\n        return message;\n    }\n};\nfunction createBaseParentHalted() {\n    return {\n        parentThreadId: 0\n    };\n}\nconst ParentHalted = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.parentThreadId !== 0) {\n            writer.uint32(8).int32(message.parentThreadId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParentHalted();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.parentThreadId = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            parentThreadId: isSet(object.parentThreadId) ? globalThis.Number(object.parentThreadId) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.parentThreadId !== 0) {\n            obj.parentThreadId = Math.round(message.parentThreadId);\n        }\n        return obj;\n    },\n    create (base) {\n        return ParentHalted.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseParentHalted();\n        message.parentThreadId = object.parentThreadId ?? 0;\n        return message;\n    }\n};\nfunction createBaseInterrupted() {\n    return {\n        interruptThreadId: 0\n    };\n}\nconst Interrupted = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.interruptThreadId !== 0) {\n            writer.uint32(8).int32(message.interruptThreadId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInterrupted();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.interruptThreadId = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            interruptThreadId: isSet(object.interruptThreadId) ? globalThis.Number(object.interruptThreadId) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.interruptThreadId !== 0) {\n            obj.interruptThreadId = Math.round(message.interruptThreadId);\n        }\n        return obj;\n    },\n    create (base) {\n        return Interrupted.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseInterrupted();\n        message.interruptThreadId = object.interruptThreadId ?? 0;\n        return message;\n    }\n};\nfunction createBaseManualHalt() {\n    return {\n        meaningOfLife: false\n    };\n}\nconst ManualHalt = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.meaningOfLife === true) {\n            writer.uint32(1096).bool(message.meaningOfLife);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseManualHalt();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 137:\n                    if (tag !== 1096) {\n                        break;\n                    }\n                    message.meaningOfLife = reader.bool();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            meaningOfLife: isSet(object.meaningOfLife) ? globalThis.Boolean(object.meaningOfLife) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.meaningOfLife === true) {\n            obj.meaningOfLife = message.meaningOfLife;\n        }\n        return obj;\n    },\n    create (base) {\n        return ManualHalt.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseManualHalt();\n        message.meaningOfLife = object.meaningOfLife ?? false;\n        return message;\n    }\n};\nfunction createBaseThreadHaltReason() {\n    return {\n        parentHalted: undefined,\n        interrupted: undefined,\n        pendingInterrupt: undefined,\n        pendingFailure: undefined,\n        handlingFailure: undefined,\n        manualHalt: undefined\n    };\n}\nconst ThreadHaltReason = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.parentHalted !== undefined) {\n            ParentHalted.encode(message.parentHalted, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.interrupted !== undefined) {\n            Interrupted.encode(message.interrupted, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.pendingInterrupt !== undefined) {\n            PendingInterruptHaltReason.encode(message.pendingInterrupt, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.pendingFailure !== undefined) {\n            PendingFailureHandlerHaltReason.encode(message.pendingFailure, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.handlingFailure !== undefined) {\n            HandlingFailureHaltReason.encode(message.handlingFailure, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.manualHalt !== undefined) {\n            ManualHalt.encode(message.manualHalt, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadHaltReason();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.parentHalted = ParentHalted.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.interrupted = Interrupted.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.pendingInterrupt = PendingInterruptHaltReason.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.pendingFailure = PendingFailureHandlerHaltReason.decode(reader, reader.uint32());\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.handlingFailure = HandlingFailureHaltReason.decode(reader, reader.uint32());\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.manualHalt = ManualHalt.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            parentHalted: isSet(object.parentHalted) ? ParentHalted.fromJSON(object.parentHalted) : undefined,\n            interrupted: isSet(object.interrupted) ? Interrupted.fromJSON(object.interrupted) : undefined,\n            pendingInterrupt: isSet(object.pendingInterrupt) ? PendingInterruptHaltReason.fromJSON(object.pendingInterrupt) : undefined,\n            pendingFailure: isSet(object.pendingFailure) ? PendingFailureHandlerHaltReason.fromJSON(object.pendingFailure) : undefined,\n            handlingFailure: isSet(object.handlingFailure) ? HandlingFailureHaltReason.fromJSON(object.handlingFailure) : undefined,\n            manualHalt: isSet(object.manualHalt) ? ManualHalt.fromJSON(object.manualHalt) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.parentHalted !== undefined) {\n            obj.parentHalted = ParentHalted.toJSON(message.parentHalted);\n        }\n        if (message.interrupted !== undefined) {\n            obj.interrupted = Interrupted.toJSON(message.interrupted);\n        }\n        if (message.pendingInterrupt !== undefined) {\n            obj.pendingInterrupt = PendingInterruptHaltReason.toJSON(message.pendingInterrupt);\n        }\n        if (message.pendingFailure !== undefined) {\n            obj.pendingFailure = PendingFailureHandlerHaltReason.toJSON(message.pendingFailure);\n        }\n        if (message.handlingFailure !== undefined) {\n            obj.handlingFailure = HandlingFailureHaltReason.toJSON(message.handlingFailure);\n        }\n        if (message.manualHalt !== undefined) {\n            obj.manualHalt = ManualHalt.toJSON(message.manualHalt);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadHaltReason.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadHaltReason();\n        message.parentHalted = object.parentHalted !== undefined && object.parentHalted !== null ? ParentHalted.fromPartial(object.parentHalted) : undefined;\n        message.interrupted = object.interrupted !== undefined && object.interrupted !== null ? Interrupted.fromPartial(object.interrupted) : undefined;\n        message.pendingInterrupt = object.pendingInterrupt !== undefined && object.pendingInterrupt !== null ? PendingInterruptHaltReason.fromPartial(object.pendingInterrupt) : undefined;\n        message.pendingFailure = object.pendingFailure !== undefined && object.pendingFailure !== null ? PendingFailureHandlerHaltReason.fromPartial(object.pendingFailure) : undefined;\n        message.handlingFailure = object.handlingFailure !== undefined && object.handlingFailure !== null ? HandlingFailureHaltReason.fromPartial(object.handlingFailure) : undefined;\n        message.manualHalt = object.manualHalt !== undefined && object.manualHalt !== null ? ManualHalt.fromPartial(object.manualHalt) : undefined;\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/wf_run.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/wf_spec.ts":
/*!*******************************************!*\
  !*** ./littlehorse-public-api/wf_spec.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Edge: () => (/* binding */ Edge),\n/* harmony export */   EdgeCondition: () => (/* binding */ EdgeCondition),\n/* harmony export */   EntrypointNode: () => (/* binding */ EntrypointNode),\n/* harmony export */   ExitNode: () => (/* binding */ ExitNode),\n/* harmony export */   ExternalEventNode: () => (/* binding */ ExternalEventNode),\n/* harmony export */   FailureDef: () => (/* binding */ FailureDef),\n/* harmony export */   FailureHandlerDef: () => (/* binding */ FailureHandlerDef),\n/* harmony export */   FailureHandlerDef_LHFailureType: () => (/* binding */ FailureHandlerDef_LHFailureType),\n/* harmony export */   InterruptDef: () => (/* binding */ InterruptDef),\n/* harmony export */   JsonIndex: () => (/* binding */ JsonIndex),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodeMigration: () => (/* binding */ NodeMigration),\n/* harmony export */   NopNode: () => (/* binding */ NopNode),\n/* harmony export */   SearchableVariableDef: () => (/* binding */ SearchableVariableDef),\n/* harmony export */   SleepNode: () => (/* binding */ SleepNode),\n/* harmony export */   StartMultipleThreadsNode: () => (/* binding */ StartMultipleThreadsNode),\n/* harmony export */   StartMultipleThreadsNode_VariablesEntry: () => (/* binding */ StartMultipleThreadsNode_VariablesEntry),\n/* harmony export */   StartThreadNode: () => (/* binding */ StartThreadNode),\n/* harmony export */   StartThreadNode_VariablesEntry: () => (/* binding */ StartThreadNode_VariablesEntry),\n/* harmony export */   ThreadRetentionPolicy: () => (/* binding */ ThreadRetentionPolicy),\n/* harmony export */   ThreadSpec: () => (/* binding */ ThreadSpec),\n/* harmony export */   ThreadSpecMigration: () => (/* binding */ ThreadSpecMigration),\n/* harmony export */   ThreadSpecMigration_NodeMigrationsEntry: () => (/* binding */ ThreadSpecMigration_NodeMigrationsEntry),\n/* harmony export */   ThreadSpec_NodesEntry: () => (/* binding */ ThreadSpec_NodesEntry),\n/* harmony export */   ThreadVarDef: () => (/* binding */ ThreadVarDef),\n/* harmony export */   ThrowEventNode: () => (/* binding */ ThrowEventNode),\n/* harmony export */   UserTaskNode: () => (/* binding */ UserTaskNode),\n/* harmony export */   WaitForThreadsNode: () => (/* binding */ WaitForThreadsNode),\n/* harmony export */   WaitForThreadsNode_ThreadToWaitFor: () => (/* binding */ WaitForThreadsNode_ThreadToWaitFor),\n/* harmony export */   WaitForThreadsNode_ThreadsToWaitFor: () => (/* binding */ WaitForThreadsNode_ThreadsToWaitFor),\n/* harmony export */   WfRunVariableAccessLevel: () => (/* binding */ WfRunVariableAccessLevel),\n/* harmony export */   WfSpec: () => (/* binding */ WfSpec),\n/* harmony export */   WfSpecVersionMigration: () => (/* binding */ WfSpecVersionMigration),\n/* harmony export */   WfSpecVersionMigration_ThreadSpecMigrationsEntry: () => (/* binding */ WfSpecVersionMigration_ThreadSpecMigrationsEntry),\n/* harmony export */   WfSpec_ParentWfSpecReference: () => (/* binding */ WfSpec_ParentWfSpecReference),\n/* harmony export */   WfSpec_ThreadSpecsEntry: () => (/* binding */ WfSpec_ThreadSpecsEntry),\n/* harmony export */   WorkflowRetentionPolicy: () => (/* binding */ WorkflowRetentionPolicy),\n/* harmony export */   failureHandlerDef_LHFailureTypeFromJSON: () => (/* binding */ failureHandlerDef_LHFailureTypeFromJSON),\n/* harmony export */   failureHandlerDef_LHFailureTypeToJSON: () => (/* binding */ failureHandlerDef_LHFailureTypeToJSON),\n/* harmony export */   failureHandlerDef_LHFailureTypeToNumber: () => (/* binding */ failureHandlerDef_LHFailureTypeToNumber),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage),\n/* harmony export */   wfRunVariableAccessLevelFromJSON: () => (/* binding */ wfRunVariableAccessLevelFromJSON),\n/* harmony export */   wfRunVariableAccessLevelToJSON: () => (/* binding */ wfRunVariableAccessLevelToJSON),\n/* harmony export */   wfRunVariableAccessLevelToNumber: () => (/* binding */ wfRunVariableAccessLevelToNumber)\n/* harmony export */ });\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! long */ \"long\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _common_wfspec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common_wfspec */ \"(api)/./littlehorse-public-api/common_wfspec.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* eslint-disable */ \n\n\n\n\n\nconst protobufPackage = \"littlehorse\";\nvar WfRunVariableAccessLevel;\n(function(WfRunVariableAccessLevel) {\n    WfRunVariableAccessLevel[\"PUBLIC_VAR\"] = \"PUBLIC_VAR\";\n    WfRunVariableAccessLevel[\"PRIVATE_VAR\"] = \"PRIVATE_VAR\";\n    WfRunVariableAccessLevel[\"INHERITED_VAR\"] = \"INHERITED_VAR\";\n    WfRunVariableAccessLevel[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(WfRunVariableAccessLevel || (WfRunVariableAccessLevel = {}));\nfunction wfRunVariableAccessLevelFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"PUBLIC_VAR\":\n            return \"PUBLIC_VAR\";\n        case 1:\n        case \"PRIVATE_VAR\":\n            return \"PRIVATE_VAR\";\n        case 2:\n        case \"INHERITED_VAR\":\n            return \"INHERITED_VAR\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction wfRunVariableAccessLevelToJSON(object) {\n    switch(object){\n        case \"PUBLIC_VAR\":\n            return \"PUBLIC_VAR\";\n        case \"PRIVATE_VAR\":\n            return \"PRIVATE_VAR\";\n        case \"INHERITED_VAR\":\n            return \"INHERITED_VAR\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction wfRunVariableAccessLevelToNumber(object) {\n    switch(object){\n        case \"PUBLIC_VAR\":\n            return 0;\n        case \"PRIVATE_VAR\":\n            return 1;\n        case \"INHERITED_VAR\":\n            return 2;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nvar FailureHandlerDef_LHFailureType;\n(function(FailureHandlerDef_LHFailureType) {\n    FailureHandlerDef_LHFailureType[\"FAILURE_TYPE_ERROR\"] = \"FAILURE_TYPE_ERROR\";\n    FailureHandlerDef_LHFailureType[\"FAILURE_TYPE_EXCEPTION\"] = \"FAILURE_TYPE_EXCEPTION\";\n    FailureHandlerDef_LHFailureType[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(FailureHandlerDef_LHFailureType || (FailureHandlerDef_LHFailureType = {}));\nfunction failureHandlerDef_LHFailureTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"FAILURE_TYPE_ERROR\":\n            return \"FAILURE_TYPE_ERROR\";\n        case 1:\n        case \"FAILURE_TYPE_EXCEPTION\":\n            return \"FAILURE_TYPE_EXCEPTION\";\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction failureHandlerDef_LHFailureTypeToJSON(object) {\n    switch(object){\n        case \"FAILURE_TYPE_ERROR\":\n            return \"FAILURE_TYPE_ERROR\";\n        case \"FAILURE_TYPE_EXCEPTION\":\n            return \"FAILURE_TYPE_EXCEPTION\";\n        case \"UNRECOGNIZED\":\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction failureHandlerDef_LHFailureTypeToNumber(object) {\n    switch(object){\n        case \"FAILURE_TYPE_ERROR\":\n            return 0;\n        case \"FAILURE_TYPE_EXCEPTION\":\n            return 1;\n        case \"UNRECOGNIZED\":\n        default:\n            return -1;\n    }\n}\nfunction createBaseWfSpec() {\n    return {\n        id: undefined,\n        createdAt: undefined,\n        frozenVariables: [],\n        status: _common_enums__WEBPACK_IMPORTED_MODULE_2__.MetadataStatus.ACTIVE,\n        threadSpecs: {},\n        entrypointThreadName: \"\",\n        retentionPolicy: undefined,\n        migration: undefined,\n        parentWfSpec: undefined\n    };\n}\nconst WfSpec = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_5__.WfSpecId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_4__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.frozenVariables){\n            ThreadVarDef.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_2__.MetadataStatus.ACTIVE) {\n            writer.uint32(32).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.metadataStatusToNumber)(message.status));\n        }\n        Object.entries(message.threadSpecs).forEach(([key, value])=>{\n            WfSpec_ThreadSpecsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(42).fork()).ldelim();\n        });\n        if (message.entrypointThreadName !== \"\") {\n            writer.uint32(50).string(message.entrypointThreadName);\n        }\n        if (message.retentionPolicy !== undefined) {\n            WorkflowRetentionPolicy.encode(message.retentionPolicy, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.migration !== undefined) {\n            WfSpecVersionMigration.encode(message.migration, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.parentWfSpec !== undefined) {\n            WfSpec_ParentWfSpecReference.encode(message.parentWfSpec, writer.uint32(74).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpec();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_5__.WfSpecId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_4__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.frozenVariables.push(ThreadVarDef.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.metadataStatusFromJSON)(reader.int32());\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    const entry5 = WfSpec_ThreadSpecsEntry.decode(reader, reader.uint32());\n                    if (entry5.value !== undefined) {\n                        message.threadSpecs[entry5.key] = entry5.value;\n                    }\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.entrypointThreadName = reader.string();\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.retentionPolicy = WorkflowRetentionPolicy.decode(reader, reader.uint32());\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.migration = WfSpecVersionMigration.decode(reader, reader.uint32());\n                    continue;\n                case 9:\n                    if (tag !== 74) {\n                        break;\n                    }\n                    message.parentWfSpec = WfSpec_ParentWfSpecReference.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_5__.WfSpecId.fromJSON(object.id) : undefined,\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,\n            frozenVariables: globalThis.Array.isArray(object?.frozenVariables) ? object.frozenVariables.map((e)=>ThreadVarDef.fromJSON(e)) : [],\n            status: isSet(object.status) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.metadataStatusFromJSON)(object.status) : _common_enums__WEBPACK_IMPORTED_MODULE_2__.MetadataStatus.ACTIVE,\n            threadSpecs: isObject(object.threadSpecs) ? Object.entries(object.threadSpecs).reduce((acc, [key, value])=>{\n                acc[key] = ThreadSpec.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            entrypointThreadName: isSet(object.entrypointThreadName) ? globalThis.String(object.entrypointThreadName) : \"\",\n            retentionPolicy: isSet(object.retentionPolicy) ? WorkflowRetentionPolicy.fromJSON(object.retentionPolicy) : undefined,\n            migration: isSet(object.migration) ? WfSpecVersionMigration.fromJSON(object.migration) : undefined,\n            parentWfSpec: isSet(object.parentWfSpec) ? WfSpec_ParentWfSpecReference.fromJSON(object.parentWfSpec) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_5__.WfSpecId.toJSON(message.id);\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        if (message.frozenVariables?.length) {\n            obj.frozenVariables = message.frozenVariables.map((e)=>ThreadVarDef.toJSON(e));\n        }\n        if (message.status !== _common_enums__WEBPACK_IMPORTED_MODULE_2__.MetadataStatus.ACTIVE) {\n            obj.status = (0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.metadataStatusToJSON)(message.status);\n        }\n        if (message.threadSpecs) {\n            const entries = Object.entries(message.threadSpecs);\n            if (entries.length > 0) {\n                obj.threadSpecs = {};\n                entries.forEach(([k, v])=>{\n                    obj.threadSpecs[k] = ThreadSpec.toJSON(v);\n                });\n            }\n        }\n        if (message.entrypointThreadName !== \"\") {\n            obj.entrypointThreadName = message.entrypointThreadName;\n        }\n        if (message.retentionPolicy !== undefined) {\n            obj.retentionPolicy = WorkflowRetentionPolicy.toJSON(message.retentionPolicy);\n        }\n        if (message.migration !== undefined) {\n            obj.migration = WfSpecVersionMigration.toJSON(message.migration);\n        }\n        if (message.parentWfSpec !== undefined) {\n            obj.parentWfSpec = WfSpec_ParentWfSpecReference.toJSON(message.parentWfSpec);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpec.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpec();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_5__.WfSpecId.fromPartial(object.id) : undefined;\n        message.createdAt = object.createdAt ?? undefined;\n        message.frozenVariables = object.frozenVariables?.map((e)=>ThreadVarDef.fromPartial(e)) || [];\n        message.status = object.status ?? _common_enums__WEBPACK_IMPORTED_MODULE_2__.MetadataStatus.ACTIVE;\n        message.threadSpecs = Object.entries(object.threadSpecs ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = ThreadSpec.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.entrypointThreadName = object.entrypointThreadName ?? \"\";\n        message.retentionPolicy = object.retentionPolicy !== undefined && object.retentionPolicy !== null ? WorkflowRetentionPolicy.fromPartial(object.retentionPolicy) : undefined;\n        message.migration = object.migration !== undefined && object.migration !== null ? WfSpecVersionMigration.fromPartial(object.migration) : undefined;\n        message.parentWfSpec = object.parentWfSpec !== undefined && object.parentWfSpec !== null ? WfSpec_ParentWfSpecReference.fromPartial(object.parentWfSpec) : undefined;\n        return message;\n    }\n};\nfunction createBaseWfSpec_ThreadSpecsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst WfSpec_ThreadSpecsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            ThreadSpec.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpec_ThreadSpecsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = ThreadSpec.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? ThreadSpec.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = ThreadSpec.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpec_ThreadSpecsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpec_ThreadSpecsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? ThreadSpec.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseWfSpec_ParentWfSpecReference() {\n    return {\n        wfSpecName: \"\",\n        wfSpecMajorVersion: 0\n    };\n}\nconst WfSpec_ParentWfSpecReference = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.wfSpecName !== \"\") {\n            writer.uint32(10).string(message.wfSpecName);\n        }\n        if (message.wfSpecMajorVersion !== 0) {\n            writer.uint32(16).int32(message.wfSpecMajorVersion);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpec_ParentWfSpecReference();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.wfSpecName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.wfSpecMajorVersion = reader.int32();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            wfSpecName: isSet(object.wfSpecName) ? globalThis.String(object.wfSpecName) : \"\",\n            wfSpecMajorVersion: isSet(object.wfSpecMajorVersion) ? globalThis.Number(object.wfSpecMajorVersion) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.wfSpecName !== \"\") {\n            obj.wfSpecName = message.wfSpecName;\n        }\n        if (message.wfSpecMajorVersion !== 0) {\n            obj.wfSpecMajorVersion = Math.round(message.wfSpecMajorVersion);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpec_ParentWfSpecReference.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpec_ParentWfSpecReference();\n        message.wfSpecName = object.wfSpecName ?? \"\";\n        message.wfSpecMajorVersion = object.wfSpecMajorVersion ?? 0;\n        return message;\n    }\n};\nfunction createBaseWorkflowRetentionPolicy() {\n    return {\n        secondsAfterWfTermination: undefined\n    };\n}\nconst WorkflowRetentionPolicy = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.secondsAfterWfTermination !== undefined) {\n            writer.uint32(8).int64(message.secondsAfterWfTermination);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWorkflowRetentionPolicy();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.secondsAfterWfTermination = longToNumber(reader.int64());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            secondsAfterWfTermination: isSet(object.secondsAfterWfTermination) ? globalThis.Number(object.secondsAfterWfTermination) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.secondsAfterWfTermination !== undefined) {\n            obj.secondsAfterWfTermination = Math.round(message.secondsAfterWfTermination);\n        }\n        return obj;\n    },\n    create (base) {\n        return WorkflowRetentionPolicy.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWorkflowRetentionPolicy();\n        message.secondsAfterWfTermination = object.secondsAfterWfTermination ?? undefined;\n        return message;\n    }\n};\nfunction createBaseJsonIndex() {\n    return {\n        fieldPath: \"\",\n        fieldType: _common_enums__WEBPACK_IMPORTED_MODULE_2__.VariableType.JSON_OBJ\n    };\n}\nconst JsonIndex = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.fieldPath !== \"\") {\n            writer.uint32(10).string(message.fieldPath);\n        }\n        if (message.fieldType !== _common_enums__WEBPACK_IMPORTED_MODULE_2__.VariableType.JSON_OBJ) {\n            writer.uint32(16).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.variableTypeToNumber)(message.fieldType));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseJsonIndex();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.fieldPath = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.fieldType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.variableTypeFromJSON)(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            fieldPath: isSet(object.fieldPath) ? globalThis.String(object.fieldPath) : \"\",\n            fieldType: isSet(object.fieldType) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.variableTypeFromJSON)(object.fieldType) : _common_enums__WEBPACK_IMPORTED_MODULE_2__.VariableType.JSON_OBJ\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.fieldPath !== \"\") {\n            obj.fieldPath = message.fieldPath;\n        }\n        if (message.fieldType !== _common_enums__WEBPACK_IMPORTED_MODULE_2__.VariableType.JSON_OBJ) {\n            obj.fieldType = (0,_common_enums__WEBPACK_IMPORTED_MODULE_2__.variableTypeToJSON)(message.fieldType);\n        }\n        return obj;\n    },\n    create (base) {\n        return JsonIndex.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseJsonIndex();\n        message.fieldPath = object.fieldPath ?? \"\";\n        message.fieldType = object.fieldType ?? _common_enums__WEBPACK_IMPORTED_MODULE_2__.VariableType.JSON_OBJ;\n        return message;\n    }\n};\nfunction createBaseSearchableVariableDef() {\n    return {\n        varDef: undefined\n    };\n}\nconst SearchableVariableDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.varDef !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.encode(message.varDef, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSearchableVariableDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.varDef = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            varDef: isSet(object.varDef) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.fromJSON(object.varDef) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.varDef !== undefined) {\n            obj.varDef = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.toJSON(message.varDef);\n        }\n        return obj;\n    },\n    create (base) {\n        return SearchableVariableDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSearchableVariableDef();\n        message.varDef = object.varDef !== undefined && object.varDef !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.fromPartial(object.varDef) : undefined;\n        return message;\n    }\n};\nfunction createBaseThreadVarDef() {\n    return {\n        varDef: undefined,\n        required: false,\n        searchable: false,\n        jsonIndexes: [],\n        accessLevel: \"PUBLIC_VAR\"\n    };\n}\nconst ThreadVarDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.varDef !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.encode(message.varDef, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.required === true) {\n            writer.uint32(16).bool(message.required);\n        }\n        if (message.searchable === true) {\n            writer.uint32(24).bool(message.searchable);\n        }\n        for (const v of message.jsonIndexes){\n            JsonIndex.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.accessLevel !== \"PUBLIC_VAR\") {\n            writer.uint32(40).int32(wfRunVariableAccessLevelToNumber(message.accessLevel));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadVarDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.varDef = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.required = reader.bool();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.searchable = reader.bool();\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.jsonIndexes.push(JsonIndex.decode(reader, reader.uint32()));\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.accessLevel = wfRunVariableAccessLevelFromJSON(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            varDef: isSet(object.varDef) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.fromJSON(object.varDef) : undefined,\n            required: isSet(object.required) ? globalThis.Boolean(object.required) : false,\n            searchable: isSet(object.searchable) ? globalThis.Boolean(object.searchable) : false,\n            jsonIndexes: globalThis.Array.isArray(object?.jsonIndexes) ? object.jsonIndexes.map((e)=>JsonIndex.fromJSON(e)) : [],\n            accessLevel: isSet(object.accessLevel) ? wfRunVariableAccessLevelFromJSON(object.accessLevel) : \"PUBLIC_VAR\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.varDef !== undefined) {\n            obj.varDef = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.toJSON(message.varDef);\n        }\n        if (message.required === true) {\n            obj.required = message.required;\n        }\n        if (message.searchable === true) {\n            obj.searchable = message.searchable;\n        }\n        if (message.jsonIndexes?.length) {\n            obj.jsonIndexes = message.jsonIndexes.map((e)=>JsonIndex.toJSON(e));\n        }\n        if (message.accessLevel !== \"PUBLIC_VAR\") {\n            obj.accessLevel = wfRunVariableAccessLevelToJSON(message.accessLevel);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadVarDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadVarDef();\n        message.varDef = object.varDef !== undefined && object.varDef !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableDef.fromPartial(object.varDef) : undefined;\n        message.required = object.required ?? false;\n        message.searchable = object.searchable ?? false;\n        message.jsonIndexes = object.jsonIndexes?.map((e)=>JsonIndex.fromPartial(e)) || [];\n        message.accessLevel = object.accessLevel ?? \"PUBLIC_VAR\";\n        return message;\n    }\n};\nfunction createBaseThreadSpec() {\n    return {\n        nodes: {},\n        variableDefs: [],\n        interruptDefs: [],\n        retentionPolicy: undefined\n    };\n}\nconst ThreadSpec = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        Object.entries(message.nodes).forEach(([key, value])=>{\n            ThreadSpec_NodesEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(10).fork()).ldelim();\n        });\n        for (const v of message.variableDefs){\n            ThreadVarDef.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.interruptDefs){\n            InterruptDef.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.retentionPolicy !== undefined) {\n            ThreadRetentionPolicy.encode(message.retentionPolicy, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadSpec();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    const entry1 = ThreadSpec_NodesEntry.decode(reader, reader.uint32());\n                    if (entry1.value !== undefined) {\n                        message.nodes[entry1.key] = entry1.value;\n                    }\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.variableDefs.push(ThreadVarDef.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.interruptDefs.push(InterruptDef.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.retentionPolicy = ThreadRetentionPolicy.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            nodes: isObject(object.nodes) ? Object.entries(object.nodes).reduce((acc, [key, value])=>{\n                acc[key] = Node.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            variableDefs: globalThis.Array.isArray(object?.variableDefs) ? object.variableDefs.map((e)=>ThreadVarDef.fromJSON(e)) : [],\n            interruptDefs: globalThis.Array.isArray(object?.interruptDefs) ? object.interruptDefs.map((e)=>InterruptDef.fromJSON(e)) : [],\n            retentionPolicy: isSet(object.retentionPolicy) ? ThreadRetentionPolicy.fromJSON(object.retentionPolicy) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.nodes) {\n            const entries = Object.entries(message.nodes);\n            if (entries.length > 0) {\n                obj.nodes = {};\n                entries.forEach(([k, v])=>{\n                    obj.nodes[k] = Node.toJSON(v);\n                });\n            }\n        }\n        if (message.variableDefs?.length) {\n            obj.variableDefs = message.variableDefs.map((e)=>ThreadVarDef.toJSON(e));\n        }\n        if (message.interruptDefs?.length) {\n            obj.interruptDefs = message.interruptDefs.map((e)=>InterruptDef.toJSON(e));\n        }\n        if (message.retentionPolicy !== undefined) {\n            obj.retentionPolicy = ThreadRetentionPolicy.toJSON(message.retentionPolicy);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadSpec.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadSpec();\n        message.nodes = Object.entries(object.nodes ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = Node.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.variableDefs = object.variableDefs?.map((e)=>ThreadVarDef.fromPartial(e)) || [];\n        message.interruptDefs = object.interruptDefs?.map((e)=>InterruptDef.fromPartial(e)) || [];\n        message.retentionPolicy = object.retentionPolicy !== undefined && object.retentionPolicy !== null ? ThreadRetentionPolicy.fromPartial(object.retentionPolicy) : undefined;\n        return message;\n    }\n};\nfunction createBaseThreadSpec_NodesEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst ThreadSpec_NodesEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            Node.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadSpec_NodesEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = Node.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? Node.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = Node.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadSpec_NodesEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadSpec_NodesEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? Node.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseThreadRetentionPolicy() {\n    return {\n        secondsAfterThreadTermination: undefined\n    };\n}\nconst ThreadRetentionPolicy = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.secondsAfterThreadTermination !== undefined) {\n            writer.uint32(8).int64(message.secondsAfterThreadTermination);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadRetentionPolicy();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.secondsAfterThreadTermination = longToNumber(reader.int64());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            secondsAfterThreadTermination: isSet(object.secondsAfterThreadTermination) ? globalThis.Number(object.secondsAfterThreadTermination) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.secondsAfterThreadTermination !== undefined) {\n            obj.secondsAfterThreadTermination = Math.round(message.secondsAfterThreadTermination);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadRetentionPolicy.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadRetentionPolicy();\n        message.secondsAfterThreadTermination = object.secondsAfterThreadTermination ?? undefined;\n        return message;\n    }\n};\nfunction createBaseInterruptDef() {\n    return {\n        externalEventDefId: undefined,\n        handlerSpecName: \"\"\n    };\n}\nconst InterruptDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.externalEventDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.encode(message.externalEventDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.handlerSpecName !== \"\") {\n            writer.uint32(18).string(message.handlerSpecName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInterruptDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.handlerSpecName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            externalEventDefId: isSet(object.externalEventDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.fromJSON(object.externalEventDefId) : undefined,\n            handlerSpecName: isSet(object.handlerSpecName) ? globalThis.String(object.handlerSpecName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.externalEventDefId !== undefined) {\n            obj.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.toJSON(message.externalEventDefId);\n        }\n        if (message.handlerSpecName !== \"\") {\n            obj.handlerSpecName = message.handlerSpecName;\n        }\n        return obj;\n    },\n    create (base) {\n        return InterruptDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseInterruptDef();\n        message.externalEventDefId = object.externalEventDefId !== undefined && object.externalEventDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.fromPartial(object.externalEventDefId) : undefined;\n        message.handlerSpecName = object.handlerSpecName ?? \"\";\n        return message;\n    }\n};\nfunction createBaseStartThreadNode() {\n    return {\n        threadSpecName: \"\",\n        variables: {}\n    };\n}\nconst StartThreadNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.threadSpecName !== \"\") {\n            writer.uint32(10).string(message.threadSpecName);\n        }\n        Object.entries(message.variables).forEach(([key, value])=>{\n            StartThreadNode_VariablesEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(18).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStartThreadNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threadSpecName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    const entry2 = StartThreadNode_VariablesEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.variables[entry2.key] = entry2.value;\n                    }\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threadSpecName: isSet(object.threadSpecName) ? globalThis.String(object.threadSpecName) : \"\",\n            variables: isObject(object.variables) ? Object.entries(object.variables).reduce((acc, [key, value])=>{\n                acc[key] = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(value);\n                return acc;\n            }, {}) : {}\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threadSpecName !== \"\") {\n            obj.threadSpecName = message.threadSpecName;\n        }\n        if (message.variables) {\n            const entries = Object.entries(message.variables);\n            if (entries.length > 0) {\n                obj.variables = {};\n                entries.forEach(([k, v])=>{\n                    obj.variables[k] = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(v);\n                });\n            }\n        }\n        return obj;\n    },\n    create (base) {\n        return StartThreadNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseStartThreadNode();\n        message.threadSpecName = object.threadSpecName ?? \"\";\n        message.variables = Object.entries(object.variables ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    }\n};\nfunction createBaseStartThreadNode_VariablesEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst StartThreadNode_VariablesEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStartThreadNode_VariablesEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return StartThreadNode_VariablesEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseStartThreadNode_VariablesEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseStartMultipleThreadsNode() {\n    return {\n        threadSpecName: \"\",\n        variables: {},\n        iterable: undefined\n    };\n}\nconst StartMultipleThreadsNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.threadSpecName !== \"\") {\n            writer.uint32(10).string(message.threadSpecName);\n        }\n        Object.entries(message.variables).forEach(([key, value])=>{\n            StartMultipleThreadsNode_VariablesEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(18).fork()).ldelim();\n        });\n        if (message.iterable !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.iterable, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStartMultipleThreadsNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threadSpecName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    const entry2 = StartMultipleThreadsNode_VariablesEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.variables[entry2.key] = entry2.value;\n                    }\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.iterable = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threadSpecName: isSet(object.threadSpecName) ? globalThis.String(object.threadSpecName) : \"\",\n            variables: isObject(object.variables) ? Object.entries(object.variables).reduce((acc, [key, value])=>{\n                acc[key] = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(value);\n                return acc;\n            }, {}) : {},\n            iterable: isSet(object.iterable) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.iterable) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threadSpecName !== \"\") {\n            obj.threadSpecName = message.threadSpecName;\n        }\n        if (message.variables) {\n            const entries = Object.entries(message.variables);\n            if (entries.length > 0) {\n                obj.variables = {};\n                entries.forEach(([k, v])=>{\n                    obj.variables[k] = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(v);\n                });\n            }\n        }\n        if (message.iterable !== undefined) {\n            obj.iterable = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.iterable);\n        }\n        return obj;\n    },\n    create (base) {\n        return StartMultipleThreadsNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseStartMultipleThreadsNode();\n        message.threadSpecName = object.threadSpecName ?? \"\";\n        message.variables = Object.entries(object.variables ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        message.iterable = object.iterable !== undefined && object.iterable !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.iterable) : undefined;\n        return message;\n    }\n};\nfunction createBaseStartMultipleThreadsNode_VariablesEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst StartMultipleThreadsNode_VariablesEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStartMultipleThreadsNode_VariablesEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return StartMultipleThreadsNode_VariablesEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseStartMultipleThreadsNode_VariablesEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseFailureHandlerDef() {\n    return {\n        handlerSpecName: \"\",\n        specificFailure: undefined,\n        anyFailureOfType: undefined\n    };\n}\nconst FailureHandlerDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.handlerSpecName !== \"\") {\n            writer.uint32(18).string(message.handlerSpecName);\n        }\n        if (message.specificFailure !== undefined) {\n            writer.uint32(10).string(message.specificFailure);\n        }\n        if (message.anyFailureOfType !== undefined) {\n            writer.uint32(24).int32(failureHandlerDef_LHFailureTypeToNumber(message.anyFailureOfType));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFailureHandlerDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.handlerSpecName = reader.string();\n                    continue;\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.specificFailure = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.anyFailureOfType = failureHandlerDef_LHFailureTypeFromJSON(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            handlerSpecName: isSet(object.handlerSpecName) ? globalThis.String(object.handlerSpecName) : \"\",\n            specificFailure: isSet(object.specificFailure) ? globalThis.String(object.specificFailure) : undefined,\n            anyFailureOfType: isSet(object.anyFailureOfType) ? failureHandlerDef_LHFailureTypeFromJSON(object.anyFailureOfType) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.handlerSpecName !== \"\") {\n            obj.handlerSpecName = message.handlerSpecName;\n        }\n        if (message.specificFailure !== undefined) {\n            obj.specificFailure = message.specificFailure;\n        }\n        if (message.anyFailureOfType !== undefined) {\n            obj.anyFailureOfType = failureHandlerDef_LHFailureTypeToJSON(message.anyFailureOfType);\n        }\n        return obj;\n    },\n    create (base) {\n        return FailureHandlerDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseFailureHandlerDef();\n        message.handlerSpecName = object.handlerSpecName ?? \"\";\n        message.specificFailure = object.specificFailure ?? undefined;\n        message.anyFailureOfType = object.anyFailureOfType ?? undefined;\n        return message;\n    }\n};\nfunction createBaseWaitForThreadsNode() {\n    return {\n        threads: undefined,\n        threadList: undefined,\n        perThreadFailureHandlers: []\n    };\n}\nconst WaitForThreadsNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.threads !== undefined) {\n            WaitForThreadsNode_ThreadsToWaitFor.encode(message.threads, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.threadList !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.threadList, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.perThreadFailureHandlers){\n            FailureHandlerDef.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWaitForThreadsNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threads = WaitForThreadsNode_ThreadsToWaitFor.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.threadList = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.perThreadFailureHandlers.push(FailureHandlerDef.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threads: isSet(object.threads) ? WaitForThreadsNode_ThreadsToWaitFor.fromJSON(object.threads) : undefined,\n            threadList: isSet(object.threadList) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.threadList) : undefined,\n            perThreadFailureHandlers: globalThis.Array.isArray(object?.perThreadFailureHandlers) ? object.perThreadFailureHandlers.map((e)=>FailureHandlerDef.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threads !== undefined) {\n            obj.threads = WaitForThreadsNode_ThreadsToWaitFor.toJSON(message.threads);\n        }\n        if (message.threadList !== undefined) {\n            obj.threadList = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.threadList);\n        }\n        if (message.perThreadFailureHandlers?.length) {\n            obj.perThreadFailureHandlers = message.perThreadFailureHandlers.map((e)=>FailureHandlerDef.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return WaitForThreadsNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWaitForThreadsNode();\n        message.threads = object.threads !== undefined && object.threads !== null ? WaitForThreadsNode_ThreadsToWaitFor.fromPartial(object.threads) : undefined;\n        message.threadList = object.threadList !== undefined && object.threadList !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.threadList) : undefined;\n        message.perThreadFailureHandlers = object.perThreadFailureHandlers?.map((e)=>FailureHandlerDef.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseWaitForThreadsNode_ThreadToWaitFor() {\n    return {\n        threadRunNumber: undefined\n    };\n}\nconst WaitForThreadsNode_ThreadToWaitFor = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.threadRunNumber !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.threadRunNumber, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWaitForThreadsNode_ThreadToWaitFor();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threadRunNumber = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threadRunNumber: isSet(object.threadRunNumber) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.threadRunNumber) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threadRunNumber !== undefined) {\n            obj.threadRunNumber = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.threadRunNumber);\n        }\n        return obj;\n    },\n    create (base) {\n        return WaitForThreadsNode_ThreadToWaitFor.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWaitForThreadsNode_ThreadToWaitFor();\n        message.threadRunNumber = object.threadRunNumber !== undefined && object.threadRunNumber !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.threadRunNumber) : undefined;\n        return message;\n    }\n};\nfunction createBaseWaitForThreadsNode_ThreadsToWaitFor() {\n    return {\n        threads: []\n    };\n}\nconst WaitForThreadsNode_ThreadsToWaitFor = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.threads){\n            WaitForThreadsNode_ThreadToWaitFor.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWaitForThreadsNode_ThreadsToWaitFor();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.threads.push(WaitForThreadsNode_ThreadToWaitFor.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            threads: globalThis.Array.isArray(object?.threads) ? object.threads.map((e)=>WaitForThreadsNode_ThreadToWaitFor.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.threads?.length) {\n            obj.threads = message.threads.map((e)=>WaitForThreadsNode_ThreadToWaitFor.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return WaitForThreadsNode_ThreadsToWaitFor.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWaitForThreadsNode_ThreadsToWaitFor();\n        message.threads = object.threads?.map((e)=>WaitForThreadsNode_ThreadToWaitFor.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseExternalEventNode() {\n    return {\n        externalEventDefId: undefined,\n        timeoutSeconds: undefined\n    };\n}\nconst ExternalEventNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.externalEventDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.encode(message.externalEventDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.timeoutSeconds !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.timeoutSeconds, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExternalEventNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.timeoutSeconds = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            externalEventDefId: isSet(object.externalEventDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.fromJSON(object.externalEventDefId) : undefined,\n            timeoutSeconds: isSet(object.timeoutSeconds) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.timeoutSeconds) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.externalEventDefId !== undefined) {\n            obj.externalEventDefId = _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.toJSON(message.externalEventDefId);\n        }\n        if (message.timeoutSeconds !== undefined) {\n            obj.timeoutSeconds = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.timeoutSeconds);\n        }\n        return obj;\n    },\n    create (base) {\n        return ExternalEventNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExternalEventNode();\n        message.externalEventDefId = object.externalEventDefId !== undefined && object.externalEventDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_5__.ExternalEventDefId.fromPartial(object.externalEventDefId) : undefined;\n        message.timeoutSeconds = object.timeoutSeconds !== undefined && object.timeoutSeconds !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.timeoutSeconds) : undefined;\n        return message;\n    }\n};\nfunction createBaseEntrypointNode() {\n    return {};\n}\nconst EntrypointNode = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEntrypointNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    create (base) {\n        return EntrypointNode.fromPartial(base ?? {});\n    },\n    fromPartial (_) {\n        const message = createBaseEntrypointNode();\n        return message;\n    }\n};\nfunction createBaseExitNode() {\n    return {\n        failureDef: undefined\n    };\n}\nconst ExitNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.failureDef !== undefined) {\n            FailureDef.encode(message.failureDef, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExitNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.failureDef = FailureDef.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            failureDef: isSet(object.failureDef) ? FailureDef.fromJSON(object.failureDef) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.failureDef !== undefined) {\n            obj.failureDef = FailureDef.toJSON(message.failureDef);\n        }\n        return obj;\n    },\n    create (base) {\n        return ExitNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseExitNode();\n        message.failureDef = object.failureDef !== undefined && object.failureDef !== null ? FailureDef.fromPartial(object.failureDef) : undefined;\n        return message;\n    }\n};\nfunction createBaseFailureDef() {\n    return {\n        failureName: \"\",\n        message: \"\",\n        content: undefined\n    };\n}\nconst FailureDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.failureName !== \"\") {\n            writer.uint32(10).string(message.failureName);\n        }\n        if (message.message !== \"\") {\n            writer.uint32(18).string(message.message);\n        }\n        if (message.content !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.content, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFailureDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.failureName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.message = reader.string();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.content = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            failureName: isSet(object.failureName) ? globalThis.String(object.failureName) : \"\",\n            message: isSet(object.message) ? globalThis.String(object.message) : \"\",\n            content: isSet(object.content) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.content) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.failureName !== \"\") {\n            obj.failureName = message.failureName;\n        }\n        if (message.message !== \"\") {\n            obj.message = message.message;\n        }\n        if (message.content !== undefined) {\n            obj.content = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.content);\n        }\n        return obj;\n    },\n    create (base) {\n        return FailureDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseFailureDef();\n        message.failureName = object.failureName ?? \"\";\n        message.message = object.message ?? \"\";\n        message.content = object.content !== undefined && object.content !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.content) : undefined;\n        return message;\n    }\n};\nfunction createBaseNode() {\n    return {\n        outgoingEdges: [],\n        failureHandlers: [],\n        entrypoint: undefined,\n        exit: undefined,\n        task: undefined,\n        externalEvent: undefined,\n        startThread: undefined,\n        waitForThreads: undefined,\n        nop: undefined,\n        sleep: undefined,\n        userTask: undefined,\n        startMultipleThreads: undefined,\n        throwEvent: undefined\n    };\n}\nconst Node = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.outgoingEdges){\n            Edge.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.failureHandlers){\n            FailureHandlerDef.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.entrypoint !== undefined) {\n            EntrypointNode.encode(message.entrypoint, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.exit !== undefined) {\n            ExitNode.encode(message.exit, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.task !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.TaskNode.encode(message.task, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.externalEvent !== undefined) {\n            ExternalEventNode.encode(message.externalEvent, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.startThread !== undefined) {\n            StartThreadNode.encode(message.startThread, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.waitForThreads !== undefined) {\n            WaitForThreadsNode.encode(message.waitForThreads, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.nop !== undefined) {\n            NopNode.encode(message.nop, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.sleep !== undefined) {\n            SleepNode.encode(message.sleep, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.userTask !== undefined) {\n            UserTaskNode.encode(message.userTask, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.startMultipleThreads !== undefined) {\n            StartMultipleThreadsNode.encode(message.startMultipleThreads, writer.uint32(122).fork()).ldelim();\n        }\n        if (message.throwEvent !== undefined) {\n            ThrowEventNode.encode(message.throwEvent, writer.uint32(130).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.outgoingEdges.push(Edge.decode(reader, reader.uint32()));\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.failureHandlers.push(FailureHandlerDef.decode(reader, reader.uint32()));\n                    continue;\n                case 5:\n                    if (tag !== 42) {\n                        break;\n                    }\n                    message.entrypoint = EntrypointNode.decode(reader, reader.uint32());\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.exit = ExitNode.decode(reader, reader.uint32());\n                    continue;\n                case 7:\n                    if (tag !== 58) {\n                        break;\n                    }\n                    message.task = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.TaskNode.decode(reader, reader.uint32());\n                    continue;\n                case 8:\n                    if (tag !== 66) {\n                        break;\n                    }\n                    message.externalEvent = ExternalEventNode.decode(reader, reader.uint32());\n                    continue;\n                case 9:\n                    if (tag !== 74) {\n                        break;\n                    }\n                    message.startThread = StartThreadNode.decode(reader, reader.uint32());\n                    continue;\n                case 10:\n                    if (tag !== 82) {\n                        break;\n                    }\n                    message.waitForThreads = WaitForThreadsNode.decode(reader, reader.uint32());\n                    continue;\n                case 11:\n                    if (tag !== 90) {\n                        break;\n                    }\n                    message.nop = NopNode.decode(reader, reader.uint32());\n                    continue;\n                case 12:\n                    if (tag !== 98) {\n                        break;\n                    }\n                    message.sleep = SleepNode.decode(reader, reader.uint32());\n                    continue;\n                case 13:\n                    if (tag !== 106) {\n                        break;\n                    }\n                    message.userTask = UserTaskNode.decode(reader, reader.uint32());\n                    continue;\n                case 15:\n                    if (tag !== 122) {\n                        break;\n                    }\n                    message.startMultipleThreads = StartMultipleThreadsNode.decode(reader, reader.uint32());\n                    continue;\n                case 16:\n                    if (tag !== 130) {\n                        break;\n                    }\n                    message.throwEvent = ThrowEventNode.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            outgoingEdges: globalThis.Array.isArray(object?.outgoingEdges) ? object.outgoingEdges.map((e)=>Edge.fromJSON(e)) : [],\n            failureHandlers: globalThis.Array.isArray(object?.failureHandlers) ? object.failureHandlers.map((e)=>FailureHandlerDef.fromJSON(e)) : [],\n            entrypoint: isSet(object.entrypoint) ? EntrypointNode.fromJSON(object.entrypoint) : undefined,\n            exit: isSet(object.exit) ? ExitNode.fromJSON(object.exit) : undefined,\n            task: isSet(object.task) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.TaskNode.fromJSON(object.task) : undefined,\n            externalEvent: isSet(object.externalEvent) ? ExternalEventNode.fromJSON(object.externalEvent) : undefined,\n            startThread: isSet(object.startThread) ? StartThreadNode.fromJSON(object.startThread) : undefined,\n            waitForThreads: isSet(object.waitForThreads) ? WaitForThreadsNode.fromJSON(object.waitForThreads) : undefined,\n            nop: isSet(object.nop) ? NopNode.fromJSON(object.nop) : undefined,\n            sleep: isSet(object.sleep) ? SleepNode.fromJSON(object.sleep) : undefined,\n            userTask: isSet(object.userTask) ? UserTaskNode.fromJSON(object.userTask) : undefined,\n            startMultipleThreads: isSet(object.startMultipleThreads) ? StartMultipleThreadsNode.fromJSON(object.startMultipleThreads) : undefined,\n            throwEvent: isSet(object.throwEvent) ? ThrowEventNode.fromJSON(object.throwEvent) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.outgoingEdges?.length) {\n            obj.outgoingEdges = message.outgoingEdges.map((e)=>Edge.toJSON(e));\n        }\n        if (message.failureHandlers?.length) {\n            obj.failureHandlers = message.failureHandlers.map((e)=>FailureHandlerDef.toJSON(e));\n        }\n        if (message.entrypoint !== undefined) {\n            obj.entrypoint = EntrypointNode.toJSON(message.entrypoint);\n        }\n        if (message.exit !== undefined) {\n            obj.exit = ExitNode.toJSON(message.exit);\n        }\n        if (message.task !== undefined) {\n            obj.task = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.TaskNode.toJSON(message.task);\n        }\n        if (message.externalEvent !== undefined) {\n            obj.externalEvent = ExternalEventNode.toJSON(message.externalEvent);\n        }\n        if (message.startThread !== undefined) {\n            obj.startThread = StartThreadNode.toJSON(message.startThread);\n        }\n        if (message.waitForThreads !== undefined) {\n            obj.waitForThreads = WaitForThreadsNode.toJSON(message.waitForThreads);\n        }\n        if (message.nop !== undefined) {\n            obj.nop = NopNode.toJSON(message.nop);\n        }\n        if (message.sleep !== undefined) {\n            obj.sleep = SleepNode.toJSON(message.sleep);\n        }\n        if (message.userTask !== undefined) {\n            obj.userTask = UserTaskNode.toJSON(message.userTask);\n        }\n        if (message.startMultipleThreads !== undefined) {\n            obj.startMultipleThreads = StartMultipleThreadsNode.toJSON(message.startMultipleThreads);\n        }\n        if (message.throwEvent !== undefined) {\n            obj.throwEvent = ThrowEventNode.toJSON(message.throwEvent);\n        }\n        return obj;\n    },\n    create (base) {\n        return Node.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseNode();\n        message.outgoingEdges = object.outgoingEdges?.map((e)=>Edge.fromPartial(e)) || [];\n        message.failureHandlers = object.failureHandlers?.map((e)=>FailureHandlerDef.fromPartial(e)) || [];\n        message.entrypoint = object.entrypoint !== undefined && object.entrypoint !== null ? EntrypointNode.fromPartial(object.entrypoint) : undefined;\n        message.exit = object.exit !== undefined && object.exit !== null ? ExitNode.fromPartial(object.exit) : undefined;\n        message.task = object.task !== undefined && object.task !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.TaskNode.fromPartial(object.task) : undefined;\n        message.externalEvent = object.externalEvent !== undefined && object.externalEvent !== null ? ExternalEventNode.fromPartial(object.externalEvent) : undefined;\n        message.startThread = object.startThread !== undefined && object.startThread !== null ? StartThreadNode.fromPartial(object.startThread) : undefined;\n        message.waitForThreads = object.waitForThreads !== undefined && object.waitForThreads !== null ? WaitForThreadsNode.fromPartial(object.waitForThreads) : undefined;\n        message.nop = object.nop !== undefined && object.nop !== null ? NopNode.fromPartial(object.nop) : undefined;\n        message.sleep = object.sleep !== undefined && object.sleep !== null ? SleepNode.fromPartial(object.sleep) : undefined;\n        message.userTask = object.userTask !== undefined && object.userTask !== null ? UserTaskNode.fromPartial(object.userTask) : undefined;\n        message.startMultipleThreads = object.startMultipleThreads !== undefined && object.startMultipleThreads !== null ? StartMultipleThreadsNode.fromPartial(object.startMultipleThreads) : undefined;\n        message.throwEvent = object.throwEvent !== undefined && object.throwEvent !== null ? ThrowEventNode.fromPartial(object.throwEvent) : undefined;\n        return message;\n    }\n};\nfunction createBaseThrowEventNode() {\n    return {\n        eventDefId: undefined,\n        content: undefined\n    };\n}\nconst ThrowEventNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.eventDefId !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_5__.WorkflowEventDefId.encode(message.eventDefId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.content !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.content, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThrowEventNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.eventDefId = _object_id__WEBPACK_IMPORTED_MODULE_5__.WorkflowEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.content = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            eventDefId: isSet(object.eventDefId) ? _object_id__WEBPACK_IMPORTED_MODULE_5__.WorkflowEventDefId.fromJSON(object.eventDefId) : undefined,\n            content: isSet(object.content) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.content) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.eventDefId !== undefined) {\n            obj.eventDefId = _object_id__WEBPACK_IMPORTED_MODULE_5__.WorkflowEventDefId.toJSON(message.eventDefId);\n        }\n        if (message.content !== undefined) {\n            obj.content = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.content);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThrowEventNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThrowEventNode();\n        message.eventDefId = object.eventDefId !== undefined && object.eventDefId !== null ? _object_id__WEBPACK_IMPORTED_MODULE_5__.WorkflowEventDefId.fromPartial(object.eventDefId) : undefined;\n        message.content = object.content !== undefined && object.content !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.content) : undefined;\n        return message;\n    }\n};\nfunction createBaseUserTaskNode() {\n    return {\n        userTaskDefName: \"\",\n        userGroup: undefined,\n        userId: undefined,\n        actions: [],\n        userTaskDefVersion: undefined,\n        notes: undefined\n    };\n}\nconst UserTaskNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.userTaskDefName !== \"\") {\n            writer.uint32(10).string(message.userTaskDefName);\n        }\n        if (message.userGroup !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.userGroup, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.userId !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.userId, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.actions){\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.UTActionTrigger.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.userTaskDefVersion !== undefined) {\n            writer.uint32(40).int32(message.userTaskDefVersion);\n        }\n        if (message.notes !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.notes, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserTaskNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.userTaskDefName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.userGroup = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.userId = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 4:\n                    if (tag !== 34) {\n                        break;\n                    }\n                    message.actions.push(_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.UTActionTrigger.decode(reader, reader.uint32()));\n                    continue;\n                case 5:\n                    if (tag !== 40) {\n                        break;\n                    }\n                    message.userTaskDefVersion = reader.int32();\n                    continue;\n                case 6:\n                    if (tag !== 50) {\n                        break;\n                    }\n                    message.notes = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            userTaskDefName: isSet(object.userTaskDefName) ? globalThis.String(object.userTaskDefName) : \"\",\n            userGroup: isSet(object.userGroup) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.userGroup) : undefined,\n            userId: isSet(object.userId) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.userId) : undefined,\n            actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.UTActionTrigger.fromJSON(e)) : [],\n            userTaskDefVersion: isSet(object.userTaskDefVersion) ? globalThis.Number(object.userTaskDefVersion) : undefined,\n            notes: isSet(object.notes) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.notes) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.userTaskDefName !== \"\") {\n            obj.userTaskDefName = message.userTaskDefName;\n        }\n        if (message.userGroup !== undefined) {\n            obj.userGroup = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.userGroup);\n        }\n        if (message.userId !== undefined) {\n            obj.userId = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.userId);\n        }\n        if (message.actions?.length) {\n            obj.actions = message.actions.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.UTActionTrigger.toJSON(e));\n        }\n        if (message.userTaskDefVersion !== undefined) {\n            obj.userTaskDefVersion = Math.round(message.userTaskDefVersion);\n        }\n        if (message.notes !== undefined) {\n            obj.notes = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.notes);\n        }\n        return obj;\n    },\n    create (base) {\n        return UserTaskNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseUserTaskNode();\n        message.userTaskDefName = object.userTaskDefName ?? \"\";\n        message.userGroup = object.userGroup !== undefined && object.userGroup !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.userGroup) : undefined;\n        message.userId = object.userId !== undefined && object.userId !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.userId) : undefined;\n        message.actions = object.actions?.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.UTActionTrigger.fromPartial(e)) || [];\n        message.userTaskDefVersion = object.userTaskDefVersion ?? undefined;\n        message.notes = object.notes !== undefined && object.notes !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.notes) : undefined;\n        return message;\n    }\n};\nfunction createBaseEdgeCondition() {\n    return {\n        comparator: _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.Comparator.LESS_THAN,\n        left: undefined,\n        right: undefined\n    };\n}\nconst EdgeCondition = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.comparator !== _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.Comparator.LESS_THAN) {\n            writer.uint32(8).int32((0,_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.comparatorToNumber)(message.comparator));\n        }\n        if (message.left !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.left, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.right !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.right, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEdgeCondition();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.comparator = (0,_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.comparatorFromJSON)(reader.int32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.left = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.right = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            comparator: isSet(object.comparator) ? (0,_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.comparatorFromJSON)(object.comparator) : _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.Comparator.LESS_THAN,\n            left: isSet(object.left) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.left) : undefined,\n            right: isSet(object.right) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.right) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.comparator !== _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.Comparator.LESS_THAN) {\n            obj.comparator = (0,_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.comparatorToJSON)(message.comparator);\n        }\n        if (message.left !== undefined) {\n            obj.left = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.left);\n        }\n        if (message.right !== undefined) {\n            obj.right = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.right);\n        }\n        return obj;\n    },\n    create (base) {\n        return EdgeCondition.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseEdgeCondition();\n        message.comparator = object.comparator ?? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.Comparator.LESS_THAN;\n        message.left = object.left !== undefined && object.left !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.left) : undefined;\n        message.right = object.right !== undefined && object.right !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.right) : undefined;\n        return message;\n    }\n};\nfunction createBaseEdge() {\n    return {\n        sinkNodeName: \"\",\n        condition: undefined,\n        variableMutations: []\n    };\n}\nconst Edge = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.sinkNodeName !== \"\") {\n            writer.uint32(10).string(message.sinkNodeName);\n        }\n        if (message.condition !== undefined) {\n            EdgeCondition.encode(message.condition, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.variableMutations){\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableMutation.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEdge();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.sinkNodeName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.condition = EdgeCondition.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.variableMutations.push(_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableMutation.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sinkNodeName: isSet(object.sinkNodeName) ? globalThis.String(object.sinkNodeName) : \"\",\n            condition: isSet(object.condition) ? EdgeCondition.fromJSON(object.condition) : undefined,\n            variableMutations: globalThis.Array.isArray(object?.variableMutations) ? object.variableMutations.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableMutation.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.sinkNodeName !== \"\") {\n            obj.sinkNodeName = message.sinkNodeName;\n        }\n        if (message.condition !== undefined) {\n            obj.condition = EdgeCondition.toJSON(message.condition);\n        }\n        if (message.variableMutations?.length) {\n            obj.variableMutations = message.variableMutations.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableMutation.toJSON(e));\n        }\n        return obj;\n    },\n    create (base) {\n        return Edge.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseEdge();\n        message.sinkNodeName = object.sinkNodeName ?? \"\";\n        message.condition = object.condition !== undefined && object.condition !== null ? EdgeCondition.fromPartial(object.condition) : undefined;\n        message.variableMutations = object.variableMutations?.map((e)=>_common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableMutation.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseNopNode() {\n    return {};\n}\nconst NopNode = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNopNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    create (base) {\n        return NopNode.fromPartial(base ?? {});\n    },\n    fromPartial (_) {\n        const message = createBaseNopNode();\n        return message;\n    }\n};\nfunction createBaseSleepNode() {\n    return {\n        rawSeconds: undefined,\n        timestamp: undefined,\n        isoDate: undefined\n    };\n}\nconst SleepNode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.rawSeconds !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.rawSeconds, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.timestamp !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.timestamp, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.isoDate !== undefined) {\n            _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.encode(message.isoDate, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSleepNode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.rawSeconds = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.timestamp = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.isoDate = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            rawSeconds: isSet(object.rawSeconds) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.rawSeconds) : undefined,\n            timestamp: isSet(object.timestamp) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.timestamp) : undefined,\n            isoDate: isSet(object.isoDate) ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromJSON(object.isoDate) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.rawSeconds !== undefined) {\n            obj.rawSeconds = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.rawSeconds);\n        }\n        if (message.timestamp !== undefined) {\n            obj.timestamp = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.timestamp);\n        }\n        if (message.isoDate !== undefined) {\n            obj.isoDate = _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.toJSON(message.isoDate);\n        }\n        return obj;\n    },\n    create (base) {\n        return SleepNode.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSleepNode();\n        message.rawSeconds = object.rawSeconds !== undefined && object.rawSeconds !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.rawSeconds) : undefined;\n        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.timestamp) : undefined;\n        message.isoDate = object.isoDate !== undefined && object.isoDate !== null ? _common_wfspec__WEBPACK_IMPORTED_MODULE_3__.VariableAssignment.fromPartial(object.isoDate) : undefined;\n        return message;\n    }\n};\nfunction createBaseWfSpecVersionMigration() {\n    return {\n        newMajorVersion: 0,\n        newRevision: 0,\n        threadSpecMigrations: {}\n    };\n}\nconst WfSpecVersionMigration = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.newMajorVersion !== 0) {\n            writer.uint32(8).int32(message.newMajorVersion);\n        }\n        if (message.newRevision !== 0) {\n            writer.uint32(16).int32(message.newRevision);\n        }\n        Object.entries(message.threadSpecMigrations).forEach(([key, value])=>{\n            WfSpecVersionMigration_ThreadSpecMigrationsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(26).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpecVersionMigration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.newMajorVersion = reader.int32();\n                    continue;\n                case 2:\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.newRevision = reader.int32();\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    const entry3 = WfSpecVersionMigration_ThreadSpecMigrationsEntry.decode(reader, reader.uint32());\n                    if (entry3.value !== undefined) {\n                        message.threadSpecMigrations[entry3.key] = entry3.value;\n                    }\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            newMajorVersion: isSet(object.newMajorVersion) ? globalThis.Number(object.newMajorVersion) : 0,\n            newRevision: isSet(object.newRevision) ? globalThis.Number(object.newRevision) : 0,\n            threadSpecMigrations: isObject(object.threadSpecMigrations) ? Object.entries(object.threadSpecMigrations).reduce((acc, [key, value])=>{\n                acc[key] = ThreadSpecMigration.fromJSON(value);\n                return acc;\n            }, {}) : {}\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.newMajorVersion !== 0) {\n            obj.newMajorVersion = Math.round(message.newMajorVersion);\n        }\n        if (message.newRevision !== 0) {\n            obj.newRevision = Math.round(message.newRevision);\n        }\n        if (message.threadSpecMigrations) {\n            const entries = Object.entries(message.threadSpecMigrations);\n            if (entries.length > 0) {\n                obj.threadSpecMigrations = {};\n                entries.forEach(([k, v])=>{\n                    obj.threadSpecMigrations[k] = ThreadSpecMigration.toJSON(v);\n                });\n            }\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpecVersionMigration.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpecVersionMigration();\n        message.newMajorVersion = object.newMajorVersion ?? 0;\n        message.newRevision = object.newRevision ?? 0;\n        message.threadSpecMigrations = Object.entries(object.threadSpecMigrations ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = ThreadSpecMigration.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    }\n};\nfunction createBaseWfSpecVersionMigration_ThreadSpecMigrationsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst WfSpecVersionMigration_ThreadSpecMigrationsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            ThreadSpecMigration.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWfSpecVersionMigration_ThreadSpecMigrationsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = ThreadSpecMigration.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? ThreadSpecMigration.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = ThreadSpecMigration.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return WfSpecVersionMigration_ThreadSpecMigrationsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWfSpecVersionMigration_ThreadSpecMigrationsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? ThreadSpecMigration.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseThreadSpecMigration() {\n    return {\n        newThreadSpecName: \"\",\n        nodeMigrations: {}\n    };\n}\nconst ThreadSpecMigration = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.newThreadSpecName !== \"\") {\n            writer.uint32(10).string(message.newThreadSpecName);\n        }\n        Object.entries(message.nodeMigrations).forEach(([key, value])=>{\n            ThreadSpecMigration_NodeMigrationsEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(18).fork()).ldelim();\n        });\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadSpecMigration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.newThreadSpecName = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    const entry2 = ThreadSpecMigration_NodeMigrationsEntry.decode(reader, reader.uint32());\n                    if (entry2.value !== undefined) {\n                        message.nodeMigrations[entry2.key] = entry2.value;\n                    }\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            newThreadSpecName: isSet(object.newThreadSpecName) ? globalThis.String(object.newThreadSpecName) : \"\",\n            nodeMigrations: isObject(object.nodeMigrations) ? Object.entries(object.nodeMigrations).reduce((acc, [key, value])=>{\n                acc[key] = NodeMigration.fromJSON(value);\n                return acc;\n            }, {}) : {}\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.newThreadSpecName !== \"\") {\n            obj.newThreadSpecName = message.newThreadSpecName;\n        }\n        if (message.nodeMigrations) {\n            const entries = Object.entries(message.nodeMigrations);\n            if (entries.length > 0) {\n                obj.nodeMigrations = {};\n                entries.forEach(([k, v])=>{\n                    obj.nodeMigrations[k] = NodeMigration.toJSON(v);\n                });\n            }\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadSpecMigration.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadSpecMigration();\n        message.newThreadSpecName = object.newThreadSpecName ?? \"\";\n        message.nodeMigrations = Object.entries(object.nodeMigrations ?? {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = NodeMigration.fromPartial(value);\n            }\n            return acc;\n        }, {});\n        return message;\n    }\n};\nfunction createBaseThreadSpecMigration_NodeMigrationsEntry() {\n    return {\n        key: \"\",\n        value: undefined\n    };\n}\nconst ThreadSpecMigration_NodeMigrationsEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== undefined) {\n            NodeMigration.encode(message.value, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseThreadSpecMigration_NodeMigrationsEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.key = reader.string();\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = NodeMigration.decode(reader, reader.uint32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? globalThis.String(object.key) : \"\",\n            value: isSet(object.value) ? NodeMigration.fromJSON(object.value) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.key !== \"\") {\n            obj.key = message.key;\n        }\n        if (message.value !== undefined) {\n            obj.value = NodeMigration.toJSON(message.value);\n        }\n        return obj;\n    },\n    create (base) {\n        return ThreadSpecMigration_NodeMigrationsEntry.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseThreadSpecMigration_NodeMigrationsEntry();\n        message.key = object.key ?? \"\";\n        message.value = object.value !== undefined && object.value !== null ? NodeMigration.fromPartial(object.value) : undefined;\n        return message;\n    }\n};\nfunction createBaseNodeMigration() {\n    return {\n        newNodeName: \"\"\n    };\n}\nconst NodeMigration = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.newNodeName !== \"\") {\n            writer.uint32(10).string(message.newNodeName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNodeMigration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.newNodeName = reader.string();\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            newNodeName: isSet(object.newNodeName) ? globalThis.String(object.newNodeName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.newNodeName !== \"\") {\n            obj.newNodeName = message.newNodeName;\n        }\n        return obj;\n    },\n    create (base) {\n        return NodeMigration.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseNodeMigration();\n        message.newNodeName = object.newNodeName ?? \"\";\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction longToNumber(long) {\n    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long !== (long__WEBPACK_IMPORTED_MODULE_0___default())) {\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.util.Long = (long__WEBPACK_IMPORTED_MODULE_0___default());\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/wf_spec.ts\n");

/***/ }),

/***/ "(api)/./littlehorse-public-api/workflow_event.ts":
/*!**************************************************!*\
  !*** ./littlehorse-public-api/workflow_event.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WorkflowEvent: () => (/* binding */ WorkflowEvent),\n/* harmony export */   WorkflowEventDef: () => (/* binding */ WorkflowEventDef),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _common_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common_enums */ \"(api)/./littlehorse-public-api/common_enums.ts\");\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(api)/./littlehorse-public-api/google/protobuf/timestamp.ts\");\n/* harmony import */ var _object_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object_id */ \"(api)/./littlehorse-public-api/object_id.ts\");\n/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./variable */ \"(api)/./littlehorse-public-api/variable.ts\");\n/* eslint-disable */ \n\n\n\n\nconst protobufPackage = \"littlehorse\";\nfunction createBaseWorkflowEvent() {\n    return {\n        id: undefined,\n        content: undefined,\n        createdAt: undefined\n    };\n}\nconst WorkflowEvent = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.content !== undefined) {\n            _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.encode(message.content, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWorkflowEvent();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.content = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.decode(reader, reader.uint32());\n                    continue;\n                case 3:\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.fromJSON(object.id) : undefined,\n            content: isSet(object.content) ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromJSON(object.content) : undefined,\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.toJSON(message.id);\n        }\n        if (message.content !== undefined) {\n            obj.content = _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.toJSON(message.content);\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        return obj;\n    },\n    create (base) {\n        return WorkflowEvent.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWorkflowEvent();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventId.fromPartial(object.id) : undefined;\n        message.content = object.content !== undefined && object.content !== null ? _variable__WEBPACK_IMPORTED_MODULE_4__.VariableValue.fromPartial(object.content) : undefined;\n        message.createdAt = object.createdAt ?? undefined;\n        return message;\n    }\n};\nfunction createBaseWorkflowEventDef() {\n    return {\n        id: undefined,\n        createdAt: undefined,\n        type: _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ\n    };\n}\nconst WorkflowEventDef = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.id !== undefined) {\n            _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventDefId.encode(message.id, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.createdAt !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ) {\n            writer.uint32(24).int32((0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeToNumber)(message.type));\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader.create(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWorkflowEventDef();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if (tag !== 10) {\n                        break;\n                    }\n                    message.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventDefId.decode(reader, reader.uint32());\n                    continue;\n                case 2:\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.createdAt = fromTimestamp(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_2__.Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                case 3:\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeFromJSON)(reader.int32());\n                    continue;\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skipType(tag & 7);\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            id: isSet(object.id) ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventDefId.fromJSON(object.id) : undefined,\n            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,\n            type: isSet(object.type) ? (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeFromJSON)(object.type) : _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.id !== undefined) {\n            obj.id = _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventDefId.toJSON(message.id);\n        }\n        if (message.createdAt !== undefined) {\n            obj.createdAt = message.createdAt;\n        }\n        if (message.type !== _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ) {\n            obj.type = (0,_common_enums__WEBPACK_IMPORTED_MODULE_1__.variableTypeToJSON)(message.type);\n        }\n        return obj;\n    },\n    create (base) {\n        return WorkflowEventDef.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseWorkflowEventDef();\n        message.id = object.id !== undefined && object.id !== null ? _object_id__WEBPACK_IMPORTED_MODULE_3__.WorkflowEventDefId.fromPartial(object.id) : undefined;\n        message.createdAt = object.createdAt ?? undefined;\n        message.type = object.type ?? _common_enums__WEBPACK_IMPORTED_MODULE_1__.VariableType.JSON_OBJ;\n        return message;\n    }\n};\nfunction toTimestamp(dateStr) {\n    const date = new globalThis.Date(dateStr);\n    const seconds = Math.trunc(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = (t.seconds || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis).toISOString();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./littlehorse-public-api/workflow_event.ts\n");

/***/ }),

/***/ "(api)/./pages/api/LHClient.ts":
/*!*******************************!*\
  !*** ./pages/api/LHClient.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LHClient)\n/* harmony export */ });\n/* harmony import */ var nice_grpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nice-grpc */ \"nice-grpc\");\n/* harmony import */ var nice_grpc__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nice_grpc__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _littlehorse_public_api_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../littlehorse-public-api/service */ \"(api)/./littlehorse-public-api/service.ts\");\n/* harmony import */ var nice_grpc_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nice-grpc-common */ \"nice-grpc-common\");\n/* harmony import */ var nice_grpc_common__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(nice_grpc_common__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nclass LHClient {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function -- needed for a singleton\n    constructor(){}\n    static getInstance(accessToken) {\n        if (process.env.API_URL === undefined) {\n            throw new Error(\"Not able to get the API URL from your configuration.\");\n        }\n        if (process.env.LHD_OAUTH_ENABLED === \"true\") {\n            this.createUniqueSecureChannel(process.env.API_URL);\n            return (0,nice_grpc__WEBPACK_IMPORTED_MODULE_0__.createClientFactory)().use((call, options)=>call.next(call.request, {\n                    ...options,\n                    metadata: (0,nice_grpc_common__WEBPACK_IMPORTED_MODULE_2__.Metadata)(options.metadata).set(\"Authorization\", `Bearer ${accessToken}`)\n                })).create(_littlehorse_public_api_service__WEBPACK_IMPORTED_MODULE_1__.LittleHorseDefinition, LHClient.channel);\n        } else {\n            this.createUniqueInsecureChannel(process.env.API_URL);\n            return (0,nice_grpc__WEBPACK_IMPORTED_MODULE_0__.createClientFactory)().use((call, options)=>call.next(call.request, {\n                    ...options\n                })).create(_littlehorse_public_api_service__WEBPACK_IMPORTED_MODULE_1__.LittleHorseDefinition, LHClient.channel);\n        }\n    }\n    static createUniqueSecureChannel(apiUrl) {\n        const caCertificatePath = process.env.LHC_CA_CERT;\n        const applicationHasProvidedCACertificate = caCertificatePath !== undefined;\n        if (LHClient.channel === undefined) {\n            if (applicationHasProvidedCACertificate) {\n                LHClient.channel = (0,nice_grpc__WEBPACK_IMPORTED_MODULE_0__.createChannel)(apiUrl, nice_grpc__WEBPACK_IMPORTED_MODULE_0__.ChannelCredentials.createSsl(fs__WEBPACK_IMPORTED_MODULE_3__.readFileSync(caCertificatePath)));\n            } else {\n                LHClient.channel = (0,nice_grpc__WEBPACK_IMPORTED_MODULE_0__.createChannel)(apiUrl, nice_grpc__WEBPACK_IMPORTED_MODULE_0__.ChannelCredentials.createSsl());\n            }\n        }\n    }\n    static createUniqueInsecureChannel(apiUrl) {\n        if (LHClient.channel === undefined) {\n            LHClient.channel = (0,nice_grpc__WEBPACK_IMPORTED_MODULE_0__.createChannel)(apiUrl);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvTEhDbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDa0Y7QUFFTjtBQUNqQztBQUNuQjtBQUVULE1BQU1NO0lBRWpCLDBGQUEwRjtJQUMxRixhQUFzQixDQUN0QjtJQUVBLE9BQWNDLFlBQVlDLFdBQW9CLEVBQWlDO1FBQzNFLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0MsT0FBTyxLQUFLQyxXQUFXO1lBQ25DLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUVBLElBQUlKLFFBQVFDLEdBQUcsQ0FBQ0ksaUJBQWlCLEtBQUssUUFBUTtZQUMxQyxJQUFJLENBQUNDLHlCQUF5QixDQUFDTixRQUFRQyxHQUFHLENBQUNDLE9BQU87WUFFbEQsT0FBT1QsOERBQW1CQSxHQUFHYyxHQUFHLENBQUMsQ0FBQ0MsTUFBTUMsVUFDcENELEtBQUtFLElBQUksQ0FBQ0YsS0FBS0csT0FBTyxFQUFFO29CQUNwQixHQUFHRixPQUFPO29CQUNWRyxVQUFVakIsMERBQVFBLENBQUNjLFFBQVFHLFFBQVEsRUFBRUMsR0FBRyxDQUNwQyxpQkFDQSxDQUFDLE9BQU8sRUFBRWQsWUFBWSxDQUFDO2dCQUUvQixJQUFJZSxNQUFNLENBQUNwQixrRkFBcUJBLEVBQUVHLFNBQVNrQixPQUFPO1FBQzFELE9BQU87WUFDSCxJQUFJLENBQUNDLDJCQUEyQixDQUFDaEIsUUFBUUMsR0FBRyxDQUFDQyxPQUFPO1lBRXBELE9BQU9ULDhEQUFtQkEsR0FBR2MsR0FBRyxDQUFDLENBQUNDLE1BQU1DLFVBQ3BDRCxLQUFLRSxJQUFJLENBQUNGLEtBQUtHLE9BQU8sRUFBRTtvQkFDcEIsR0FBR0YsT0FBTztnQkFDZCxJQUFJSyxNQUFNLENBQUNwQixrRkFBcUJBLEVBQUVHLFNBQVNrQixPQUFPO1FBQzFEO0lBQ0o7SUFFQSxPQUFlVCwwQkFBMEJXLE1BQWMsRUFBRTtRQUNyRCxNQUFNQyxvQkFBd0NsQixRQUFRQyxHQUFHLENBQUNrQixXQUFXO1FBQ3JFLE1BQU1DLHNDQUFzQ0Ysc0JBQXNCZjtRQUVsRSxJQUFJTixTQUFTa0IsT0FBTyxLQUFLWixXQUFXO1lBQ2hDLElBQUlpQixxQ0FBcUM7Z0JBQ3JDdkIsU0FBU2tCLE9BQU8sR0FBR3ZCLHdEQUFhQSxDQUFDeUIsUUFDN0IxQix5REFBa0JBLENBQUM4QixTQUFTLENBQUN6Qiw0Q0FBZSxDQUFDc0I7WUFDckQsT0FBTztnQkFDSHJCLFNBQVNrQixPQUFPLEdBQUd2Qix3REFBYUEsQ0FBQ3lCLFFBQzdCMUIseURBQWtCQSxDQUFDOEIsU0FBUztZQUNwQztRQUNKO0lBQ0o7SUFFQSxPQUFlTCw0QkFBNEJDLE1BQWMsRUFBRTtRQUN2RCxJQUFJcEIsU0FBU2tCLE9BQU8sS0FBS1osV0FBVztZQUNoQ04sU0FBU2tCLE9BQU8sR0FBR3ZCLHdEQUFhQSxDQUFDeUI7UUFDckM7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vcGFnZXMvYXBpL0xIQ2xpZW50LnRzPzA2MmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGFubmVsIH0gZnJvbSAnbmljZS1ncnBjJ1xuaW1wb3J0IHsgQ2hhbm5lbENyZWRlbnRpYWxzLCBjcmVhdGVDaGFubmVsLCBjcmVhdGVDbGllbnRGYWN0b3J5IH0gZnJvbSAnbmljZS1ncnBjJ1xuaW1wb3J0IHR5cGUgeyBDbGllbnQgfSBmcm9tICduaWNlLWdycGMvc3JjL2NsaWVudC9DbGllbnQnXG5pbXBvcnQgeyBMaXR0bGVIb3JzZURlZmluaXRpb24gfSBmcm9tICcuLi8uLi9saXR0bGVob3JzZS1wdWJsaWMtYXBpL3NlcnZpY2UnXG5pbXBvcnQgeyBNZXRhZGF0YSB9IGZyb20gJ25pY2UtZ3JwYy1jb21tb24nXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTEhDbGllbnQge1xuICAgIHByaXZhdGUgc3RhdGljIGNoYW5uZWw6IENoYW5uZWxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uIC0tIG5lZWRlZCBmb3IgYSBzaW5nbGV0b25cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoYWNjZXNzVG9rZW4/OiBzdHJpbmcpOiBDbGllbnQ8TGl0dGxlSG9yc2VEZWZpbml0aW9uPiB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5BUElfVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGFibGUgdG8gZ2V0IHRoZSBBUEkgVVJMIGZyb20geW91ciBjb25maWd1cmF0aW9uLicpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTEhEX09BVVRIX0VOQUJMRUQgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVVbmlxdWVTZWN1cmVDaGFubmVsKHByb2Nlc3MuZW52LkFQSV9VUkwpXG5cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVDbGllbnRGYWN0b3J5KCkudXNlKChjYWxsLCBvcHRpb25zKSA9PlxuICAgICAgICAgICAgICAgIGNhbGwubmV4dChjYWxsLnJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IE1ldGFkYXRhKG9wdGlvbnMubWV0YWRhdGEpLnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIH0pKS5jcmVhdGUoTGl0dGxlSG9yc2VEZWZpbml0aW9uLCBMSENsaWVudC5jaGFubmVsKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVVbmlxdWVJbnNlY3VyZUNoYW5uZWwocHJvY2Vzcy5lbnYuQVBJX1VSTClcblxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNsaWVudEZhY3RvcnkoKS51c2UoKGNhbGwsIG9wdGlvbnMpID0+XG4gICAgICAgICAgICAgICAgY2FsbC5uZXh0KGNhbGwucmVxdWVzdCwge1xuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIH0pKS5jcmVhdGUoTGl0dGxlSG9yc2VEZWZpbml0aW9uLCBMSENsaWVudC5jaGFubmVsKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3JlYXRlVW5pcXVlU2VjdXJlQ2hhbm5lbChhcGlVcmw6IHN0cmluZykge1xuICAgICAgICBjb25zdCBjYUNlcnRpZmljYXRlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkID0gcHJvY2Vzcy5lbnYuTEhDX0NBX0NFUlRcbiAgICAgICAgY29uc3QgYXBwbGljYXRpb25IYXNQcm92aWRlZENBQ2VydGlmaWNhdGUgPSBjYUNlcnRpZmljYXRlUGF0aCAhPT0gdW5kZWZpbmVkXG5cbiAgICAgICAgaWYgKExIQ2xpZW50LmNoYW5uZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uSGFzUHJvdmlkZWRDQUNlcnRpZmljYXRlKSB7XG4gICAgICAgICAgICAgICAgTEhDbGllbnQuY2hhbm5lbCA9IGNyZWF0ZUNoYW5uZWwoYXBpVXJsLFxuICAgICAgICAgICAgICAgICAgICBDaGFubmVsQ3JlZGVudGlhbHMuY3JlYXRlU3NsKGZzLnJlYWRGaWxlU3luYyhjYUNlcnRpZmljYXRlUGF0aCkpKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBMSENsaWVudC5jaGFubmVsID0gY3JlYXRlQ2hhbm5lbChhcGlVcmwsXG4gICAgICAgICAgICAgICAgICAgIENoYW5uZWxDcmVkZW50aWFscy5jcmVhdGVTc2woKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNyZWF0ZVVuaXF1ZUluc2VjdXJlQ2hhbm5lbChhcGlVcmw6IHN0cmluZykge1xuICAgICAgICBpZiAoTEhDbGllbnQuY2hhbm5lbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBMSENsaWVudC5jaGFubmVsID0gY3JlYXRlQ2hhbm5lbChhcGlVcmwpXG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQ2hhbm5lbENyZWRlbnRpYWxzIiwiY3JlYXRlQ2hhbm5lbCIsImNyZWF0ZUNsaWVudEZhY3RvcnkiLCJMaXR0bGVIb3JzZURlZmluaXRpb24iLCJNZXRhZGF0YSIsImZzIiwiTEhDbGllbnQiLCJnZXRJbnN0YW5jZSIsImFjY2Vzc1Rva2VuIiwicHJvY2VzcyIsImVudiIsIkFQSV9VUkwiLCJ1bmRlZmluZWQiLCJFcnJvciIsIkxIRF9PQVVUSF9FTkFCTEVEIiwiY3JlYXRlVW5pcXVlU2VjdXJlQ2hhbm5lbCIsInVzZSIsImNhbGwiLCJvcHRpb25zIiwibmV4dCIsInJlcXVlc3QiLCJtZXRhZGF0YSIsInNldCIsImNyZWF0ZSIsImNoYW5uZWwiLCJjcmVhdGVVbmlxdWVJbnNlY3VyZUNoYW5uZWwiLCJhcGlVcmwiLCJjYUNlcnRpZmljYXRlUGF0aCIsIkxIQ19DQV9DRVJUIiwiYXBwbGljYXRpb25IYXNQcm92aWRlZENBQ2VydGlmaWNhdGUiLCJjcmVhdGVTc2wiLCJyZWFkRmlsZVN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/LHClient.ts\n");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].ts":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_keycloak__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/keycloak */ \"next-auth/providers/keycloak\");\n/* harmony import */ var next_auth_providers_keycloak__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_keycloak__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst providers = [];\nif (process.env.KEYCLOAK_CLIENT_ID && process.env.KEYCLOAK_CLIENT_ID !== \"\" && process.env.KEYCLOAK_CLIENT_SECRET && process.env.KEYCLOAK_CLIENT_SECRET !== \"\") {\n    providers.push(next_auth_providers_keycloak__WEBPACK_IMPORTED_MODULE_1___default()({\n        clientId: process.env.KEYCLOAK_CLIENT_ID,\n        clientSecret: process.env.KEYCLOAK_CLIENT_SECRET,\n        issuer: process.env.KEYCLOAK_ISSUER_URI\n    }));\n}\nasync function logoutFromKeyCloack(jwt) {\n    const { id_token } = jwt;\n    try {\n        const params = new URLSearchParams();\n        params.append(\"id_token_hint\", id_token);\n        await fetch(`${process.env.KEYCLOAK_ISSUER_URI}/protocol/openid-connect/logout?${params.toString()}`);\n    } catch (e) {\n        console.error(\"Unable to perform post-logout handshake\", e);\n    }\n}\nconst authOptions = {\n    pages: {\n        signIn: \"/signin\"\n    },\n    secret: process.env.AUTH_SECRET,\n    providers,\n    callbacks: {\n        jwt ({ token, account }) {\n            if (process.env.LHD_OAUTH_ENABLED === \"true\") {\n                if (account) {\n                    token.accessToken = account.access_token;\n                    token.exp = account.expires_at;\n                    token.expireTime = account.expires_at;\n                    token.id_token = account.id_token;\n                }\n                const tokenHasExpired = new Date() > new Date(token.expireTime * 1000);\n                if (tokenHasExpired) {\n                    logoutFromKeyCloack(token);\n                }\n            }\n            return token;\n        },\n        session ({ session, token }) {\n            if (process.env.LHD_OAUTH_ENABLED === \"true\") {\n                session.accessToken = token.accessToken;\n                session.expireTime = token.expireTime;\n                session.id_token = token.id_token;\n            }\n            return session;\n        }\n    },\n    events: {\n        signOut: ({ token })=>{\n            logoutFromKeyCloack(token);\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNnQztBQUUyQjtBQUczRCxNQUFNRSxZQUFnQixFQUFFO0FBQ3hCLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0Msa0JBQWtCLElBQzlCRixRQUFRQyxHQUFHLENBQUNDLGtCQUFrQixLQUFLLE1BQ25DRixRQUFRQyxHQUFHLENBQUNFLHNCQUFzQixJQUNsQ0gsUUFBUUMsR0FBRyxDQUFDRSxzQkFBc0IsS0FBSyxJQUFJO0lBQzNDSixVQUFVSyxJQUFJLENBQ1ZOLG1FQUFnQkEsQ0FBQztRQUNiTyxVQUFVTCxRQUFRQyxHQUFHLENBQUNDLGtCQUFrQjtRQUN4Q0ksY0FBY04sUUFBUUMsR0FBRyxDQUFDRSxzQkFBc0I7UUFDaERJLFFBQVFQLFFBQVFDLEdBQUcsQ0FBQ08sbUJBQW1CO0lBQzNDO0FBRVI7QUFFQSxlQUFlQyxvQkFBb0JDLEdBQVE7SUFDdkMsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0Q7SUFFckIsSUFBSTtRQUNBLE1BQU1FLFNBQVMsSUFBSUM7UUFDbkJELE9BQU9FLE1BQU0sQ0FBQyxpQkFBaUJIO1FBQy9CLE1BQU1JLE1BQU0sQ0FBQyxFQUFFZixRQUFRQyxHQUFHLENBQUNPLG1CQUFtQixDQUFDLGdDQUFnQyxFQUFFSSxPQUFPSSxRQUFRLEdBQUcsQ0FBQztJQUN4RyxFQUFFLE9BQU9DLEdBQVE7UUFDYkMsUUFBUUMsS0FBSyxDQUFDLDJDQUEyQ0Y7SUFDN0Q7QUFDSjtBQUlPLE1BQU1HLGNBQWM7SUFDdkJDLE9BQU07UUFDRkMsUUFBTztJQUNYO0lBQ0FDLFFBQVF2QixRQUFRQyxHQUFHLENBQUN1QixXQUFXO0lBQy9CekI7SUFDQTBCLFdBQVc7UUFDUGYsS0FBSSxFQUFFZ0IsS0FBSyxFQUFFQyxPQUFPLEVBQUU7WUFDbEIsSUFBSTNCLFFBQVFDLEdBQUcsQ0FBQzJCLGlCQUFpQixLQUFLLFFBQVE7Z0JBQzFDLElBQUlELFNBQVM7b0JBQ1RELE1BQU1HLFdBQVcsR0FBR0YsUUFBUUcsWUFBWTtvQkFDeENKLE1BQU1LLEdBQUcsR0FBR0osUUFBUUssVUFBVTtvQkFDOUJOLE1BQU1PLFVBQVUsR0FBR04sUUFBUUssVUFBVTtvQkFDckNOLE1BQU1mLFFBQVEsR0FBR2dCLFFBQVFoQixRQUFRO2dCQUNyQztnQkFFQSxNQUFNdUIsa0JBQWtCLElBQUlDLFNBQVMsSUFBSUEsS0FBS1QsTUFBTU8sVUFBVSxHQUFHO2dCQUVqRSxJQUFJQyxpQkFBaUI7b0JBQ2pCekIsb0JBQW9CaUI7Z0JBQ3hCO1lBQ0o7WUFFQSxPQUFPQTtRQUNYO1FBQ0FVLFNBQVEsRUFBRUEsT0FBTyxFQUFFVixLQUFLLEVBQUU7WUFDdEIsSUFBSTFCLFFBQVFDLEdBQUcsQ0FBQzJCLGlCQUFpQixLQUFLLFFBQVE7Z0JBQzFDUSxRQUFRUCxXQUFXLEdBQUdILE1BQU1HLFdBQVc7Z0JBQ3ZDTyxRQUFRSCxVQUFVLEdBQUdQLE1BQU1PLFVBQVU7Z0JBQ3JDRyxRQUFRekIsUUFBUSxHQUFHZSxNQUFNZixRQUFRO1lBQ3JDO1lBRUEsT0FBT3lCO1FBQ1g7SUFDSjtJQUNBQyxRQUFRO1FBQ0pDLFNBQVMsQ0FBQyxFQUFFWixLQUFLLEVBQUU7WUFDZmpCLG9CQUFvQmlCO1FBQ3hCO0lBQ0o7QUFDSixFQUFDO0FBY0QsaUVBQWU3QixnREFBUUEsQ0FBQ3VCLFlBQVlBLEVBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLnRzPzJlOGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTZXNzaW9uIH0gZnJvbSAnbmV4dC1hdXRoJ1xuaW1wb3J0IE5leHRBdXRoIGZyb20gJ25leHQtYXV0aCdcbmltcG9ydCB0eXBlIHsgSldUIH0gZnJvbSAnbmV4dC1hdXRoL2p3dCdcbmltcG9ydCBLZXljbG9ha1Byb3ZpZGVyIGZyb20gJ25leHQtYXV0aC9wcm92aWRlcnMva2V5Y2xvYWsnXG5cblxuY29uc3QgcHJvdmlkZXJzOmFueSA9IFtdXG5pZiAocHJvY2Vzcy5lbnYuS0VZQ0xPQUtfQ0xJRU5UX0lEICYmXG4gICAgcHJvY2Vzcy5lbnYuS0VZQ0xPQUtfQ0xJRU5UX0lEICE9PSAnJyAmJlxuICAgIHByb2Nlc3MuZW52LktFWUNMT0FLX0NMSUVOVF9TRUNSRVQgJiZcbiAgICBwcm9jZXNzLmVudi5LRVlDTE9BS19DTElFTlRfU0VDUkVUICE9PSAnJykge1xuICAgIHByb3ZpZGVycy5wdXNoKFxuICAgICAgICBLZXljbG9ha1Byb3ZpZGVyKHtcbiAgICAgICAgICAgIGNsaWVudElkOiBwcm9jZXNzLmVudi5LRVlDTE9BS19DTElFTlRfSUQgLFxuICAgICAgICAgICAgY2xpZW50U2VjcmV0OiBwcm9jZXNzLmVudi5LRVlDTE9BS19DTElFTlRfU0VDUkVULFxuICAgICAgICAgICAgaXNzdWVyOiBwcm9jZXNzLmVudi5LRVlDTE9BS19JU1NVRVJfVVJJXG4gICAgICAgIH0pXG4gICAgKVxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2dvdXRGcm9tS2V5Q2xvYWNrKGp3dDogSldUKSB7XG4gICAgY29uc3QgeyBpZF90b2tlbiB9ID0gand0XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcbiAgICAgICAgcGFyYW1zLmFwcGVuZCgnaWRfdG9rZW5faGludCcsIGlkX3Rva2VuIGFzIHN0cmluZylcbiAgICAgICAgYXdhaXQgZmV0Y2goYCR7cHJvY2Vzcy5lbnYuS0VZQ0xPQUtfSVNTVUVSX1VSSX0vcHJvdG9jb2wvb3BlbmlkLWNvbm5lY3QvbG9nb3V0PyR7cGFyYW1zLnRvU3RyaW5nKCl9YClcbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIHBlcmZvcm0gcG9zdC1sb2dvdXQgaGFuZHNoYWtlJywgZSlcbiAgICB9XG59XG5cblxuXG5leHBvcnQgY29uc3QgYXV0aE9wdGlvbnMgPSB7XG4gICAgcGFnZXM6e1xuICAgICAgICBzaWduSW46Jy9zaWduaW4nXG4gICAgfSxcbiAgICBzZWNyZXQ6IHByb2Nlc3MuZW52LkFVVEhfU0VDUkVULFxuICAgIHByb3ZpZGVycyxcbiAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgand0KHsgdG9rZW4sIGFjY291bnQgfSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52LkxIRF9PQVVUSF9FTkFCTEVEID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5hY2Nlc3NUb2tlbiA9IGFjY291bnQuYWNjZXNzX3Rva2VuXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLmV4cCA9IGFjY291bnQuZXhwaXJlc19hdFxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5leHBpcmVUaW1lID0gYWNjb3VudC5leHBpcmVzX2F0XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLmlkX3Rva2VuID0gYWNjb3VudC5pZF90b2tlblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuSGFzRXhwaXJlZCA9IG5ldyBEYXRlKCkgPiBuZXcgRGF0ZSh0b2tlbi5leHBpcmVUaW1lICogMTAwMClcblxuICAgICAgICAgICAgICAgIGlmICh0b2tlbkhhc0V4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nb3V0RnJvbUtleUNsb2Fjayh0b2tlbilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0b2tlbiBhcyBUb2tlbldpdGhKV1RJbmZvXG4gICAgICAgIH0sXG4gICAgICAgIHNlc3Npb24oeyBzZXNzaW9uLCB0b2tlbiB9KSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTEhEX09BVVRIX0VOQUJMRUQgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uYWNjZXNzVG9rZW4gPSB0b2tlbi5hY2Nlc3NUb2tlblxuICAgICAgICAgICAgICAgIHNlc3Npb24uZXhwaXJlVGltZSA9IHRva2VuLmV4cGlyZVRpbWVcbiAgICAgICAgICAgICAgICBzZXNzaW9uLmlkX3Rva2VuID0gdG9rZW4uaWRfdG9rZW5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlc3Npb24gYXMgU2Vzc2lvbldpdGhKV1RFeHBpcmVUaW1lXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgICAgc2lnbk91dDogKHsgdG9rZW4gfSkgPT4ge1xuICAgICAgICAgICAgbG9nb3V0RnJvbUtleUNsb2Fjayh0b2tlbilcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uV2l0aEpXVEV4cGlyZVRpbWUgZXh0ZW5kcyBTZXNzaW9uIHtcbiAgICBleHBpcmVUaW1lOiBudW1iZXIsXG4gICAgYWNjZXNzVG9rZW46IHN0cmluZyxcbiAgICBpZF90b2tlbjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5XaXRoSldUSW5mbyBleHRlbmRzIEpXVCB7XG4gICAgZXhwaXJlVGltZTogbnVtYmVyLFxuICAgIGFjY2Vzc1Rva2VuOiBzdHJpbmcsXG4gICAgaWRfdG9rZW46IHN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBOZXh0QXV0aChhdXRoT3B0aW9ucylcbiJdLCJuYW1lcyI6WyJOZXh0QXV0aCIsIktleWNsb2FrUHJvdmlkZXIiLCJwcm92aWRlcnMiLCJwcm9jZXNzIiwiZW52IiwiS0VZQ0xPQUtfQ0xJRU5UX0lEIiwiS0VZQ0xPQUtfQ0xJRU5UX1NFQ1JFVCIsInB1c2giLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsImlzc3VlciIsIktFWUNMT0FLX0lTU1VFUl9VUkkiLCJsb2dvdXRGcm9tS2V5Q2xvYWNrIiwiand0IiwiaWRfdG9rZW4iLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJmZXRjaCIsInRvU3RyaW5nIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsImF1dGhPcHRpb25zIiwicGFnZXMiLCJzaWduSW4iLCJzZWNyZXQiLCJBVVRIX1NFQ1JFVCIsImNhbGxiYWNrcyIsInRva2VuIiwiYWNjb3VudCIsIkxIRF9PQVVUSF9FTkFCTEVEIiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJleHAiLCJleHBpcmVzX2F0IiwiZXhwaXJlVGltZSIsInRva2VuSGFzRXhwaXJlZCIsIkRhdGUiLCJzZXNzaW9uIiwiZXZlbnRzIiwic2lnbk91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].ts\n");

/***/ }),

/***/ "(api)/./pages/api/grpcMethodCallHandler.ts":
/*!********************************************!*\
  !*** ./pages/api/grpcMethodCallHandler.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleGrpcCallWithNext: () => (/* binding */ handleGrpcCallWithNext),\n/* harmony export */   makeGrpcCall: () => (/* binding */ makeGrpcCall)\n/* harmony export */ });\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _auth_nextauth___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth/[...nextauth] */ \"(api)/./pages/api/auth/[...nextauth].ts\");\n/* harmony import */ var _LHClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LHClient */ \"(api)/./pages/api/LHClient.ts\");\n/* harmony import */ var nice_grpc_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nice-grpc-common */ \"nice-grpc-common\");\n/* harmony import */ var nice_grpc_common__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nice_grpc_common__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var http2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! http2 */ \"http2\");\n/* harmony import */ var http2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(http2__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nconst unauthorizedResponseContent = {\n    status: http2__WEBPACK_IMPORTED_MODULE_4__.constants.HTTP_STATUS_UNAUTHORIZED,\n    message: \"You need to be authenticated to access this resource.\"\n};\nconst makeGrpcCall = async (grpcMethodToCall, req, res, grpcRequestBody)=>{\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(req, res, _auth_nextauth___WEBPACK_IMPORTED_MODULE_1__.authOptions);\n    if (process.env.LHD_OAUTH_ENABLED === \"true\" && !session) {\n        res.status(401).json(unauthorizedResponseContent);\n    } else {\n        const client = _LHClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance(session?.accessToken);\n        try {\n            return await client[grpcMethodToCall](grpcRequestBody);\n        } catch (error) {\n            console.error(\"grpcMethodCallHandler - Error during GRPC call:\", error);\n            _handleError(error, res);\n        }\n    }\n};\nconst handleGrpcCallWithNext = async (grpcMethodToCall, req, res, grpcRequestBody)=>{\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(req, res, _auth_nextauth___WEBPACK_IMPORTED_MODULE_1__.authOptions);\n    if (process.env.LHD_OAUTH_ENABLED === \"true\" && !session) {\n        res.status(401).json(unauthorizedResponseContent);\n    } else {\n        const client = _LHClient__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance(session?.accessToken);\n        try {\n            const response = await client[grpcMethodToCall](grpcRequestBody);\n            res.send(response);\n        } catch (error) {\n            console.error(\"grpcMethodCallHandler - Error during GRPC call:\", error);\n            _handleError(error, res);\n        }\n    }\n};\nfunction _handleError(error, res) {\n    if (error.code === nice_grpc_common__WEBPACK_IMPORTED_MODULE_3__.Status.PERMISSION_DENIED || error.code === nice_grpc_common__WEBPACK_IMPORTED_MODULE_3__.Status.UNAUTHENTICATED) {\n        res.status(http2__WEBPACK_IMPORTED_MODULE_4__.constants.HTTP_STATUS_UNAUTHORIZED).json(unauthorizedResponseContent);\n    } else {\n        res.status(http2__WEBPACK_IMPORTED_MODULE_4__.constants.HTTP_STATUS_INTERNAL_SERVER_ERROR).json({\n            status: http2__WEBPACK_IMPORTED_MODULE_4__.constants.HTTP_STATUS_INTERNAL_SERVER_ERROR,\n            message: `There was an error while processing your request. ${error.details}`\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZ3JwY01ldGhvZENhbGxIYW5kbGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDaUQ7QUFDQztBQUdqQjtBQUNRO0FBQ1I7QUFFakMsTUFBTUssOEJBQThCO0lBQ2hDQyxRQUFRRiw0Q0FBU0EsQ0FBQ0csd0JBQXdCO0lBQzFDQyxTQUFTO0FBQ2I7QUFDTyxNQUFNQyxlQUFlLE9BQU9DLGtCQUMvQkMsS0FBcUJDLEtBQXNCQztJQUMzQyxNQUFNQyxVQUFVLE1BQU1kLGdFQUFnQkEsQ0FBQ1csS0FBS0MsS0FBS1gsd0RBQVdBO0lBRTVELElBQUtjLFFBQVFDLEdBQUcsQ0FBQ0MsaUJBQWlCLEtBQUssVUFBVSxDQUFDSCxTQUFTO1FBQ3ZERixJQUFJTixNQUFNLENBQUMsS0FDTlksSUFBSSxDQUFDYjtJQUNkLE9BQU87UUFDSCxNQUFNYyxTQUF3Q2pCLGlEQUFRQSxDQUFDa0IsV0FBVyxDQUFDTixTQUFTTztRQUU1RSxJQUFJO1lBQ0EsT0FBTyxNQUFNRixNQUFNLENBQUNULGlCQUFpQixDQUFDRztRQUMxQyxFQUFFLE9BQU9TLE9BQU87WUFDWkMsUUFBUUQsS0FBSyxDQUFDLG1EQUFtREE7WUFDakVFLGFBQWFGLE9BQU9WO1FBQ3hCO0lBQ0o7QUFFSixFQUFDO0FBQ00sTUFBTWEseUJBQXlCLE9BQU9mLGtCQUN6Q0MsS0FBcUJDLEtBQXNCQztJQUUzQyxNQUFNQyxVQUFVLE1BQU1kLGdFQUFnQkEsQ0FBQ1csS0FBS0MsS0FBS1gsd0RBQVdBO0lBRTVELElBQUljLFFBQVFDLEdBQUcsQ0FBQ0MsaUJBQWlCLEtBQUssVUFBVSxDQUFDSCxTQUFTO1FBQ3RERixJQUFJTixNQUFNLENBQUMsS0FDTlksSUFBSSxDQUFDYjtJQUNkLE9BQU87UUFDSCxNQUFNYyxTQUF3Q2pCLGlEQUFRQSxDQUFDa0IsV0FBVyxDQUFDTixTQUFTTztRQUU1RSxJQUFJO1lBQ0EsTUFBTUssV0FBZ0IsTUFBTVAsTUFBTSxDQUFDVCxpQkFBaUIsQ0FBQ0c7WUFDckRELElBQUllLElBQUksQ0FBQ0Q7UUFDYixFQUFFLE9BQU9KLE9BQU87WUFDWkMsUUFBUUQsS0FBSyxDQUFDLG1EQUFtREE7WUFDakVFLGFBQWFGLE9BQU9WO1FBQ3hCO0lBQ0o7QUFDSixFQUFDO0FBRUQsU0FBU1ksYUFBYUYsS0FBSyxFQUFFVixHQUFvQjtJQUM3QyxJQUFJVSxNQUFNTSxJQUFJLEtBQUt6QixvREFBTUEsQ0FBQzBCLGlCQUFpQixJQUFJUCxNQUFNTSxJQUFJLEtBQUt6QixvREFBTUEsQ0FBQzJCLGVBQWUsRUFBRTtRQUNsRmxCLElBQUlOLE1BQU0sQ0FBQ0YsNENBQVNBLENBQUNHLHdCQUF3QixFQUN4Q1csSUFBSSxDQUFDYjtJQUNkLE9BQU87UUFDSE8sSUFBSU4sTUFBTSxDQUFDRiw0Q0FBU0EsQ0FBQzJCLGlDQUFpQyxFQUNqRGIsSUFBSSxDQUFDO1lBQ0ZaLFFBQVFGLDRDQUFTQSxDQUFDMkIsaUNBQWlDO1lBQ25EdkIsU0FBUyxDQUFDLGtEQUFrRCxFQUFFYyxNQUFNVSxPQUFPLENBQUMsQ0FBQztRQUNqRjtJQUNSO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9wYWdlcy9hcGkvZ3JwY01ldGhvZENhbGxIYW5kbGVyLnRzP2JmMjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCdcbmltcG9ydCB7IGdldFNlcnZlclNlc3Npb24gfSBmcm9tICduZXh0LWF1dGgvbmV4dCdcbmltcG9ydCB7IGF1dGhPcHRpb25zIH0gZnJvbSAnLi9hdXRoL1suLi5uZXh0YXV0aF0nXG5pbXBvcnQgdHlwZSB7IENsaWVudCB9IGZyb20gJ25pY2UtZ3JwYy9zcmMvY2xpZW50L0NsaWVudCdcbmltcG9ydCB0eXBlIHsgTGl0dGxlSG9yc2VEZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vbGl0dGxlaG9yc2UtcHVibGljLWFwaS9zZXJ2aWNlJ1xuaW1wb3J0IExIQ2xpZW50IGZyb20gJy4vTEhDbGllbnQnXG5pbXBvcnQgeyBTdGF0dXMgfSBmcm9tICduaWNlLWdycGMtY29tbW9uJ1xuaW1wb3J0IHsgY29uc3RhbnRzIH0gZnJvbSAnaHR0cDInXG5cbmNvbnN0IHVuYXV0aG9yaXplZFJlc3BvbnNlQ29udGVudCA9IHtcbiAgICBzdGF0dXM6IGNvbnN0YW50cy5IVFRQX1NUQVRVU19VTkFVVEhPUklaRUQsXG4gICAgbWVzc2FnZTogJ1lvdSBuZWVkIHRvIGJlIGF1dGhlbnRpY2F0ZWQgdG8gYWNjZXNzIHRoaXMgcmVzb3VyY2UuJ1xufVxuZXhwb3J0IGNvbnN0IG1ha2VHcnBjQ2FsbCA9IGFzeW5jIChncnBjTWV0aG9kVG9DYWxsOiBzdHJpbmcsXG4gICAgcmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UsIGdycGNSZXF1ZXN0Qm9keTogb2JqZWN0KTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgZ2V0U2VydmVyU2Vzc2lvbihyZXEsIHJlcywgYXV0aE9wdGlvbnMpXG5cbiAgICBpZiAoIHByb2Nlc3MuZW52LkxIRF9PQVVUSF9FTkFCTEVEID09PSAndHJ1ZScgJiYgIXNlc3Npb24pIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpXG4gICAgICAgICAgICAuanNvbih1bmF1dGhvcml6ZWRSZXNwb25zZUNvbnRlbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2xpZW50OiBDbGllbnQ8TGl0dGxlSG9yc2VEZWZpbml0aW9uPiA9IExIQ2xpZW50LmdldEluc3RhbmNlKHNlc3Npb24/LmFjY2Vzc1Rva2VuKVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgY2xpZW50W2dycGNNZXRob2RUb0NhbGxdKGdycGNSZXF1ZXN0Qm9keSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dycGNNZXRob2RDYWxsSGFuZGxlciAtIEVycm9yIGR1cmluZyBHUlBDIGNhbGw6JywgZXJyb3IpXG4gICAgICAgICAgICBfaGFuZGxlRXJyb3IoZXJyb3IsIHJlcylcbiAgICAgICAgfVxuICAgIH1cblxufVxuZXhwb3J0IGNvbnN0IGhhbmRsZUdycGNDYWxsV2l0aE5leHQgPSBhc3luYyAoZ3JwY01ldGhvZFRvQ2FsbDogc3RyaW5nLFxuICAgIHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlLCBncnBjUmVxdWVzdEJvZHk6IG9iamVjdCkgPT4ge1xuXG4gICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGdldFNlcnZlclNlc3Npb24ocmVxLCByZXMsIGF1dGhPcHRpb25zKVxuXG4gICAgaWYgKHByb2Nlc3MuZW52LkxIRF9PQVVUSF9FTkFCTEVEID09PSAndHJ1ZScgJiYgIXNlc3Npb24pIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpXG4gICAgICAgICAgICAuanNvbih1bmF1dGhvcml6ZWRSZXNwb25zZUNvbnRlbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2xpZW50OiBDbGllbnQ8TGl0dGxlSG9yc2VEZWZpbml0aW9uPiA9IExIQ2xpZW50LmdldEluc3RhbmNlKHNlc3Npb24/LmFjY2Vzc1Rva2VuKVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZTogYW55ID0gYXdhaXQgY2xpZW50W2dycGNNZXRob2RUb0NhbGxdKGdycGNSZXF1ZXN0Qm9keSlcbiAgICAgICAgICAgIHJlcy5zZW5kKHJlc3BvbnNlKVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignZ3JwY01ldGhvZENhbGxIYW5kbGVyIC0gRXJyb3IgZHVyaW5nIEdSUEMgY2FsbDonLCBlcnJvcilcbiAgICAgICAgICAgIF9oYW5kbGVFcnJvcihlcnJvciwgcmVzKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfaGFuZGxlRXJyb3IoZXJyb3IsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09IFN0YXR1cy5QRVJNSVNTSU9OX0RFTklFRCB8fCBlcnJvci5jb2RlID09PSBTdGF0dXMuVU5BVVRIRU5USUNBVEVEKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoY29uc3RhbnRzLkhUVFBfU1RBVFVTX1VOQVVUSE9SSVpFRClcbiAgICAgICAgICAgIC5qc29uKHVuYXV0aG9yaXplZFJlc3BvbnNlQ29udGVudClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXMuc3RhdHVzKGNvbnN0YW50cy5IVFRQX1NUQVRVU19JTlRFUk5BTF9TRVJWRVJfRVJST1IpXG4gICAgICAgICAgICAuanNvbih7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBjb25zdGFudHMuSFRUUF9TVEFUVVNfSU5URVJOQUxfU0VSVkVSX0VSUk9SLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBUaGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuICR7ZXJyb3IuZGV0YWlsc31gXG4gICAgICAgICAgICB9KVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRTZXJ2ZXJTZXNzaW9uIiwiYXV0aE9wdGlvbnMiLCJMSENsaWVudCIsIlN0YXR1cyIsImNvbnN0YW50cyIsInVuYXV0aG9yaXplZFJlc3BvbnNlQ29udGVudCIsInN0YXR1cyIsIkhUVFBfU1RBVFVTX1VOQVVUSE9SSVpFRCIsIm1lc3NhZ2UiLCJtYWtlR3JwY0NhbGwiLCJncnBjTWV0aG9kVG9DYWxsIiwicmVxIiwicmVzIiwiZ3JwY1JlcXVlc3RCb2R5Iiwic2Vzc2lvbiIsInByb2Nlc3MiLCJlbnYiLCJMSERfT0FVVEhfRU5BQkxFRCIsImpzb24iLCJjbGllbnQiLCJnZXRJbnN0YW5jZSIsImFjY2Vzc1Rva2VuIiwiZXJyb3IiLCJjb25zb2xlIiwiX2hhbmRsZUVycm9yIiwiaGFuZGxlR3JwY0NhbGxXaXRoTmV4dCIsInJlc3BvbnNlIiwic2VuZCIsImNvZGUiLCJQRVJNSVNTSU9OX0RFTklFRCIsIlVOQVVUSEVOVElDQVRFRCIsIkhUVFBfU1RBVFVTX0lOVEVSTkFMX1NFUlZFUl9FUlJPUiIsImRldGFpbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/grpcMethodCallHandler.ts\n");

/***/ }),

/***/ "(api)/./pages/api/search/externalEventDef.ts":
/*!**********************************************!*\
  !*** ./pages/api/search/externalEventDef.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _littlehorse_public_api_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../littlehorse-public-api/service */ \"(api)/./littlehorse-public-api/service.ts\");\n/* harmony import */ var _grpcMethodCallHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grpcMethodCallHandler */ \"(api)/./pages/api/grpcMethodCallHandler.ts\");\n\n\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        await (0,_grpcMethodCallHandler__WEBPACK_IMPORTED_MODULE_1__.handleGrpcCallWithNext)(\"searchExternalEventDef\", req, res, _littlehorse_public_api_service__WEBPACK_IMPORTED_MODULE_0__.SearchExternalEventDefRequest.fromJSON(JSON.parse(req.body)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvc2VhcmNoL2V4dGVybmFsRXZlbnREZWYudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ3VGO0FBQ3RCO0FBRWxELGVBQWVFLFFBQVFDLEdBQWtCLEVBQUVDLEdBQW1CO0lBQ3pFLElBQUlELElBQUlFLE1BQU0sS0FBSyxRQUFRO1FBQ3ZCLE1BQU1KLDhFQUFzQkEsQ0FBQywwQkFBMEJFLEtBQUtDLEtBQUtKLDBGQUE2QkEsQ0FBQ00sUUFBUSxDQUFDQyxLQUFLQyxLQUFLLENBQUNMLElBQUlNLElBQUk7SUFDL0g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL3BhZ2VzL2FwaS9zZWFyY2gvZXh0ZXJuYWxFdmVudERlZi50cz85NzAzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnXG5pbXBvcnQgeyBTZWFyY2hFeHRlcm5hbEV2ZW50RGVmUmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL2xpdHRsZWhvcnNlLXB1YmxpYy1hcGkvc2VydmljZSdcbmltcG9ydCB7IGhhbmRsZUdycGNDYWxsV2l0aE5leHQgfSBmcm9tICcuLi9ncnBjTWV0aG9kQ2FsbEhhbmRsZXInXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOk5leHRBcGlSZXF1ZXN0LCByZXM6TmV4dEFwaVJlc3BvbnNlKSB7XG4gICAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgICBhd2FpdCBoYW5kbGVHcnBjQ2FsbFdpdGhOZXh0KCdzZWFyY2hFeHRlcm5hbEV2ZW50RGVmJywgcmVxLCByZXMsIFNlYXJjaEV4dGVybmFsRXZlbnREZWZSZXF1ZXN0LmZyb21KU09OKEpTT04ucGFyc2UocmVxLmJvZHkpKSlcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiU2VhcmNoRXh0ZXJuYWxFdmVudERlZlJlcXVlc3QiLCJoYW5kbGVHcnBjQ2FsbFdpdGhOZXh0IiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsImZyb21KU09OIiwiSlNPTiIsInBhcnNlIiwiYm9keSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/search/externalEventDef.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6"], () => (__webpack_exec__("(api)/../../node_modules/.pnpm/next@13.5.5_@babel+core@7.23.2_react-dom@18.2.0_react@18.2.0_sass@1.63.6/node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsearch%2FexternalEventDef&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsearch%2FexternalEventDef.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();